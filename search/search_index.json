{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to My Notes Generated by MkDocs Written by Johnny Lofton Site generated using MkDocs . Default index page has been moved to /MkDocs Project and Course Listing These notes were written in parallel with progress in various technology courses over time. The courses are listed below. Markdown Short notes from going through How to Markdown Javascript From Pluralsight course Javascript Fundamentals CSS Notes based on Udemy Course CSS - The Complete Guide 2020 (incl. Flexbox, Grid & Sass) MEAN Stack Notes from going through parts of Udemy course Angular & NodeJS - The MEAN Stack Guide Angular Based on Udemy Course Angular 8 The Complete Guide by Maximilian Schwarzm\u00fcller MERN Stack Notes based on Udemy Course React, NodeJS, Express & MongoDB - The MERN Fullstack Guide React Notes based on Udemy Course React - The Complete Guide (incl. Hooks, React Router, Redux) Vue - The Complete Guide Notes based on Udemy Course Vue - The Complete Guide (incl. Router & Composition API) Google Cloud Platform Based on Udemy Course Google Certified Associate Cloud Engineer Collection Power BI Based on Udemy Course Microsoft Power BI - The Practical Guide","title":"Home"},{"location":"#welcome-to-my-notes","text":"","title":"Welcome to My Notes"},{"location":"#generated-by-mkdocs","text":"","title":"Generated by MkDocs"},{"location":"#written-by-johnny-lofton","text":"Site generated using MkDocs . Default index page has been moved to /MkDocs","title":"Written by Johnny Lofton"},{"location":"#project-and-course-listing","text":"These notes were written in parallel with progress in various technology courses over time. The courses are listed below. Markdown Short notes from going through How to Markdown Javascript From Pluralsight course Javascript Fundamentals CSS Notes based on Udemy Course CSS - The Complete Guide 2020 (incl. Flexbox, Grid & Sass) MEAN Stack Notes from going through parts of Udemy course Angular & NodeJS - The MEAN Stack Guide Angular Based on Udemy Course Angular 8 The Complete Guide by Maximilian Schwarzm\u00fcller MERN Stack Notes based on Udemy Course React, NodeJS, Express & MongoDB - The MERN Fullstack Guide React Notes based on Udemy Course React - The Complete Guide (incl. Hooks, React Router, Redux) Vue - The Complete Guide Notes based on Udemy Course Vue - The Complete Guide (incl. Router & Composition API) Google Cloud Platform Based on Udemy Course Google Certified Associate Cloud Engineer Collection Power BI Based on Udemy Course Microsoft Power BI - The Practical Guide","title":"Project and Course Listing"},{"location":"css/","text":"CSS Complete Guide Notes based on Udemy Course CSS - The Complete Guide 2020 (incl. Flexbox, Grid, & Sass) 1. Getting Started 1.1 What is CSS Cascading Style Sheets HTML Required, structure of the page. CSS allows for the styling of the page (is optional!) Simple provided example 1.2 CSS History, Present and Future CSS 1 Released in 1996 CSS 2 Released in 1998 CSS 3 In Development There will never be a CSS 4 Development changed Split up into independent modules based on different features 1.3 Course Outline Basic Track Getting Started The Basics Diving Deeper More on Selectors & CSS Features Practicing the Basics Positioning Advanced Track Backgrounds & Images Dimensions, Units, & Sizes Javascript & CSS Responsiveness Styling Forms Working with Text & Fonts Expert Track Flexbox CSS Grid Transformations Transitions & Animations Writing Future-Proof CSS Sass Introduction 2. Diving into the Basics of CSS 2.1 Introduction How to Add CSS to HTML Setting up CSS Rules Selectors, Properties & Values Conflicting Styles 2.2 Adding CSS to our Project with Inline Styles Inline styling Shortcuts for colors, but comes down to hex codes. <section style=style=\"background: #ff1b68;\"> <h1>Get the freedom you deserve!</h1> </section> Doesn't scale well, makes it difficult to read. 2.3 Understanding the <style> Tag and Creating a .css file Can use <style> tag in <head> part of the HTML Need to use selectors Select all <section> elements: <head> <style> section { background: #ff1b68; } </style> </head> Can use an external style sheet main.css Dont use style tags Separates structure and styles. Helps to keep HTML file from becoming bloated Browser can cache. section { background: #ff1b68; } Have to explicitly tell include the file <head> <link rel=\"stylesheet\" href=\"main.css\"> <head> 2.4 Applying Additional Styles and Importing Google Fonts Changing more properties: h1 { color: white; font-family: sans-serif; } Given set of preinstalled font families, but can use Google Fonts for others Get import link Modify CSS file to use new font h1 { color: white; font-family: 'Anton', sans-serif; } 2.5 Theory Time - Selectors More about Selectors Selector html css Elements (Set equal style for these elements) <h1>Our Header</h1> h1 { color: red; } Classes (Set equal style for the elements within the same class) <h1 class=\"blog-post\">Our Header</h1> .blog-post { color: red; } Universal (rarely use) <h1>Our Header</h1> * { color: red; } IDs (Set style to one specific element) <h1 id=\"main-title\">Our Header</h1> #main-title { color: red; } Attributes (Set equal styles to all elements with attributes(s)) <button disabled>Click</button> [disabled] { color: red; } IDs not only used for styling, but also can add # at end of URL and browser will jump down to that element. Semantically should only occur once in page Kebab case recommended due to CSS being case-insensitive Class good choice for multiple-use scenarios You can also assign multiple classes with a space between the classes, e.g. class=\"section-title article-title Modify index.html and main.css <section id=\"product-overview\"> <h1>Get the freedom you deserve!</h1> </section> <section id=\"plans\"> <h1 class=\"section-title\">Choose Your Plan</h1> </section> #product-overview { background: #ff1b68; } h1 { color: white; font-family: 'Anton', sans-serif; } .section-title { color: #2ddf5c; } Understanding the \"Cascading\" Style and Specificity Both h1 and .section-title selectors apply Class selector overrides the element one here Multiple rules affect same element, and have different priorities. Inspector with dev-tools Inline at top, since inline styling takes highest priority Class selector has higher priority than element selector, and second element selector takes priority over the first. Multiple rules applied to the same element is the cascading part of CSS Rules can lead to conflicts, as shown To resolve conflicts, use Specificity Cascading Style Sheets & Specificity Cascading Specificity Multiple rules can apply to the same element Resolve conflicts arising from multiple Rules - Inline Styles - #ID selectors - .class , :pseudo-class and [attribute] selectors - <Tag> and ::pseudo-element selectors Understanding Inheritance An element also inherits some styles of the parent element. Add in a global rule body { font-family: 'Montserrat', sans-serif; } Any direct selector has higher specificity and will overwrite inheritance if it defines the same property as parent Adding Combinators Can use inherit to be explicit e.g. font-family: inherit; Not necessarily the best way Apply to only the one h1 tag: Class not good for only one use Already have ID for section, semantically not good Can use Combinator Combinator allows to combine multiple selectors More combinators, higher specificity Theory Time - Combinators Adjacent Sibling div + p { } Using h2 + p { color: red } : Applied: <h2>Not Applied</h2><p>CSS Applied<p> Not applied: <h3>Not Applied</h3><p>CSS Not Applied<p> Elements share the same parent Second element comes immediately after first element General Sibling div ~ p { } Using h2 ~ p { color: red } : Applied: <h2>Not Applied</h2><p>CSS Applied<p> Not applied: <h3>Not Applied</h3><p>CSS Applied<p> Applies to same level Elements share the same parent Second element comes after first, but doesn't have to be directly after it. Child div > p { } Using div > p { color: red } : Applied: <div>Not Applied</div><p>CSS Applied</p> Not applied: <div>Not applied</div><article><p>Not applied</p></article> Second element is direct child of first element. Descendant div p { } Level doesn't matter, all descendants Using div > p { color: red } : Applied: <div>Not Applied</div><p>CSS Applied</p> Applied: <div>Not applied</div><article><p>Applied</p></article> Second element is a descendant of the first element Summarizing Properties and Selectors Selectors Properties Values div background-color red .blog-post width 30% #main-title color #fa923f [disabled] margin 10px * display block Mozilla Developer Network CSS Reference Value Types Values are tightly coupled to specific property Pre-defined Options Colors Length, Sizes & Numbers Functions display: block; background: red; height: 100px; background: url(...); overflow: auto; color: #fa923f width:20%; transform: scale(...); - color: #ccc; order: 1; - 3. Diving Deeper into CSS Introduction The Box Model Height & Width The display Property \"Properties Worth to Remember\" Pseudo Classes & Elements Introducing the CSS Box Model Margin > Border > Padding > Content Margin not part of core element Space between element and next sibling The layers are the Box Model Understanding the Box Model #product-overview { background: #ff1b68; /* below added */ padding: 20px; border: 5px black solid; /* shorthand */ margin: 20px; } Understanding Margin Collapsing and Removing Default Margins body { font-family: 'Montserrat', sans-serif; /* below added */ margin: 0; } Margin Collapsing Margins between elements are collapsed to one margin, bigger one \"wins\" MDN Reference Theory Time - Working with Shorthand Properties Shorthand Properties Combine values of multiple properties in a single property (the shorthand property) Applying Shorthands in Practice #product-overview { background: #ff1b68; padding: 20px; /* border-style: solid; border-color: black; border-width: 5px; */ border: 5px black solid; margin: 20px; } Can see splitting up in Dev-tools Diving into the Height and Width Properties Set width to 100% #product-overview { background: #ff1b68; width: 100%; } Default behavior here anyway section , like div or h1 elements are block elements HTML feature Block-level elements always take full available width by default Percentages, absolute pixel values Heigh to 100% #product-overview { background: #ff1b68; width: 700px; height: 100%; } Uses available height Relative height of 100% Understanding Box Sizing Height & Width #product-overview { background: #ff1b68; width: 100%; height: 528px; padding: 10px; border: 5px solid black; margin: 10px; } Now have total width and height bigger than we specified All elements by default have a certain way of calculating width and height. Content box #product-overview { /* added: */ box-sizing: border-box; } Now width and height include padding and border. Height property setting now takes these into account Move box-sizing to body Inheritance doesn't take effect because browser sets its own block sizing Use the * selector now to reset all elements to have certain behavior Overwriting inheritance and defaults * { box-sizing: border-box; } Adding the Header to our Project Add and modify header code <header class=\"main-header\"> <div> <a href=\"index.html\"> uHost </a> </div> <nav> <ul> <li> <a href=\"packages/index.html\">Packages</a> </li> <li> <a href=\"customers/index.html\">Customers</a> </li> <li> <a href=\"start-hosting/index.html\">Start Hosting</a> </li> </ul> </nav> </header> Add to main.css .main-header { width: 100%; background-color: #2ddf5c; padding: 8px 16px; } Understanding the Display Property Add class to nav , ul and all li elements Use certain way of writing classes, BEM (Block element modifier) <nav class=\"main-nav\"> <ul class=\"main-nav__items\"> <li class=\"main-nav__item\"> Inline and block elements display: block and display: none visibility: hidden; alternative Modify main.css .main-nav__item { display: inline-block; } Can still style list items like block elements, but now displayed like inline elements now Applying the Display Property and Styling our Navigation Bar Modify main.css .main-header > div { display: inline-block; } .main-nav { display: inline-block; text-align: right; width: calc(100% - 49px); } .main-nav__items { margin: 0; padding: 0; list-style: none; } Understanding an Unexpected inline-block Behavior Empty whitespace is added as extra inline element Can remove space, but there is a better way width: calc(100% - 54px) for now, better solution later Working with text-decoration and vertical-align Add class to brand part of header <a href=\"index.html\" class=\"main-header__brand\"> Modify main.css & change .main-header > div { display: inline-block; vertical-align: middle; /* added */ } .main-header__brand { /* added */ color: #0e4f1f; text-decoration: none; font-weight: bold; font-size: 22px; } .main-nav { display: inline-block; text-align: right; width: calc(100% - 74px); /* was 54px */ vertical-align: middle; /* added */ } Styling Anchor Tags .main-nav__item { display: inline-block; margin: 0 16px; } .main-nav__item a { text-decoration: none; color: #0e4f1f; } Adding Pseudo Classes Modifying main.css, using pseudo classes: .main-nav__item a:hover { color: white; } .main-nav__item a:active { color: white; } Theory Time- Pseudo Classes and Pseudo Elements Pseudo Class Defines the style of a special state of an element :class name MDN Reference Element Defines the style of a specific part of an element : : element name MDN Reference Examples: .main-nav__item a::after { content: \" (Link)\"; color: red; } p::first-letter { color: red; font-size: 20px; } Grouping Rules Modify main.css .main-nav__item a:hover, .main-nav__item a:active { color: white; } Working with font-weight and border Modifying main.css: .main-nav__item a { text-decoration: none; color: #0e4f1f; font-weight: bold; padding: 3px 0; } .main-nav__item a:hover, .main-nav__item a:active { color: white; border-bottom: 5px solid white; } Adding and Styling a CTA-Button Call to Action button <li class=\"main-nav__item main-nav__item--cta\"> .main-nav__item--cta a { color: white; background: #ff1b68; padding: 8px 16px; border-radius: 8px; } .main-nav__item--cta a:hover, .main-nav__item--cta a:active { color: #ff1b68; background: white; border: none; } Adding a Background Image to our Project Modifying main.css #product-overview { background: url(\"freedom.jpg\"); width: 100%; height: 528px; padding: 10px; } Properties Worth to Remember 4. More on Selectors and CSS Features Introduction (4) More on CSS Classes !important More on Pseudo Classes & Elements not() Using Multiple CSS Classes and Combined Selectors More on CSS Classes You can use multiple classes on one element html: <div class=\"class1 class2\" css: .class1 { ... } .class2 { .. } You can select a same-element combination html: <a href=\"#\" class=\"active\"> css: a.active { ... } Classes or IDs Classes 1st pick CSS Class Selectors Class ID Selectors .some-class{ ... } #some-id {...} <div class=\"some-class\"> <div id=\"some-id\"> Re-usable Only used once per page Allow you to \"mark\" and name things for styling purposes only Also got non-CSS meaning (e.g. on-page link) Most-used selector type Use if available anyways Link to elsewhere on a page Baked into HTML HTML: href=\"#test\" URL: ~#test (Not) using !important div { color: red !important; /* overwrites specifity and all other selectors */ } Do NOT use, bad practice Selecting the Opposite with :not() Excludes selectors :not() CSS and Browser Support Whenever you use a certain feature, browser must support it. There's a way to go around this in some cases, come back to this later Can be found at the bottom of MDN references Also: caniuse.com 5. Practicing the Basics Adding Style to our Plans Add class to each article plan <article class=\"plan\"> Add CSS .section-title { color: #2ddf5c; text-align: center; /* added */ } /* ... */ .plan { background: #d5ffdc; text-align: center; padding: 16px; margin: 8px; display: inline-block; width: 30%; vertical-align: middle; } Working on the Recommended Plan Add article class and modify title <article class=\"plan plan--hightlighted\"> <h1 class=\"plan__annotation\">RECOMMENDED</h1> Modify main.css , introducting new box-shadow and rgb() / rbga() color function .plan--hightlighted { background: #19b84c; color: white; box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5); } Styling the Badge with border-radius Can use border-radius to round the corners .plan__annotation { background: white; color: #19b84c; padding: 8px; box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5); border-radius: 8px; } Styling our List Get rid of margin and padding from all ul <ul class=\"plan__features\"> .plan__features { list-style: none; margin: 0; padding: 0; } Adjust individual list items <li class=\"plan__feature\"> .plan__feature { margin: 8px 0; } Working on the Title and the Price of our Packages New Classes <h1 class=\"plan__title\">FREE</h1> <h2 class=\"plan__price\">$0/month</h2> /* main.css */ .plan__title { color: #0e4f1f; } .plan__price { color: #858585; } .plan--hightlighted .plan__title { color: white; } .plan--hightlighted .plan__price { color: #0e4f1f; } Improving our Action Button Add class <button class=\"button\">CHOOSE PLAN</button> Styling, using inherit for font .button { background: #0e4f1f; color: white; font: inherit; border: 1.5px solid #0e4f1f; padding: 8px; border-radius: 8px; font-weight: bold; cursor: pointer; } .button:hover, .button:active { background: white; color: #0e4f1f; } Understanding Outlines Comparable to border but is not part of box model, can use on focus active pseudo property .button:focus { outline: none; } Presenting the Core Features to the User Add new given HTML section Styling the Headline of the Core Features Section Reuse section-title class, and add id to section <section id=\"key-features\"> <h1 class=\"section-title\">Many Good Reasons to Stick Around</h1> Styling #key-features { background: #ff1b68; margin-top: 80px; padding: 16px; } #key-features .section-title { color: white; margin: 32px; } Preparing the Content of the Key Feature Area Add classes <ul class=\"key-feature__list\"> <li class=\"key-feature\"> <p class=\"key-feature__description\">Lightning Fast CDN</p> <div class=\"key-feature__image\"></div> Styling .key-feature__list { list-style: none; margin: 0; padding: 0; text-align: center; } .key-feature { display: inline-block; width: 30%; vertical-align: top; } .key-feature__image { background: #ffcede; width: 128px; height: 128px; border: 2px solid #424242; border-radius: 50%; margin: auto; } .key-feature__description{ text-align: center; font-weight: bold; color: white; font-size: 20px; } Adding the Footer Add given new html code, assign classes <footer class=\"main-footer\"> <ul class=\"main-footer__links\"> <li class=\"main-footer__link\"> Styling .main-footer { background: black; padding: 32px; margin-top: 48px; } .main-footer__links { list-style: none; margin: 0; padding: 0; text-align: center; } .main-footer__link { display: inline-block; margin: 0 16px; } .main-footer__link a { color: white; text-decoration: none; } .main-footer__link a:hover, .main-footer__link a:active { color: #ccc; } Adding Packages Page Reuse everything but what's in <main> ./packages/index.html ./packages/packages.css Separate out CSS files ./shared.css Styling the Links Add classes <section class=\"package\"> Styling main { padding-top: 32px; } .package { width: 80%; margin: 16px 0; border: 4px solid #0e4f1f; border-left: none; } .package a { text-decoration: none; color: inherit; display: block; padding: 32px; } Styling our Package Boxes Add classes <h1 class=\"package__title\"> <h2 class=\"package__subtitle\"> <p class=\"package__info\"> Also add individual IDs for each plan: <section class=\"package\" id=\"plus\"> <section class=\"package\" id=\"free\"> <section class=\"package\" id=\"premium\"> Styling .package:hover, .package:active { box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); border-color: #ff5454; } #plus { background: rgba(213, 255, 220, 0.95); } #free { background: rgba(234, 252, 237, 0.95); } #premium { background: rgba(14, 79, 31, 0.95); } #premium .package__title { color: white; } #premium .package__subtitle { color: #bbb; } Adding \"float\" to our Package Overwrite default positioning and tell browser to push element to left or right of page. Not great for moving block style elements. Add properties #free { background: rgba(234, 252, 237, 0.95); float: right; border-right: none; border-left: 4px solid #0e4f1f; text-align: right; } Need clearfix to fix float. <div class=\"clearfix\"></div> .clearfix { clear: both; } Fixing the Hover Effect Specificity border rule overrides, because of ID selector Simple fix with redundant code #free:hover, #free:active { border-left-color: #ff5454; } An alternative fix, only on very very rare occasions, using !important .package:hover, .package:active { box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); border-color: #ff5454 !important; } NOT RECOMMENDED! Adding Final Touches On main page, add class <div class=\"plan__list\"> Styling .plan__list { width: 80%; margin: auto; text-align: center; } 6. Positioning Elements with CSS 6. Introduction Positioning - How to change the position of Elements Understanding the position Property Fixed Navigation Bars with fixed Positioning Elements with z-index Using absolute and relative - Stand Alone and Combined \"Sticky\" Positioning The \"Stacking Context\" Why Positioning will Improve our Website Fixed Navigation Bar Background Image, slogan, positioning. Background Image on Packages page Add Badge to Plus plan on Packages page Understanding Positioning - The Theory position property applied automatically with static default value Other values include absolute , relative , fixed , sticky (new) Changing the Position Top, bottom, left, right options. Refer to initial position in Document Flow Options to Positioning Context Working with the fixed Value top: 100px; Not reflected Need to provide value other than default position: fixed; Removed from document flow .parent .child-1 { position: fixed; width: 400px; top: 100px; } Now applied Use top: 0; and margin: 0; to see context Now has viewport for the positioning context Example navbar: .parent .child-1 { position: fixed; width: 100%; top: 0; left: 0; margin: 0; box-sizing: border-box; } Can apply positioning no matter if it's a block level element or inline element Creating a Fixed Navigation Bar Modify main-header .main-header { width: 100%; position: fixed; top: 0; left: 0; background-color: #2ddf5c; padding: 8px 16px; } Using position to Add a Background Image Add div for background: <div class=\"background\"></div> (in between header and beginning of body) For image, add property background Set width/height to 100%, but cannot see image? This is due to position property. Use pixels, can now see. Change to fixed position and can now use percentages .background { background: url('../images/plans-background.jpg'); width: 100%; height: 100%; position: fixed; } Understanding the Z-Index Were able to position along axis, now need z-index Every element has z-index: auto; by default, which is z-index: 0; Use positive numbers to position above, negative for below NOTE : If element doesn't have position property applied (different from default), z-index has no effect Because background is fixed, covers up all package elements even though z-index may be 0. Can see Navbar because it is also fixed Now can add to background: .background { /* ... */ z-index: -1; } Adding a Badge to our Package Add badge on 'Plus' package <h2 class=\"package__badge\">RECOMMENDED</h2> Styling: .package__badge { position: fixed; top: 0; left: 0; margin: 20px; } Problem here is, the position context is the viewport, and that's not what we want here. Change to absolute No longer stuck to viewport Context based on two cases If no ancestors have position property, then positioning context is just the HTML element If it does have ancestors, the the closest one with position property applied is the positioning context for this element Apply absolute to whole package instead, breaks all packages. Change to relative Fixes this and gives badge a positioning context .package { /* ... */ position: relative; } Styling and Positioning our Badge with absolute and relative Adjust package badge styling .package__badge { position: absolute; top: 0; right: 0; margin: 20px; font-size: 12px; color: white; background-color: #ff5454; padding: 8px; } Also on .main-header : z-index: 1; , to keep package from going over navbar Diving Deeper into Relative Positioning Using demo code, appling relative position to first child Initially, nothing changes Add a top/left, element moves With position: relative , element is not taken out of document flow. absolute and fixed specifiy distance to parent element basically relative just specifies how it should move from current position Can end up moving directly out of parent Working with overflow and Relative Positioning In parent, can apply overflow: hidden Elements positioned out of parent are hidden Doing with body and parent instead, doesn't work. Is passed to HTML selector Default CSS behavior Now doesn't apply to child Can add to both Introducing sticky Positioning Using demo code Add position: sticky; to .parent .country Behaves like fixed, but then has a limit sticky is a combination of relative and fixed Doesn't do anything without setting top or right, etc Can specify distance between element and viewport End of the content in the parent is limit Rather new value for position property, browser support not perfect yet Understanding the Stacking Context Using demo code Fixed elements, taken out of document flow, with default z-index Stacking context comes into play when dealing with the children. Image will never go below its parent, will never go above elements higher than the parent Only effects elements inside the parent Stacking context depends on z-index of the parent 7. Understanding Background Images and Images 7. Introduction Understanding the background Property Images and Background Images Gradients Filters Understanding background-size Using direct background properties such as background-image and background-color Can define multiple backgrounds, just one color, but muiltiple images Can also use background-size background-size: 100px; affects the width here, can set width and height with background-size: 100px 50%; Also have pre-defined keywords, such as cover cover finds out if height or weight is more important, sets width to 100% here, landscape container contain is another entire image Can turn off repeating effect with background-repeat: no-repeat; Other options, such as repeat-x and repeat-y Working with background-position background-position first value is x-axis, second is y-axis, top edge Can also use percentage values here, which is based off of the excess space Default for y-axis is 50% Keyword center = background-position: 50% 50%; Also left , top , bottom , right Able to combine background-position: left 10% bottom 20%; The background Shorthand - Theory The background property background: red; background is a shorthand property background-image Set one or more background images background-color Set a background color background-position Set initial position, relative to background position layer Defined by background-origin background-size Set size of background image background-repeat Defines how background images are repeated background-origin Set background positioning area background-clip Define whether background extends underneath border background-attachment Sets the scrolling behavior of the background image All except for background-color and background-clip refer to background-image only Applying background Origin, Clip and Attachment Comparable to box-sizing, but has extra value By default cropped before border, can change here Can set background-origin: border-box; to have it go below border, away from default content-box means content without border padding padding-box including content and padding, but not border, is default value Can affect the cropping with background-clip Setting to border-box , same as before Setting to padding-box will clip image after padding Can set to content-box to clip before padding Also affects width here Overwrites background-origin background-attachment defines how scrolling behaves in a container that has a background image but not fixed itself Can set fixed , scroll , or local Rarely used Using the background Shorthand on our Project #product-overview { background: url('freedom.jpg') left 10% bottom 20% / cover no-repeat border-box; width: 100%; height: 528px; padding: 10px; margin-top: 43px; position: relative; } border-box at end applies to origin and clip, can give two separate values Styling Images <a href=\"index.html\" class=\"main-header__brand\"> <img src=\"./images/uhost-icon.png\" alt=\"uHost - Your favorite hosting company\" /> </a> Need to adjust size Default behavior is if you enter an image tag and you point to an image, then the default height and width of the original image will be used, regardless of the surrounding element Setting height on image elemnt as percentage dont respect surrounding container due to it being an inline element Must set display: inline-block; .main-header__brand { color: #0e4f1f; text-decoration: none; font-weight: bold; font-size: 22px; height: 22px; /* width: 20px; */ display: inline-block; } .main-header__brand img { height: 100%; /* width: 100%; */ } Adding the Customers Page to our Website Add given code and fix links Working on the Image Layout .testimonial__image-container { width: 65%; display: inline-block; vertical-align: middle; box-shadow: 3px 3px 3px 3px rgba(0,0,0,0.3); } .testimonial__image { width: 100%; vertical-align: top; } .testimonial__info { text-align: right; padding: 14px; display: inline-block; vertical-align: middle; width: 30%; } Understanding Linear Gradients Treated as images background-image: linear-gradient(red, blue); Line top to bottom by default, can give direction background-image: linear-gradient(to bottom, red, blue); Same as previous Can do to right bottom Also use degrees background-image: linear-gradient(0deg, red, blue); Bottom, 180deg for top Define multiple colors, hex codes background-image: linear-gradient(180deg, red, blue, green, yellow, #fa923f); Or transparent Also rgba() Can also define percentages of color in gradient background-image: linear-gradient(180deg, red 70%, blue 60%, rgba(0,0,0,0.5)); Hard cutoff here Applying Radial Gradients background-image: radial-gradient(red, blue); Circlular elipse, can change shape: background-image: radial-gradient(circle, red, blue, green); Position: background-image: radial-gradient(circle at top left, red, blue, green); Custom values background-image: radial-gradient(circle at 20% 50%, red, blue, green); Size: background-image: radial-gradient(circle 20px at 20% 50%, red, blue, green); Other keywords background-image: radial-gradient(ellipse farthest-side at 20% 50%, red, blue, green); closest-side closest-corner farthest-corner Also treated as images like linears Stacking Multiple Backgrounds Using multiple backgrounds background: Only one background-color may be used But can use multiple images Separate different layers with commas Modify main.css background #product-overview { background: linear-gradient(to top, rgba(80, 68, 18, 0.6) 10%, transparent), url('./images/freedom.jpg') left 10% bottom 20% / cover no-repeat border-box, #ff1b68; /* ... */ } Understanding Filters Can change look of an element by applying filters For example filter: blur(10px); MDN CSS filter Reference Modify packages.css: .background { background: url('../images/plans-background.jpg') center/cover; filter: grayscale(40%); width: 100%; height: 100%; position: fixed; z-index: -1; } Not supported in IE Adding and Styling SVGs - The Basics Full topic all on it's own Add given svg code to HTML Icons added Can style svg fill and stroke properties 8. Sizes and Units 8. Introduction Dimensions, Sizes, and Units In this Module Theory - Which Units can we Use? % and the Containing Block min-width & max-width Understanding rem vs em Working with vw and vh Where Units Matter Pixels, Percentages & More Units - pixels px percentages % root em rem em em viewport height vh viewport width vw 3 Core Questions Which properties can I use in connection with these units? How is the size calculated? What's the right unit to choose? Where Units Matter Box model ( box-sizing: border-box; ), content, padding, border, margin Which properties can I use? font-size padding border margin width height top bottom left right Different units, properties An Overview of Available Sizes and Units How is the Size Calculated? Absolute Lengths Viewport Lengths Font-Relative Lengths Mostly ignore user settings Adjust to current viewport Adjust to default font size px vh rem cm* vw em mm* vmin ... ... vmax - - % % *Different depending on browser, not regularly used Percentages are a special case How is the Box Size for % Units Calculated? Rules to Remember: Fixed Positioning & % Reference for element with a percentage unit is called the containing block Element With position: fixed; Has an impact Containing block is actually viewport Example with Nav Bar Rules to Remember: Absolute Positioning & % Refers to Ancestor content + the padding. Containing block is the closest ancestor which is not position: static; Example with slogan and section on main page Rules to Remember: Relative / Staic Positioning & % Only Ancestor content Closest that is block level element Example with customer image container Fixing the Height 100% Issue <div class=\"backdrop\"></div> .backdrop { position: fixed; /* demo with absolute */ display: none; /* hide for now */ top: 0; left: 0; z-index: 100; width: 100%; height: 100%; background: rgba(0,0,0,0.5) } Also fixes the margin stacking Defining the Font Size in the Root Element html { font-size: 75%; } Using min-width / min-height and max-width / max-height Modifying customer images .testimonial__image-container { max-width: 580px; /* ... */ } Working with rem and em Based on font-size 2em in example calculates to 40px Modify project to make font-size more dynamic with thes units /* customers.css */ .testimonial { font-size: 1.2em; /* ... */ } .testimonial__name { font-size: 2em; /* ... */ } .testimonial__subtitle { font-size: 1.1em; /* ... */ } em inherits previous sizes Can get out of control easily, careful rem for root Switch all above to rem Adding rem to Additional Properties .testimonial { font-size: 1.2rem; /* ... */ } .testimonial:first-of-type { margin-top: 6rem; } .testimonial__info { padding: 0.9rem; /* ... */ } .testimonial__name { margin: 0.2rem; /* ... */ } .testimonial__text { margin: 0.2rem; } Not recommended to use rem of box-shadow here Finishing rem Modifying packages.css main { padding-top: 2rem; } .package { margin: 1rem 0; /* ... */ } .package a { padding: 2rem; /* ... */ } .package__badge { margin: 1.2rem; padding: 0.5rem; font-size: 0.8rem; /* ... */ } .package__info { padding: 1rem; font-size: 1.2rem; /* ... */ } Use rest of given code Understanding the Viewport Units vw and vh Modify shared.css: Also have vmin & vmax .backdrop { width: 100vw; height: 100vh; /* ... */ } Modify main.css as well: #product-overview { /* changed bottom to 70% below */ background: linear-gradient(to top, rgba(80, 68, 18, 0.6) 10%, transparent), url('images/freedom.jpg') left 10% bottom 70% / cover no-repeat border-box, #ff1b68; /* ... */ width: 100vw; height: 33vh; /* ... */ } Windows, Viewport Units and Scrollbars vw in Windows does not include scrollbars, can use width: 100%; and other solutions Choosing the Right Unit Which Unit Should I Choose? Property \"Recommended\" Unit font-size (root element) % , - font-size rem (em => Children only) padding border margin rem px rem width height % vw % vh top bottom % % left right % % Using auto to Center Elements margin: auto; only works for block level elements with an explicitly assigned width though Cleaning Up our Code One modification in packages.css: .background { /* ... */ width: 100vw; height: 100vh; } Understanding Property Notations In Javascript, etc. using border-radius equates to borderRadius (Camel Case) 11. Adding and Styling Forms Advanced Attribute Selectors 13. Adding FlexBox to our Project 13. Introduction The Flex-Container Main Axis vs. Cross Axis The Flex Items How we Could Improve our Project Get rid of display: inline-block; declarations and fix other small issues Understanding Flexbox Change the way elements are displayed Need the display: property Assign flex: display: flex; We create a flex container this way Parent = Flex container Can apply various properties: flex-flow: justify-content: align-content: align-items: Children = Flex Items Can apply various properties: order: flex: align-self: Creating a Flex Container Using demo code for theory Start by just adding display: flex; Now in a row Elements are using entire height available in the parent Height defined by element with largest height, 300px in this case All items in container are now flex items display: inline-flex; alternative, behaves like inline element, uses size needed for content. The height is still used according to definition of the 4th element Using flex-direction and flex-wrap Apply flex-direction: row; (default behavior) Apply flex-wrap: nowrap; (default behavior) Change to wrap Now the height will change, while width will decrease/increase as needed Change direction to column Now behaves like we expect block level elements to Elements with no width defined will change even less than needed by content Also have column-reverse and row-reverse Understanding the Importance of Main Axis and Cross Axis Starting point for main axis is top left corner of element or website, to the top right Cross axis has same starting point, goes down to bottom left corner row-reverse flips main axis, for example Cross axis starts in right top corner, always has same starting point Working with align-items and justify-content First, can do flex-flow: shorthand to do both flex-direction and flex-wrap For example: flex-flow: row wrap; align-items: stretch; Default value Height always follow maximum height Change to align-items: center; Centered along cross-axis Different behavior when column flex instead of row Change to align-items: flex-start; Aligned to start of cross axis Can also use flex-end; What about main axis? Can use justify-content: center; for example, to center along main axis Justify Content defines poisition of flex elements along main axis Align Items defines poisition of flex elements along cross axis Using value baseline for align-content , aligns to baseline of actual content And What About align-content align-content allows us to align items along the cross axis Use values such as space-between , center Aligns a flex-containers lines within the flex container when there is extra space in the cross-axis Similar to how justify-content aligns individual items within the main axis Improving Navigation Bar with Flexbox Turn main header into flex-container and improve .main-header { /* */ display: flex; align-items: center; justify-content: space-between; } /* can now remove .main-header > div {...} */ /* ... */ .main-header__brand { /* can remove two below: */ display: inline-block; vertical-align: middle; } /* need to change image height now */ .main-header__brand img { height: 2.5rem; vertical-align: middle; } /* ... */ .main-nav__items { margin: 0; padding: 0; list-style: none; display: flex; } .main-nav__item { margin: 0 1rem; } /* ... */ @media (min-width: 40rem) { .toggle-button { display: none; } .main-nav { /* display: inline-block; text-align: right; width: calc(100% - 44px); vertical-align: middle; */ display: flex; } } Working on the Mobile Navigation Bar .mobile-nav__items { /* ... */ /* text-align: center; */ display: flex; flex-flow: column; justify-content: center; align-items: center; } Improving the Footer .main-footer__links { /* */ /* text-align: center; */ display: flex; flex-direction: column; align-items: center; } .main-footer__link { /* display: block; */ margin: 0.5rem 0; } /* ... */ @media (min-width: 40rem) { .main-footer__link { /* display: inline-block; */ margin: 0 1rem; } .main-footer__links { flex-direction: row; justify-content: center; } } Improving Plans and Features Plans @media (min-width: 40rem) { .plan__list { width: 100%; /* text-align: center; */ display: flex; justify-content: center; align-items: center; } .plan { /* display: inline-block; */ /* vertical-align: middle; */ width: 30%; min-width: 13rem; max-width: 25rem; display: flex; flex-direction: column; justify-content: space-between; height: 28rem; } .plan--highlighted { box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5); height: 30rem; z-index: 50; } } Features @media (min-width: 40rem) { .key-feature { /* display: inline-block; */ /* vertical-align: top; */ width: 30%; max-width: 25rem; } .key-feature__list { display: flex; justify-content: center; } } Adding Flexbox to Customers Page @media (min-width: 40rem) { .testimonial { margin: 3rem auto; max-width: 1500px; display: flex; align-items: center; justify-content: space-around; } .testimonial__image-container { /* display: inline-block; */ /* vertical-align: middle; */ width: 66%; } .testimonial__info { /* display: inline-block; */ /* vertical-align: middle; */ width: 30%; } } Using the order Property for a Flex Item Changing the order of elements Default value is order: 1; .item-4 { /* */ order: 1; } The bigger number, the later it will be positioned in the order opposite for negative values (earlier in order) Working with align-self align-self allows for positioning a single flex item along cross axis, overwriting default alignment i.e. align-self: flex-end; Understanding flex-grow Default is flex-grow: 0; Elements will grow given the fraction of the space given Adjusts to remaining space Two elements with flex-grow: 1; will divide remaining space by two Giving an element flex-grow larger than 0 means it will take up all the space available Applying flex-shrink Default is flex-shrink: 1; Defines behavior when width is decreased, or remaining space Given 0 , element will not shrink below predefined width Define if an element is allowed to shrink, and how much more one element is allowed to shrink when compared with another Comparing flex-basis vs width and height flex-basis defines size of an element depending on main axis auto will fallback to a width/height given depending on flex direction Can use percentage values Always refers to main axis Can only be applied to flex items Shorthand for flex-grow, flex-grow, flex-shrink flex: 0 1 auto; 14. Using the CSS Grid What is the CSS Grid Not supported by older browsers Turning a Container into a Grid .container { margin: 20px; display: grid; } Defining Columns and Rows On .container grid-template-columns: 200px 150px 20% 1fr; Defines 4 columns grid-template-rows: 5rem 2.5rem; Defines 2 rows Positioning Child Elements in a Grid On inner element: For columns grid-column-start: 3; grid-column-end: 5; For rows grid-row-start: 1; grid-row-end: 3; Using element-sizing , repeat and minmax Use auto to size element only as big as it needs to be, or as much as content r Filly empty spaceequires If no height defined Equally sized columns Using repeat function 25% 25% 25% 25%; --> repeat(4, 25%); Certain minimum and maximum height Using minmax grid-template-rows: 5rem minmax(10px, 200px); Advanced Element Positioning Can use span to occupy certain number of cells grid-column-end: span 3; Also can use negative values for positioning grid-column-start: 1; grid-column-end: -1; One column from the right, the end. In other words, should take an entire row. Can force an overlap. Grid will always try to avoid overlap, but can explicitly force it Can use z-index here to define overlap Working with Named Lines .container { /* ... */ grid-template-rows: [row-1-start] 5rem [row-1-end row-2-start] minmax(10px, 200px) [row-2-end row-3-start] 100px [row-3-end]; } /* ... */ .el3 { /* ... */ grid-row-start: row-1-start; grid-row-end: row-2-end; } Understanding Column and Row Shorthands Summarize column or row start/end grid-column: 1 / -1; grid-row: row-2-start / span 1; Or both: .el3 { /* ... */ /* grid-column-start: 2; grid-column-end: span 3; grid-row-start: row-1-start; grid-row-end: row-2-end; */ grid-area: row-1-start / 2 / row-2-end / span 3; } Working with Gaps Define a gap grid-column-gap: 20px; grid-row-gap: 10px; Or same with shorthand: grid-gap: 10px 20px; Obsolete according to editor? Adding Named Template Areas Can divide grid into areas which you assign names to Reference the area: grid-area: header; Define the grid names: .container { /* ... */ grid-template-areas: 'header header header header' 'side side main main' 'footer footer footer footer'; } 15. Transforming Elements with CSS Transforms 16. Transistions and Animations in CSS 17. Writing Future-Proof CSS Code 18. Introducing Sass 19. Course Roundup","title":"CSS"},{"location":"css/#css-complete-guide","text":"Notes based on Udemy Course CSS - The Complete Guide 2020 (incl. Flexbox, Grid, & Sass)","title":"CSS Complete Guide"},{"location":"css/#1-getting-started","text":"","title":"1. Getting Started"},{"location":"css/#11-what-is-css","text":"Cascading Style Sheets HTML Required, structure of the page. CSS allows for the styling of the page (is optional!) Simple provided example","title":"1.1 What is CSS"},{"location":"css/#12-css-history-present-and-future","text":"CSS 1 Released in 1996 CSS 2 Released in 1998 CSS 3 In Development There will never be a CSS 4 Development changed Split up into independent modules based on different features","title":"1.2 CSS History, Present and Future"},{"location":"css/#13-course-outline","text":"Basic Track Getting Started The Basics Diving Deeper More on Selectors & CSS Features Practicing the Basics Positioning Advanced Track Backgrounds & Images Dimensions, Units, & Sizes Javascript & CSS Responsiveness Styling Forms Working with Text & Fonts Expert Track Flexbox CSS Grid Transformations Transitions & Animations Writing Future-Proof CSS Sass Introduction","title":"1.3 Course Outline"},{"location":"css/#2-diving-into-the-basics-of-css","text":"","title":"2. Diving into the Basics of CSS"},{"location":"css/#21-introduction","text":"How to Add CSS to HTML Setting up CSS Rules Selectors, Properties & Values Conflicting Styles","title":"2.1 Introduction"},{"location":"css/#22-adding-css-to-our-project-with-inline-styles","text":"Inline styling Shortcuts for colors, but comes down to hex codes. <section style=style=\"background: #ff1b68;\"> <h1>Get the freedom you deserve!</h1> </section> Doesn't scale well, makes it difficult to read.","title":"2.2 Adding CSS to our Project with Inline Styles"},{"location":"css/#23-understanding-the-style-tag-and-creating-a-css-file","text":"Can use <style> tag in <head> part of the HTML Need to use selectors Select all <section> elements: <head> <style> section { background: #ff1b68; } </style> </head> Can use an external style sheet main.css Dont use style tags Separates structure and styles. Helps to keep HTML file from becoming bloated Browser can cache. section { background: #ff1b68; } Have to explicitly tell include the file <head> <link rel=\"stylesheet\" href=\"main.css\"> <head>","title":"2.3 Understanding the &lt;style&gt; Tag and Creating a .css file"},{"location":"css/#24-applying-additional-styles-and-importing-google-fonts","text":"Changing more properties: h1 { color: white; font-family: sans-serif; } Given set of preinstalled font families, but can use Google Fonts for others Get import link Modify CSS file to use new font h1 { color: white; font-family: 'Anton', sans-serif; }","title":"2.4 Applying Additional Styles and Importing Google Fonts"},{"location":"css/#25-theory-time-selectors","text":"More about Selectors Selector html css Elements (Set equal style for these elements) <h1>Our Header</h1> h1 { color: red; } Classes (Set equal style for the elements within the same class) <h1 class=\"blog-post\">Our Header</h1> .blog-post { color: red; } Universal (rarely use) <h1>Our Header</h1> * { color: red; } IDs (Set style to one specific element) <h1 id=\"main-title\">Our Header</h1> #main-title { color: red; } Attributes (Set equal styles to all elements with attributes(s)) <button disabled>Click</button> [disabled] { color: red; } IDs not only used for styling, but also can add # at end of URL and browser will jump down to that element. Semantically should only occur once in page Kebab case recommended due to CSS being case-insensitive Class good choice for multiple-use scenarios You can also assign multiple classes with a space between the classes, e.g. class=\"section-title article-title Modify index.html and main.css <section id=\"product-overview\"> <h1>Get the freedom you deserve!</h1> </section> <section id=\"plans\"> <h1 class=\"section-title\">Choose Your Plan</h1> </section> #product-overview { background: #ff1b68; } h1 { color: white; font-family: 'Anton', sans-serif; } .section-title { color: #2ddf5c; }","title":"2.5 Theory Time - Selectors"},{"location":"css/#understanding-the-cascading-style-and-specificity","text":"Both h1 and .section-title selectors apply Class selector overrides the element one here Multiple rules affect same element, and have different priorities. Inspector with dev-tools Inline at top, since inline styling takes highest priority Class selector has higher priority than element selector, and second element selector takes priority over the first. Multiple rules applied to the same element is the cascading part of CSS Rules can lead to conflicts, as shown To resolve conflicts, use Specificity Cascading Style Sheets & Specificity Cascading Specificity Multiple rules can apply to the same element Resolve conflicts arising from multiple Rules - Inline Styles - #ID selectors - .class , :pseudo-class and [attribute] selectors - <Tag> and ::pseudo-element selectors","title":"Understanding the \"Cascading\" Style and Specificity"},{"location":"css/#understanding-inheritance","text":"An element also inherits some styles of the parent element. Add in a global rule body { font-family: 'Montserrat', sans-serif; } Any direct selector has higher specificity and will overwrite inheritance if it defines the same property as parent","title":"Understanding Inheritance"},{"location":"css/#adding-combinators","text":"Can use inherit to be explicit e.g. font-family: inherit; Not necessarily the best way Apply to only the one h1 tag: Class not good for only one use Already have ID for section, semantically not good Can use Combinator Combinator allows to combine multiple selectors More combinators, higher specificity","title":"Adding Combinators"},{"location":"css/#theory-time-combinators","text":"Adjacent Sibling div + p { } Using h2 + p { color: red } : Applied: <h2>Not Applied</h2><p>CSS Applied<p> Not applied: <h3>Not Applied</h3><p>CSS Not Applied<p> Elements share the same parent Second element comes immediately after first element General Sibling div ~ p { } Using h2 ~ p { color: red } : Applied: <h2>Not Applied</h2><p>CSS Applied<p> Not applied: <h3>Not Applied</h3><p>CSS Applied<p> Applies to same level Elements share the same parent Second element comes after first, but doesn't have to be directly after it. Child div > p { } Using div > p { color: red } : Applied: <div>Not Applied</div><p>CSS Applied</p> Not applied: <div>Not applied</div><article><p>Not applied</p></article> Second element is direct child of first element. Descendant div p { } Level doesn't matter, all descendants Using div > p { color: red } : Applied: <div>Not Applied</div><p>CSS Applied</p> Applied: <div>Not applied</div><article><p>Applied</p></article> Second element is a descendant of the first element","title":"Theory Time - Combinators"},{"location":"css/#summarizing-properties-and-selectors","text":"Selectors Properties Values div background-color red .blog-post width 30% #main-title color #fa923f [disabled] margin 10px * display block Mozilla Developer Network CSS Reference Value Types Values are tightly coupled to specific property Pre-defined Options Colors Length, Sizes & Numbers Functions display: block; background: red; height: 100px; background: url(...); overflow: auto; color: #fa923f width:20%; transform: scale(...); - color: #ccc; order: 1; -","title":"Summarizing Properties and Selectors"},{"location":"css/#3-diving-deeper-into-css","text":"","title":"3. Diving Deeper into CSS"},{"location":"css/#introduction","text":"The Box Model Height & Width The display Property \"Properties Worth to Remember\" Pseudo Classes & Elements","title":"Introduction"},{"location":"css/#introducing-the-css-box-model","text":"Margin > Border > Padding > Content Margin not part of core element Space between element and next sibling The layers are the Box Model","title":"Introducing the CSS Box Model"},{"location":"css/#understanding-the-box-model","text":"#product-overview { background: #ff1b68; /* below added */ padding: 20px; border: 5px black solid; /* shorthand */ margin: 20px; }","title":"Understanding the Box Model"},{"location":"css/#understanding-margin-collapsing-and-removing-default-margins","text":"body { font-family: 'Montserrat', sans-serif; /* below added */ margin: 0; } Margin Collapsing Margins between elements are collapsed to one margin, bigger one \"wins\" MDN Reference","title":"Understanding Margin Collapsing and Removing Default Margins"},{"location":"css/#theory-time-working-with-shorthand-properties","text":"Shorthand Properties Combine values of multiple properties in a single property (the shorthand property)","title":"Theory Time - Working with Shorthand Properties"},{"location":"css/#applying-shorthands-in-practice","text":"#product-overview { background: #ff1b68; padding: 20px; /* border-style: solid; border-color: black; border-width: 5px; */ border: 5px black solid; margin: 20px; } Can see splitting up in Dev-tools","title":"Applying Shorthands in Practice"},{"location":"css/#diving-into-the-height-and-width-properties","text":"Set width to 100% #product-overview { background: #ff1b68; width: 100%; } Default behavior here anyway section , like div or h1 elements are block elements HTML feature Block-level elements always take full available width by default Percentages, absolute pixel values Heigh to 100% #product-overview { background: #ff1b68; width: 700px; height: 100%; } Uses available height Relative height of 100%","title":"Diving into the Height and Width Properties"},{"location":"css/#understanding-box-sizing","text":"Height & Width #product-overview { background: #ff1b68; width: 100%; height: 528px; padding: 10px; border: 5px solid black; margin: 10px; } Now have total width and height bigger than we specified All elements by default have a certain way of calculating width and height. Content box #product-overview { /* added: */ box-sizing: border-box; } Now width and height include padding and border. Height property setting now takes these into account Move box-sizing to body Inheritance doesn't take effect because browser sets its own block sizing Use the * selector now to reset all elements to have certain behavior Overwriting inheritance and defaults * { box-sizing: border-box; }","title":"Understanding Box Sizing"},{"location":"css/#adding-the-header-to-our-project","text":"Add and modify header code <header class=\"main-header\"> <div> <a href=\"index.html\"> uHost </a> </div> <nav> <ul> <li> <a href=\"packages/index.html\">Packages</a> </li> <li> <a href=\"customers/index.html\">Customers</a> </li> <li> <a href=\"start-hosting/index.html\">Start Hosting</a> </li> </ul> </nav> </header> Add to main.css .main-header { width: 100%; background-color: #2ddf5c; padding: 8px 16px; }","title":"Adding the Header to our Project"},{"location":"css/#understanding-the-display-property","text":"Add class to nav , ul and all li elements Use certain way of writing classes, BEM (Block element modifier) <nav class=\"main-nav\"> <ul class=\"main-nav__items\"> <li class=\"main-nav__item\"> Inline and block elements display: block and display: none visibility: hidden; alternative Modify main.css .main-nav__item { display: inline-block; } Can still style list items like block elements, but now displayed like inline elements now","title":"Understanding the Display Property"},{"location":"css/#applying-the-display-property-and-styling-our-navigation-bar","text":"Modify main.css .main-header > div { display: inline-block; } .main-nav { display: inline-block; text-align: right; width: calc(100% - 49px); } .main-nav__items { margin: 0; padding: 0; list-style: none; }","title":"Applying the Display Property and Styling our Navigation Bar"},{"location":"css/#understanding-an-unexpected-inline-block-behavior","text":"Empty whitespace is added as extra inline element Can remove space, but there is a better way width: calc(100% - 54px) for now, better solution later","title":"Understanding an Unexpected inline-block Behavior"},{"location":"css/#working-with-text-decoration-and-vertical-align","text":"Add class to brand part of header <a href=\"index.html\" class=\"main-header__brand\"> Modify main.css & change .main-header > div { display: inline-block; vertical-align: middle; /* added */ } .main-header__brand { /* added */ color: #0e4f1f; text-decoration: none; font-weight: bold; font-size: 22px; } .main-nav { display: inline-block; text-align: right; width: calc(100% - 74px); /* was 54px */ vertical-align: middle; /* added */ }","title":"Working with text-decoration and vertical-align"},{"location":"css/#styling-anchor-tags","text":".main-nav__item { display: inline-block; margin: 0 16px; } .main-nav__item a { text-decoration: none; color: #0e4f1f; }","title":"Styling Anchor Tags"},{"location":"css/#adding-pseudo-classes","text":"Modifying main.css, using pseudo classes: .main-nav__item a:hover { color: white; } .main-nav__item a:active { color: white; }","title":"Adding Pseudo Classes"},{"location":"css/#theory-time-pseudo-classes-and-pseudo-elements","text":"Pseudo Class Defines the style of a special state of an element :class name MDN Reference Element Defines the style of a specific part of an element : : element name MDN Reference Examples: .main-nav__item a::after { content: \" (Link)\"; color: red; } p::first-letter { color: red; font-size: 20px; }","title":"Theory Time- Pseudo Classes and Pseudo Elements"},{"location":"css/#grouping-rules","text":"Modify main.css .main-nav__item a:hover, .main-nav__item a:active { color: white; }","title":"Grouping Rules"},{"location":"css/#working-with-font-weight-and-border","text":"Modifying main.css: .main-nav__item a { text-decoration: none; color: #0e4f1f; font-weight: bold; padding: 3px 0; } .main-nav__item a:hover, .main-nav__item a:active { color: white; border-bottom: 5px solid white; }","title":"Working with font-weight and border"},{"location":"css/#adding-and-styling-a-cta-button","text":"Call to Action button <li class=\"main-nav__item main-nav__item--cta\"> .main-nav__item--cta a { color: white; background: #ff1b68; padding: 8px 16px; border-radius: 8px; } .main-nav__item--cta a:hover, .main-nav__item--cta a:active { color: #ff1b68; background: white; border: none; }","title":"Adding and Styling a CTA-Button"},{"location":"css/#adding-a-background-image-to-our-project","text":"Modifying main.css #product-overview { background: url(\"freedom.jpg\"); width: 100%; height: 528px; padding: 10px; }","title":"Adding a Background Image to our Project"},{"location":"css/#properties-worth-to-remember","text":"","title":"Properties Worth to Remember"},{"location":"css/#4-more-on-selectors-and-css-features","text":"","title":"4. More on Selectors and CSS Features"},{"location":"css/#introduction-4","text":"More on CSS Classes !important More on Pseudo Classes & Elements not()","title":"Introduction (4)"},{"location":"css/#using-multiple-css-classes-and-combined-selectors","text":"More on CSS Classes You can use multiple classes on one element html: <div class=\"class1 class2\" css: .class1 { ... } .class2 { .. } You can select a same-element combination html: <a href=\"#\" class=\"active\"> css: a.active { ... }","title":"Using Multiple CSS Classes and Combined Selectors"},{"location":"css/#classes-or-ids","text":"Classes 1st pick CSS Class Selectors Class ID Selectors .some-class{ ... } #some-id {...} <div class=\"some-class\"> <div id=\"some-id\"> Re-usable Only used once per page Allow you to \"mark\" and name things for styling purposes only Also got non-CSS meaning (e.g. on-page link) Most-used selector type Use if available anyways Link to elsewhere on a page Baked into HTML HTML: href=\"#test\" URL: ~#test","title":"Classes or IDs"},{"location":"css/#not-using-important","text":"div { color: red !important; /* overwrites specifity and all other selectors */ } Do NOT use, bad practice","title":"(Not) using !important"},{"location":"css/#selecting-the-opposite-with-not","text":"Excludes selectors","title":"Selecting the Opposite with :not()"},{"location":"css/#not","text":"","title":":not()"},{"location":"css/#css-and-browser-support","text":"Whenever you use a certain feature, browser must support it. There's a way to go around this in some cases, come back to this later Can be found at the bottom of MDN references Also: caniuse.com","title":"CSS and Browser Support"},{"location":"css/#5-practicing-the-basics","text":"","title":"5. Practicing the Basics"},{"location":"css/#adding-style-to-our-plans","text":"Add class to each article plan <article class=\"plan\"> Add CSS .section-title { color: #2ddf5c; text-align: center; /* added */ } /* ... */ .plan { background: #d5ffdc; text-align: center; padding: 16px; margin: 8px; display: inline-block; width: 30%; vertical-align: middle; }","title":"Adding Style to our Plans"},{"location":"css/#working-on-the-recommended-plan","text":"Add article class and modify title <article class=\"plan plan--hightlighted\"> <h1 class=\"plan__annotation\">RECOMMENDED</h1> Modify main.css , introducting new box-shadow and rgb() / rbga() color function .plan--hightlighted { background: #19b84c; color: white; box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5); }","title":"Working on the Recommended Plan"},{"location":"css/#styling-the-badge-with-border-radius","text":"Can use border-radius to round the corners .plan__annotation { background: white; color: #19b84c; padding: 8px; box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5); border-radius: 8px; }","title":"Styling the Badge with border-radius"},{"location":"css/#styling-our-list","text":"Get rid of margin and padding from all ul <ul class=\"plan__features\"> .plan__features { list-style: none; margin: 0; padding: 0; } Adjust individual list items <li class=\"plan__feature\"> .plan__feature { margin: 8px 0; }","title":"Styling our List"},{"location":"css/#working-on-the-title-and-the-price-of-our-packages","text":"New Classes <h1 class=\"plan__title\">FREE</h1> <h2 class=\"plan__price\">$0/month</h2> /* main.css */ .plan__title { color: #0e4f1f; } .plan__price { color: #858585; } .plan--hightlighted .plan__title { color: white; } .plan--hightlighted .plan__price { color: #0e4f1f; }","title":"Working on the Title and the Price of our Packages"},{"location":"css/#improving-our-action-button","text":"Add class <button class=\"button\">CHOOSE PLAN</button> Styling, using inherit for font .button { background: #0e4f1f; color: white; font: inherit; border: 1.5px solid #0e4f1f; padding: 8px; border-radius: 8px; font-weight: bold; cursor: pointer; } .button:hover, .button:active { background: white; color: #0e4f1f; }","title":"Improving our Action Button"},{"location":"css/#understanding-outlines","text":"Comparable to border but is not part of box model, can use on focus active pseudo property .button:focus { outline: none; }","title":"Understanding Outlines"},{"location":"css/#presenting-the-core-features-to-the-user","text":"Add new given HTML section","title":"Presenting the Core Features to the User"},{"location":"css/#styling-the-headline-of-the-core-features-section","text":"Reuse section-title class, and add id to section <section id=\"key-features\"> <h1 class=\"section-title\">Many Good Reasons to Stick Around</h1> Styling #key-features { background: #ff1b68; margin-top: 80px; padding: 16px; } #key-features .section-title { color: white; margin: 32px; }","title":"Styling the Headline of the Core Features Section"},{"location":"css/#preparing-the-content-of-the-key-feature-area","text":"Add classes <ul class=\"key-feature__list\"> <li class=\"key-feature\"> <p class=\"key-feature__description\">Lightning Fast CDN</p> <div class=\"key-feature__image\"></div> Styling .key-feature__list { list-style: none; margin: 0; padding: 0; text-align: center; } .key-feature { display: inline-block; width: 30%; vertical-align: top; } .key-feature__image { background: #ffcede; width: 128px; height: 128px; border: 2px solid #424242; border-radius: 50%; margin: auto; } .key-feature__description{ text-align: center; font-weight: bold; color: white; font-size: 20px; }","title":"Preparing the Content of the Key Feature Area"},{"location":"css/#adding-the-footer","text":"Add given new html code, assign classes <footer class=\"main-footer\"> <ul class=\"main-footer__links\"> <li class=\"main-footer__link\"> Styling .main-footer { background: black; padding: 32px; margin-top: 48px; } .main-footer__links { list-style: none; margin: 0; padding: 0; text-align: center; } .main-footer__link { display: inline-block; margin: 0 16px; } .main-footer__link a { color: white; text-decoration: none; } .main-footer__link a:hover, .main-footer__link a:active { color: #ccc; }","title":"Adding the Footer"},{"location":"css/#adding-packages-page","text":"Reuse everything but what's in <main> ./packages/index.html ./packages/packages.css Separate out CSS files ./shared.css","title":"Adding Packages Page"},{"location":"css/#styling-the-links","text":"Add classes <section class=\"package\"> Styling main { padding-top: 32px; } .package { width: 80%; margin: 16px 0; border: 4px solid #0e4f1f; border-left: none; } .package a { text-decoration: none; color: inherit; display: block; padding: 32px; }","title":"Styling the Links"},{"location":"css/#styling-our-package-boxes","text":"Add classes <h1 class=\"package__title\"> <h2 class=\"package__subtitle\"> <p class=\"package__info\"> Also add individual IDs for each plan: <section class=\"package\" id=\"plus\"> <section class=\"package\" id=\"free\"> <section class=\"package\" id=\"premium\"> Styling .package:hover, .package:active { box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); border-color: #ff5454; } #plus { background: rgba(213, 255, 220, 0.95); } #free { background: rgba(234, 252, 237, 0.95); } #premium { background: rgba(14, 79, 31, 0.95); } #premium .package__title { color: white; } #premium .package__subtitle { color: #bbb; }","title":"Styling our Package Boxes"},{"location":"css/#adding-float-to-our-package","text":"Overwrite default positioning and tell browser to push element to left or right of page. Not great for moving block style elements. Add properties #free { background: rgba(234, 252, 237, 0.95); float: right; border-right: none; border-left: 4px solid #0e4f1f; text-align: right; } Need clearfix to fix float. <div class=\"clearfix\"></div> .clearfix { clear: both; }","title":"Adding \"float\" to our Package"},{"location":"css/#fixing-the-hover-effect","text":"Specificity border rule overrides, because of ID selector Simple fix with redundant code #free:hover, #free:active { border-left-color: #ff5454; } An alternative fix, only on very very rare occasions, using !important .package:hover, .package:active { box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5); border-color: #ff5454 !important; } NOT RECOMMENDED!","title":"Fixing the Hover Effect"},{"location":"css/#adding-final-touches","text":"On main page, add class <div class=\"plan__list\"> Styling .plan__list { width: 80%; margin: auto; text-align: center; }","title":"Adding Final Touches"},{"location":"css/#6-positioning-elements-with-css","text":"","title":"6. Positioning Elements with CSS"},{"location":"css/#6-introduction","text":"Positioning - How to change the position of Elements Understanding the position Property Fixed Navigation Bars with fixed Positioning Elements with z-index Using absolute and relative - Stand Alone and Combined \"Sticky\" Positioning The \"Stacking Context\"","title":"6. Introduction"},{"location":"css/#why-positioning-will-improve-our-website","text":"Fixed Navigation Bar Background Image, slogan, positioning. Background Image on Packages page Add Badge to Plus plan on Packages page","title":"Why Positioning will Improve our Website"},{"location":"css/#understanding-positioning-the-theory","text":"position property applied automatically with static default value Other values include absolute , relative , fixed , sticky (new) Changing the Position Top, bottom, left, right options. Refer to initial position in Document Flow Options to Positioning Context","title":"Understanding Positioning - The Theory"},{"location":"css/#working-with-the-fixed-value","text":"top: 100px; Not reflected Need to provide value other than default position: fixed; Removed from document flow .parent .child-1 { position: fixed; width: 400px; top: 100px; } Now applied Use top: 0; and margin: 0; to see context Now has viewport for the positioning context Example navbar: .parent .child-1 { position: fixed; width: 100%; top: 0; left: 0; margin: 0; box-sizing: border-box; } Can apply positioning no matter if it's a block level element or inline element","title":"Working with the fixed Value"},{"location":"css/#creating-a-fixed-navigation-bar","text":"Modify main-header .main-header { width: 100%; position: fixed; top: 0; left: 0; background-color: #2ddf5c; padding: 8px 16px; }","title":"Creating a Fixed Navigation Bar"},{"location":"css/#using-position-to-add-a-background-image","text":"Add div for background: <div class=\"background\"></div> (in between header and beginning of body) For image, add property background Set width/height to 100%, but cannot see image? This is due to position property. Use pixels, can now see. Change to fixed position and can now use percentages .background { background: url('../images/plans-background.jpg'); width: 100%; height: 100%; position: fixed; }","title":"Using position to Add a Background Image"},{"location":"css/#understanding-the-z-index","text":"Were able to position along axis, now need z-index Every element has z-index: auto; by default, which is z-index: 0; Use positive numbers to position above, negative for below NOTE : If element doesn't have position property applied (different from default), z-index has no effect Because background is fixed, covers up all package elements even though z-index may be 0. Can see Navbar because it is also fixed Now can add to background: .background { /* ... */ z-index: -1; }","title":"Understanding the Z-Index"},{"location":"css/#adding-a-badge-to-our-package","text":"Add badge on 'Plus' package <h2 class=\"package__badge\">RECOMMENDED</h2> Styling: .package__badge { position: fixed; top: 0; left: 0; margin: 20px; } Problem here is, the position context is the viewport, and that's not what we want here. Change to absolute No longer stuck to viewport Context based on two cases If no ancestors have position property, then positioning context is just the HTML element If it does have ancestors, the the closest one with position property applied is the positioning context for this element Apply absolute to whole package instead, breaks all packages. Change to relative Fixes this and gives badge a positioning context .package { /* ... */ position: relative; }","title":"Adding a Badge to our Package"},{"location":"css/#styling-and-positioning-our-badge-with-absolute-and-relative","text":"Adjust package badge styling .package__badge { position: absolute; top: 0; right: 0; margin: 20px; font-size: 12px; color: white; background-color: #ff5454; padding: 8px; } Also on .main-header : z-index: 1; , to keep package from going over navbar","title":"Styling and Positioning our Badge with absolute and relative"},{"location":"css/#diving-deeper-into-relative-positioning","text":"Using demo code, appling relative position to first child Initially, nothing changes Add a top/left, element moves With position: relative , element is not taken out of document flow. absolute and fixed specifiy distance to parent element basically relative just specifies how it should move from current position Can end up moving directly out of parent","title":"Diving Deeper into Relative Positioning"},{"location":"css/#working-with-overflow-and-relative-positioning","text":"In parent, can apply overflow: hidden Elements positioned out of parent are hidden Doing with body and parent instead, doesn't work. Is passed to HTML selector Default CSS behavior Now doesn't apply to child Can add to both","title":"Working with overflow and Relative Positioning"},{"location":"css/#introducing-sticky-positioning","text":"Using demo code Add position: sticky; to .parent .country Behaves like fixed, but then has a limit sticky is a combination of relative and fixed Doesn't do anything without setting top or right, etc Can specify distance between element and viewport End of the content in the parent is limit Rather new value for position property, browser support not perfect yet","title":"Introducing sticky Positioning"},{"location":"css/#understanding-the-stacking-context","text":"Using demo code Fixed elements, taken out of document flow, with default z-index Stacking context comes into play when dealing with the children. Image will never go below its parent, will never go above elements higher than the parent Only effects elements inside the parent Stacking context depends on z-index of the parent","title":"Understanding the Stacking Context"},{"location":"css/#7-understanding-background-images-and-images","text":"","title":"7. Understanding Background Images and Images"},{"location":"css/#7-introduction","text":"Understanding the background Property Images and Background Images Gradients Filters","title":"7. Introduction"},{"location":"css/#understanding-background-size","text":"Using direct background properties such as background-image and background-color Can define multiple backgrounds, just one color, but muiltiple images Can also use background-size background-size: 100px; affects the width here, can set width and height with background-size: 100px 50%; Also have pre-defined keywords, such as cover cover finds out if height or weight is more important, sets width to 100% here, landscape container contain is another entire image Can turn off repeating effect with background-repeat: no-repeat; Other options, such as repeat-x and repeat-y","title":"Understanding background-size"},{"location":"css/#working-with-background-position","text":"background-position first value is x-axis, second is y-axis, top edge Can also use percentage values here, which is based off of the excess space Default for y-axis is 50% Keyword center = background-position: 50% 50%; Also left , top , bottom , right Able to combine background-position: left 10% bottom 20%;","title":"Working with background-position"},{"location":"css/#the-background-shorthand-theory","text":"The background property background: red; background is a shorthand property background-image Set one or more background images background-color Set a background color background-position Set initial position, relative to background position layer Defined by background-origin background-size Set size of background image background-repeat Defines how background images are repeated background-origin Set background positioning area background-clip Define whether background extends underneath border background-attachment Sets the scrolling behavior of the background image All except for background-color and background-clip refer to background-image only","title":"The background Shorthand - Theory"},{"location":"css/#applying-background-origin-clip-and-attachment","text":"Comparable to box-sizing, but has extra value By default cropped before border, can change here Can set background-origin: border-box; to have it go below border, away from default content-box means content without border padding padding-box including content and padding, but not border, is default value Can affect the cropping with background-clip Setting to border-box , same as before Setting to padding-box will clip image after padding Can set to content-box to clip before padding Also affects width here Overwrites background-origin background-attachment defines how scrolling behaves in a container that has a background image but not fixed itself Can set fixed , scroll , or local Rarely used","title":"Applying background Origin, Clip and Attachment"},{"location":"css/#using-the-background-shorthand-on-our-project","text":"#product-overview { background: url('freedom.jpg') left 10% bottom 20% / cover no-repeat border-box; width: 100%; height: 528px; padding: 10px; margin-top: 43px; position: relative; } border-box at end applies to origin and clip, can give two separate values","title":"Using the background Shorthand on our Project"},{"location":"css/#styling-images","text":"<a href=\"index.html\" class=\"main-header__brand\"> <img src=\"./images/uhost-icon.png\" alt=\"uHost - Your favorite hosting company\" /> </a> Need to adjust size Default behavior is if you enter an image tag and you point to an image, then the default height and width of the original image will be used, regardless of the surrounding element Setting height on image elemnt as percentage dont respect surrounding container due to it being an inline element Must set display: inline-block; .main-header__brand { color: #0e4f1f; text-decoration: none; font-weight: bold; font-size: 22px; height: 22px; /* width: 20px; */ display: inline-block; } .main-header__brand img { height: 100%; /* width: 100%; */ }","title":"Styling Images"},{"location":"css/#adding-the-customers-page-to-our-website","text":"Add given code and fix links","title":"Adding the Customers Page to our Website"},{"location":"css/#working-on-the-image-layout","text":".testimonial__image-container { width: 65%; display: inline-block; vertical-align: middle; box-shadow: 3px 3px 3px 3px rgba(0,0,0,0.3); } .testimonial__image { width: 100%; vertical-align: top; } .testimonial__info { text-align: right; padding: 14px; display: inline-block; vertical-align: middle; width: 30%; }","title":"Working on the Image Layout"},{"location":"css/#understanding-linear-gradients","text":"Treated as images background-image: linear-gradient(red, blue); Line top to bottom by default, can give direction background-image: linear-gradient(to bottom, red, blue); Same as previous Can do to right bottom Also use degrees background-image: linear-gradient(0deg, red, blue); Bottom, 180deg for top Define multiple colors, hex codes background-image: linear-gradient(180deg, red, blue, green, yellow, #fa923f); Or transparent Also rgba() Can also define percentages of color in gradient background-image: linear-gradient(180deg, red 70%, blue 60%, rgba(0,0,0,0.5)); Hard cutoff here","title":"Understanding Linear Gradients"},{"location":"css/#applying-radial-gradients","text":"background-image: radial-gradient(red, blue); Circlular elipse, can change shape: background-image: radial-gradient(circle, red, blue, green); Position: background-image: radial-gradient(circle at top left, red, blue, green); Custom values background-image: radial-gradient(circle at 20% 50%, red, blue, green); Size: background-image: radial-gradient(circle 20px at 20% 50%, red, blue, green); Other keywords background-image: radial-gradient(ellipse farthest-side at 20% 50%, red, blue, green); closest-side closest-corner farthest-corner Also treated as images like linears","title":"Applying Radial Gradients"},{"location":"css/#stacking-multiple-backgrounds","text":"Using multiple backgrounds background: Only one background-color may be used But can use multiple images Separate different layers with commas Modify main.css background #product-overview { background: linear-gradient(to top, rgba(80, 68, 18, 0.6) 10%, transparent), url('./images/freedom.jpg') left 10% bottom 20% / cover no-repeat border-box, #ff1b68; /* ... */ }","title":"Stacking Multiple Backgrounds"},{"location":"css/#understanding-filters","text":"Can change look of an element by applying filters For example filter: blur(10px); MDN CSS filter Reference Modify packages.css: .background { background: url('../images/plans-background.jpg') center/cover; filter: grayscale(40%); width: 100%; height: 100%; position: fixed; z-index: -1; } Not supported in IE","title":"Understanding Filters"},{"location":"css/#adding-and-styling-svgs-the-basics","text":"Full topic all on it's own Add given svg code to HTML Icons added Can style svg fill and stroke properties","title":"Adding and Styling SVGs - The Basics"},{"location":"css/#8-sizes-and-units","text":"","title":"8. Sizes and Units"},{"location":"css/#8-introduction","text":"Dimensions, Sizes, and Units In this Module Theory - Which Units can we Use? % and the Containing Block min-width & max-width Understanding rem vs em Working with vw and vh","title":"8. Introduction"},{"location":"css/#where-units-matter","text":"Pixels, Percentages & More Units - pixels px percentages % root em rem em em viewport height vh viewport width vw 3 Core Questions Which properties can I use in connection with these units? How is the size calculated? What's the right unit to choose? Where Units Matter Box model ( box-sizing: border-box; ), content, padding, border, margin Which properties can I use? font-size padding border margin width height top bottom left right Different units, properties","title":"Where Units Matter"},{"location":"css/#an-overview-of-available-sizes-and-units","text":"How is the Size Calculated? Absolute Lengths Viewport Lengths Font-Relative Lengths Mostly ignore user settings Adjust to current viewport Adjust to default font size px vh rem cm* vw em mm* vmin ... ... vmax - - % % *Different depending on browser, not regularly used Percentages are a special case How is the Box Size for % Units Calculated?","title":"An Overview of Available Sizes and Units"},{"location":"css/#rules-to-remember-fixed-positioning","text":"Reference for element with a percentage unit is called the containing block Element With position: fixed; Has an impact Containing block is actually viewport Example with Nav Bar","title":"Rules to Remember: Fixed Positioning &amp; %"},{"location":"css/#rules-to-remember-absolute-positioning","text":"Refers to Ancestor content + the padding. Containing block is the closest ancestor which is not position: static; Example with slogan and section on main page","title":"Rules to Remember: Absolute Positioning &amp; %"},{"location":"css/#rules-to-remember-relative-staic-positioning","text":"Only Ancestor content Closest that is block level element Example with customer image container","title":"Rules to Remember: Relative / Staic Positioning &amp; %"},{"location":"css/#fixing-the-height-100-issue","text":"<div class=\"backdrop\"></div> .backdrop { position: fixed; /* demo with absolute */ display: none; /* hide for now */ top: 0; left: 0; z-index: 100; width: 100%; height: 100%; background: rgba(0,0,0,0.5) } Also fixes the margin stacking","title":"Fixing the Height 100% Issue"},{"location":"css/#defining-the-font-size-in-the-root-element","text":"html { font-size: 75%; }","title":"Defining the Font Size in the Root Element"},{"location":"css/#using-min-widthmin-height-and-max-widthmax-height","text":"Modifying customer images .testimonial__image-container { max-width: 580px; /* ... */ }","title":"Using min-width/min-height and max-width/max-height"},{"location":"css/#working-with-rem-and-em","text":"Based on font-size 2em in example calculates to 40px Modify project to make font-size more dynamic with thes units /* customers.css */ .testimonial { font-size: 1.2em; /* ... */ } .testimonial__name { font-size: 2em; /* ... */ } .testimonial__subtitle { font-size: 1.1em; /* ... */ } em inherits previous sizes Can get out of control easily, careful rem for root Switch all above to rem","title":"Working with rem and em"},{"location":"css/#adding-rem-to-additional-properties","text":".testimonial { font-size: 1.2rem; /* ... */ } .testimonial:first-of-type { margin-top: 6rem; } .testimonial__info { padding: 0.9rem; /* ... */ } .testimonial__name { margin: 0.2rem; /* ... */ } .testimonial__text { margin: 0.2rem; } Not recommended to use rem of box-shadow here","title":"Adding rem to Additional Properties"},{"location":"css/#finishing-rem","text":"Modifying packages.css main { padding-top: 2rem; } .package { margin: 1rem 0; /* ... */ } .package a { padding: 2rem; /* ... */ } .package__badge { margin: 1.2rem; padding: 0.5rem; font-size: 0.8rem; /* ... */ } .package__info { padding: 1rem; font-size: 1.2rem; /* ... */ } Use rest of given code","title":"Finishing rem"},{"location":"css/#understanding-the-viewport-units-vw-and-vh","text":"Modify shared.css: Also have vmin & vmax .backdrop { width: 100vw; height: 100vh; /* ... */ } Modify main.css as well: #product-overview { /* changed bottom to 70% below */ background: linear-gradient(to top, rgba(80, 68, 18, 0.6) 10%, transparent), url('images/freedom.jpg') left 10% bottom 70% / cover no-repeat border-box, #ff1b68; /* ... */ width: 100vw; height: 33vh; /* ... */ }","title":"Understanding the Viewport Units vw and vh"},{"location":"css/#windows-viewport-units-and-scrollbars","text":"vw in Windows does not include scrollbars, can use width: 100%; and other solutions","title":"Windows, Viewport Units and Scrollbars"},{"location":"css/#choosing-the-right-unit","text":"Which Unit Should I Choose? Property \"Recommended\" Unit font-size (root element) % , - font-size rem (em => Children only) padding border margin rem px rem width height % vw % vh top bottom % % left right % %","title":"Choosing the Right Unit"},{"location":"css/#using-auto-to-center-elements","text":"margin: auto; only works for block level elements with an explicitly assigned width though","title":"Using auto to Center Elements"},{"location":"css/#cleaning-up-our-code","text":"One modification in packages.css: .background { /* ... */ width: 100vw; height: 100vh; }","title":"Cleaning Up our Code"},{"location":"css/#understanding-property-notations","text":"In Javascript, etc. using border-radius equates to borderRadius (Camel Case)","title":"Understanding Property Notations"},{"location":"css/#11-adding-and-styling-forms","text":"","title":"11. Adding and Styling Forms"},{"location":"css/#advanced-attribute-selectors","text":"","title":"Advanced Attribute Selectors"},{"location":"css/#13-adding-flexbox-to-our-project","text":"","title":"13. Adding FlexBox to our Project"},{"location":"css/#13-introduction","text":"The Flex-Container Main Axis vs. Cross Axis The Flex Items","title":"13. Introduction"},{"location":"css/#how-we-could-improve-our-project","text":"Get rid of display: inline-block; declarations and fix other small issues","title":"How we Could Improve our Project"},{"location":"css/#understanding-flexbox","text":"Change the way elements are displayed Need the display: property Assign flex: display: flex; We create a flex container this way Parent = Flex container Can apply various properties: flex-flow: justify-content: align-content: align-items: Children = Flex Items Can apply various properties: order: flex: align-self:","title":"Understanding Flexbox"},{"location":"css/#creating-a-flex-container","text":"Using demo code for theory Start by just adding display: flex; Now in a row Elements are using entire height available in the parent Height defined by element with largest height, 300px in this case All items in container are now flex items display: inline-flex; alternative, behaves like inline element, uses size needed for content. The height is still used according to definition of the 4th element","title":"Creating a Flex Container"},{"location":"css/#using-flex-direction-and-flex-wrap","text":"Apply flex-direction: row; (default behavior) Apply flex-wrap: nowrap; (default behavior) Change to wrap Now the height will change, while width will decrease/increase as needed Change direction to column Now behaves like we expect block level elements to Elements with no width defined will change even less than needed by content Also have column-reverse and row-reverse","title":"Using flex-direction and flex-wrap"},{"location":"css/#understanding-the-importance-of-main-axis-and-cross-axis","text":"Starting point for main axis is top left corner of element or website, to the top right Cross axis has same starting point, goes down to bottom left corner row-reverse flips main axis, for example Cross axis starts in right top corner, always has same starting point","title":"Understanding the Importance of Main Axis and Cross Axis"},{"location":"css/#working-with-align-items-and-justify-content","text":"First, can do flex-flow: shorthand to do both flex-direction and flex-wrap For example: flex-flow: row wrap; align-items: stretch; Default value Height always follow maximum height Change to align-items: center; Centered along cross-axis Different behavior when column flex instead of row Change to align-items: flex-start; Aligned to start of cross axis Can also use flex-end; What about main axis? Can use justify-content: center; for example, to center along main axis","title":"Working with align-items and justify-content"},{"location":"css/#justify-content-defines-poisition-of-flex-elements-along-main-axis","text":"","title":"Justify Content defines poisition of flex elements along main axis"},{"location":"css/#align-items-defines-poisition-of-flex-elements-along-cross-axis","text":"Using value baseline for align-content , aligns to baseline of actual content","title":"Align Items defines poisition of flex elements along cross axis"},{"location":"css/#and-what-about-align-content","text":"align-content allows us to align items along the cross axis Use values such as space-between , center Aligns a flex-containers lines within the flex container when there is extra space in the cross-axis Similar to how justify-content aligns individual items within the main axis","title":"And What About align-content"},{"location":"css/#improving-navigation-bar-with-flexbox","text":"Turn main header into flex-container and improve .main-header { /* */ display: flex; align-items: center; justify-content: space-between; } /* can now remove .main-header > div {...} */ /* ... */ .main-header__brand { /* can remove two below: */ display: inline-block; vertical-align: middle; } /* need to change image height now */ .main-header__brand img { height: 2.5rem; vertical-align: middle; } /* ... */ .main-nav__items { margin: 0; padding: 0; list-style: none; display: flex; } .main-nav__item { margin: 0 1rem; } /* ... */ @media (min-width: 40rem) { .toggle-button { display: none; } .main-nav { /* display: inline-block; text-align: right; width: calc(100% - 44px); vertical-align: middle; */ display: flex; } }","title":"Improving Navigation Bar with Flexbox"},{"location":"css/#working-on-the-mobile-navigation-bar","text":".mobile-nav__items { /* ... */ /* text-align: center; */ display: flex; flex-flow: column; justify-content: center; align-items: center; }","title":"Working on the Mobile Navigation Bar"},{"location":"css/#improving-the-footer","text":".main-footer__links { /* */ /* text-align: center; */ display: flex; flex-direction: column; align-items: center; } .main-footer__link { /* display: block; */ margin: 0.5rem 0; } /* ... */ @media (min-width: 40rem) { .main-footer__link { /* display: inline-block; */ margin: 0 1rem; } .main-footer__links { flex-direction: row; justify-content: center; } }","title":"Improving the Footer"},{"location":"css/#improving-plans-and-features","text":"Plans @media (min-width: 40rem) { .plan__list { width: 100%; /* text-align: center; */ display: flex; justify-content: center; align-items: center; } .plan { /* display: inline-block; */ /* vertical-align: middle; */ width: 30%; min-width: 13rem; max-width: 25rem; display: flex; flex-direction: column; justify-content: space-between; height: 28rem; } .plan--highlighted { box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5); height: 30rem; z-index: 50; } } Features @media (min-width: 40rem) { .key-feature { /* display: inline-block; */ /* vertical-align: top; */ width: 30%; max-width: 25rem; } .key-feature__list { display: flex; justify-content: center; } }","title":"Improving Plans and Features"},{"location":"css/#adding-flexbox-to-customers-page","text":"@media (min-width: 40rem) { .testimonial { margin: 3rem auto; max-width: 1500px; display: flex; align-items: center; justify-content: space-around; } .testimonial__image-container { /* display: inline-block; */ /* vertical-align: middle; */ width: 66%; } .testimonial__info { /* display: inline-block; */ /* vertical-align: middle; */ width: 30%; } }","title":"Adding Flexbox to Customers Page"},{"location":"css/#using-the-order-property-for-a-flex-item","text":"Changing the order of elements Default value is order: 1; .item-4 { /* */ order: 1; } The bigger number, the later it will be positioned in the order opposite for negative values (earlier in order)","title":"Using the order Property for a Flex Item"},{"location":"css/#working-with-align-self","text":"align-self allows for positioning a single flex item along cross axis, overwriting default alignment i.e. align-self: flex-end;","title":"Working with align-self"},{"location":"css/#understanding-flex-grow","text":"Default is flex-grow: 0; Elements will grow given the fraction of the space given Adjusts to remaining space Two elements with flex-grow: 1; will divide remaining space by two Giving an element flex-grow larger than 0 means it will take up all the space available","title":"Understanding flex-grow"},{"location":"css/#applying-flex-shrink","text":"Default is flex-shrink: 1; Defines behavior when width is decreased, or remaining space Given 0 , element will not shrink below predefined width Define if an element is allowed to shrink, and how much more one element is allowed to shrink when compared with another","title":"Applying flex-shrink"},{"location":"css/#comparing-flex-basis-vs-width-and-height","text":"flex-basis defines size of an element depending on main axis auto will fallback to a width/height given depending on flex direction Can use percentage values Always refers to main axis Can only be applied to flex items Shorthand for flex-grow, flex-grow, flex-shrink flex: 0 1 auto;","title":"Comparing flex-basis vs width and height"},{"location":"css/#14-using-the-css-grid","text":"","title":"14. Using the CSS Grid"},{"location":"css/#what-is-the-css-grid","text":"Not supported by older browsers","title":"What is the CSS Grid"},{"location":"css/#turning-a-container-into-a-grid","text":".container { margin: 20px; display: grid; }","title":"Turning a Container into a Grid"},{"location":"css/#defining-columns-and-rows","text":"On .container grid-template-columns: 200px 150px 20% 1fr; Defines 4 columns grid-template-rows: 5rem 2.5rem; Defines 2 rows","title":"Defining Columns and Rows"},{"location":"css/#positioning-child-elements-in-a-grid","text":"On inner element: For columns grid-column-start: 3; grid-column-end: 5; For rows grid-row-start: 1; grid-row-end: 3;","title":"Positioning Child Elements in a Grid"},{"location":"css/#using-element-sizing-repeat-and-minmax","text":"Use auto to size element only as big as it needs to be, or as much as content r Filly empty spaceequires If no height defined Equally sized columns Using repeat function 25% 25% 25% 25%; --> repeat(4, 25%); Certain minimum and maximum height Using minmax grid-template-rows: 5rem minmax(10px, 200px);","title":"Using element-sizing, repeat and minmax"},{"location":"css/#advanced-element-positioning","text":"Can use span to occupy certain number of cells grid-column-end: span 3; Also can use negative values for positioning grid-column-start: 1; grid-column-end: -1; One column from the right, the end. In other words, should take an entire row. Can force an overlap. Grid will always try to avoid overlap, but can explicitly force it Can use z-index here to define overlap","title":"Advanced Element Positioning"},{"location":"css/#working-with-named-lines","text":".container { /* ... */ grid-template-rows: [row-1-start] 5rem [row-1-end row-2-start] minmax(10px, 200px) [row-2-end row-3-start] 100px [row-3-end]; } /* ... */ .el3 { /* ... */ grid-row-start: row-1-start; grid-row-end: row-2-end; }","title":"Working with Named Lines"},{"location":"css/#understanding-column-and-row-shorthands","text":"Summarize column or row start/end grid-column: 1 / -1; grid-row: row-2-start / span 1; Or both: .el3 { /* ... */ /* grid-column-start: 2; grid-column-end: span 3; grid-row-start: row-1-start; grid-row-end: row-2-end; */ grid-area: row-1-start / 2 / row-2-end / span 3; }","title":"Understanding Column and Row Shorthands"},{"location":"css/#working-with-gaps","text":"Define a gap grid-column-gap: 20px; grid-row-gap: 10px; Or same with shorthand: grid-gap: 10px 20px; Obsolete according to editor?","title":"Working with Gaps"},{"location":"css/#adding-named-template-areas","text":"Can divide grid into areas which you assign names to Reference the area: grid-area: header; Define the grid names: .container { /* ... */ grid-template-areas: 'header header header header' 'side side main main' 'footer footer footer footer'; }","title":"Adding Named Template Areas"},{"location":"css/#15-transforming-elements-with-css-transforms","text":"","title":"15. Transforming Elements with CSS Transforms"},{"location":"css/#16-transistions-and-animations-in-css","text":"","title":"16. Transistions and Animations in CSS"},{"location":"css/#17-writing-future-proof-css-code","text":"","title":"17. Writing Future-Proof CSS Code"},{"location":"css/#18-introducing-sass","text":"","title":"18. Introducing Sass"},{"location":"css/#19-course-roundup","text":"","title":"19. Course Roundup"},{"location":"gcloud/","text":"Google Cloud Notes Based on Udemy Course Google Certified Associate Cloud Engineer Collection 1. Course Info Course Introduction Getting certified on Cloud Platforms opens doors. In demand Contains what students need to pass exams and start utilizing the cloud in the real world. Kubernetes essential part of Google Cloud Deep Dive course available This course is a combination of: Google Certified Associate Cloud Engineer Introduction to Google Cloud Platform Kubernetes Deep Dive Making Comparisons AWS seems to make new services for anything requested Google ACE is more broad, although similar. Focus on data flows here. ACE has more focus on running systems and command line access. PSA has more focus on business analysis and trade-offs Overall need to understand how things work at a fairly deep level and need to have built things hands on. Challenge labs to test your skills on your own. By end of course will have learned: Kubernetes How Google Cloud is set up and it's main services. How to use it through web console and command line. Course Outline & Student Background Aim to answer How do I properly set up my Google Cloud Platform (GCP) account and projects? How do I set up and use the various GCP services? How can I build a GCP system I have designed? How can I get certified as a GCP Associate Cloud Engineer? Course Structure Certification/GCP Overview GCP Account Setup (Hands-On) GCP Services (Hands-On) Breadth & Exam Prep Prerequisities Certification Exam has no prerequisite Credit card for GCP account (will not be charged if stay in trial) Computer to connect to GCP and VMs MacOS, Windows, Linux, Chromebook, etc. are all fine. Mobile phone will not work. Considerations Similar certification system to AWS Learn about mental models Learn how to learn more effectively No AWS experience required. Not for GCP Not for course Not for exam 2. Certification Intro Exam Guide (Blueprint) Google's statement of what's most important To a person wanting to pass the exam To a person working in the field as a Cloud Engineer Defines scope Of role Of exam Of course From Google : An Associate Cloud Engineer deploys applications, monitors operations of multiple projects, and maintains enterprise solutions to ensure that they meet target performance metrics. This individual has experience working with public clouds and on-premises solutions. They are able to use Google Cloud Console and the command-line interface to perform common platform-based tasks to maintain one or more deployed solutions that leverage Google-managed or self-managed services on Google Cloud. Exam Sections (or \"Domains\") Setting up a cloud solution environment Setting up cloud projects and accounts Managing billing configuration Installing and configuring the command line interface (CLI) Planning and configuring a cloud solution Planning and estimating GCP product using the Pricing Calculator Planning and configuring compute resources Planning and configuring data storage options Planning and configuring network resource Deploying and implementing a cloud solution Deploying and implementing Compute Engine resources Deploying and implementing Kubernetes Engine resources Deploying and implementing App Enging and Cloud Functions resources Deploying and implementing data solutions Deploying and implementing networking resources. Ensuring successful operation of a cloud solution Managing Compute Engine resources Managing Kubernetes Engine resources Managing App Enging and Cloud Functions resources Managing data solutions Managing networking resources. Monitoring and logging Configuring access and security Managing Identity and Access Management (IAM) Managing service accounts Viewing audit logs for project and managed services 3. Intro to Google Cloud Platform (GCP) GCP Context AWS is the far-and-away market leader What's the right cloud for you? Might use multiple Google is all about Big Data; huge scale Google's Tools \"Google is such a developer-focused cloud\" History of GCP Built by Googlers for Google Not original for Enterprise Purchased some services Leaks in abstractions more evident Catch-up to AWS Some functionality missing Avoided some mistakes More willing to be \"a cloud\" that you use, not just \"the cloud\" that you use. GCP Design and Structure Global Secure Huge Scale Developers Physical Infastructure vCPU Physical server Rack Data center (building) Zone Region Multi-Region Private global network Network Ingress and Egress Normal network: Routes via Internet to edge location closest to destination Google: Routes so traffic enters from Internet at edge closest to source Enables very interesting scenarios Single global IP address can load balance worldwide Sidesteps many DNS issues Can now opt for \"normal\" network routing to reduce price (and functionality) Pricing Provisioned \"Make sure you're ready to handle X\" Usage \"Handle whatever I use and carge me for that\" Network traffic Free on the way in (ingress) Charged on the way out (egress), by GBs used Egress to GCP services sometimes free Depends on the destination service Depends on the location of that service Security Separation of duties and physical security Absolutely everything always encrypted at rest Strong key and identity management Network encryption All control info encrypted All WAN traffic to be encrypted automatically Moving towards encrypting all local traffic within data centers Distrust the network, anyway BeyondCorp Google Security Design Scale and Automation Scale must be unbounded Devs don't want to answer pages Resource Quotas (Soft Limits) Scope Regional Global Changes Automatic By request Response in 24-48h May be refused Queryable gcloud compute project-info describe --project myprojectid Organizations Projects are similar to AWS accounts Projects own resources Resources can be shared with other projects Projects can be grouped and controlled in a hierarchy 4. Intro to GCP Products/Services How to Cheat Products/Services as Building Blocks Categories Data flow Compute, Storage, Networking centrally important Cloud Deployment Manager All pieces needed included in template Can customize GCP Marketplace aka Cloud Launcher A partner and open-source marketplace Buying completed things Key Building Blocks Compute Engine Most relatable Google cloud product Like computers from the store Spin up and use, as much as needed Build almost anything with it By the second Cloud function Key building block of serverless systems By the 10th of a second Many event types Cloud storage Serverless product Most pure product Storage and Serving Nearline & Coldline are variants of cloud storage Persistent Disk Block storage, similar to harddrive Only goes with compute engine. Cloud Filestore Neither object based nor block based File based Kubernetes Engine Alleviate management burden with Compute Engine Load Balancers Cloud TPU Specialized hardware for machine learning TensorFlow processing Many ML products AutoML, etc Data and Analytics Products Networking Virutal private cloud Dedicated Interconnect Cloud NAT Cloud load balancing Cloud DNS etc Management Tools Stackdriver Identity and Security Products Cloud Identity Cloud IAM 6. Account Setup Free-Tier GCP Accounts Google Cloud Platform Free Tier Billing account that does not get charged Must be manually upgraded to a paying account Still requires credit card, for verification $300 USD credit that can last 12 months \"When your trial ends, your account will be paused and you'll have the option to upgrade to a paid account.\" Business Accounts not eligible for free trial Free Trial Restrictions No more than 8 vCPUs (total simultaneous) No GPUs (video card chips) No TPUs (custom chips for TensorFlow) No Quota increases No cryptomining allowed No SLAs No premium OS licenses (e.g. Windows) No Cloud Launcher products with extra usage fees Always Free \"Always Free usage does not count against your free trial credits\" Last beyond end of free trial Full details at Free Tier Limits Compute Highlights 24h/day of f1-micro runtime, in most US regions, only 28h/day of App Engine runtime, in North America 2M/month of Cloud Functions invocations (with runtime/size limits) Storage Highlights Storage averaged over the month 5 GB of Regional Cloud Storage, including some operations 1 GB of Cloud Datastore storage, including some operations 10 GB of BigQuery storage, with 1 TB/month of query processing 30 GB HDD Storage on GCE and AE 5 GB snapshot storage on GCE and AE 5 GB of StackDriver logs with 7 day retention Networking Highlights Egress to China and Australia not free! 1 GB/month of App Engine data egress 1 GB/month of Compute Engine data egress 5 GB/month of egress by Cloud Function invocations 5 GB/month of egress from Cloud Storage based in North America 10 GB/month of Cloud PubSub messages Other highlights 120 build-minutes/day of Google Cloud Container Builder 60 minutes/month of Google Cloud Speech API recognition from audio/video 1000 units/month of Cloud Vision API calls 5000 units/month of Google Cloud Natural Language API Google Cloud Shell with 5 GB of persistent disk storage quota 1 GB of Google Cloud Source Repositories private hosting Create Free-Tier GCP Account Create Free Trial GCP account New GMail account for Billing Principle of least privilege Signup Explore GCP Console The Google Cloud Platform Console Google Cloud Status Dashboard Fully customizable dashboard Activity tab Google Cloud Shell Do NOT click activate full account Set Up Billing Export Export Cloud Billing Data to BigQuery Setting up Billing Export Navigate to Console > Billing > Billing Export Need a BigQuery Dataset Could do from here, but then it will live inside that particular project, which isn't where we want it. Don't want all stuff mashed together. Use projects to manage groups of resources Create new project Quotas Projects aren't an infinite resource Create a new project here, unique ID across all projects Create new Dataset in BigQuery under new project Set up a label Set up BigQuery export Admin project billing_export dataset Recap Export must be set up per billing account Resources should be placed into appropriate projects Resources should be tagged with labels Billing export is not real-time Delay is hours Set up Billing Alert Can setup a \"budget\" with alerts Billing > Budget & alerts > Create Budget Trigger alerts for $1, include credits Set Up (Non-Admin) User Access Limit risk by restricting user account, as opposed to constantly using admin account Key in this case is user account will not be able to upgrade the billing account to become a paying one. Production setup may have even more restrictive roles Billing IAM Role: Billing Account User Purpose: Link projects to billing accounts Level: Organization or billing account Use Case: This role has very restricted permissions, so you can grant it broadly, typically in combination with Project Creator. These two roles allow a user to create new projects linked to the billing account on which the role is granted. Add Billing Account User (different than admin account) Login and access Billing with newly granted User account Permissions limited here due to role User has access to that User Project created Admin account does not have access to newly created User Project Overview of Billing Access Owning a project and being able to control its resources is completely separate from being able to control the Billing Account attached to that project. 7. Cloud Shell and Data Flows Explore Cloud Shell and Editor Cloud Shell Docs Course Resources on Github Shell Highlights Web browser access No need for local terminal Chromebook (+) No PuTTY! Automatic SSH key management 5 GB of persistent storage Easy-access to preinstalled tools gcloud, bq, kubectl, docker, npm/node, pip/python, ruby, vim, emacs, bash, etc. Lab walkthrough Log into GCP account with non-admin account Make sure 2FA is enabled and you are prompted for it. Enable Cloud Shell Switch projects: gcloud config set project [PROJECT_ID] Download file: dl README-cloudshell.txt node hello.js with git repo for cloud test Can view with Web Preview Can view and edit files in cloud editor nodemon preinstalled here diff hello.js html-hello.js Can change preview port Data Flows Data Flows are Everything (in IT) Core Concepts with regard to DATA Moving - Network, etc Processing - Compute, etc Remembering - Storage, etc Cloud Shell Lab Data Flow Your Machine Web Browser GCP Console Google Cloud Control Plane Opening up Cloud Shell Find persistent storage available Find machine to host our cloud shell instance Container Secure Shell Server Connection to this secure shell from browser Connect to git, download files, stored in persistent storage. Running Node Server Google cloud sets up proxy Opening up Editor Make changes to files in persistent storage Node process has to be reset to show any changes. Reload browser Loading alternative node process with different port also requires us to change proxy port to match. Key Takeaways Data flows are the foundation of every system Moving, Processing, Remembering Not just Network, Compute, Storage Build mental models Helps you make predictions Identify and think through data flows Higlights potential issues Requirements and options not always clear Especially in the real world. Critical skills for both real world and exam questions Update Course Lab Files What's the plan? Configure git Stash changes Retrieve Updates Starting off Log into GCP console with user account Open Cloud Shell (Doesn't matter which project you use) chmod +x update.sh ./update.sh Milestone: Open World Projects Two quotas to be aware of: Each user account has a qutoa on how many projects you can own Trial billing account has a separate quota for how many projects can be linked to it Google automatically creates a project for you admin account and links it to your trial billing account 8. Basic Services GCS: Google Cloud Storage Making Data Public Log into GCP Console with user account From now on, just assume this Only use admin account when we need it Create a new project Generally, new thing , new project Also link to billing Navigate to Storage in navigation list Can pin to top Create a Bucket Set up region/multi-region, labels, keys Edit permissions to set up public access to file. User - \"allUsers\" - Reader Objects not files Command line alternative methods for actions Example rename an object: gsutil mv -p gs://storage-lab-console-panda/README-cloudshell.txt gs://storage-lab-console-panda/README-cloudshell.txt Cannot change location or location-type after bucket creation Can edit bucket permissions Add allUsers as Storage Object Viewer to essentially create a public bucket , which, for security reasons, is not advised GCS via gsutil in Command Line gcloud config list Using gsutil Buckets start with gs:// gsutil ls gs://storage-lab-console-panda/ Add ** for all Can use --help gsutil mb (mb = make bucket) Ex: gsutil -l NORTHAMERICA-NORTHEAST1 gs://storage-lab-cli-panda gsutil label get gs://storage-lab-console-panda Returns JSON listing labels gsutil label set gs://storage-lab-cli-panda gsutil label ch -l \"extralabel:extravalue\" gs://storage-lab-cli-panda gsutil versioning get gs://storage-lab-cli-panda gsutil versioning set on gs://storage-lab-cli-panda gsutil cp README.txt gs://storage-lab-cli-panda gsutil cp -a README.txt gs://storage-lab-cli-panda Getting version Between buckets: gsutil cp gs://storage-lab-console-panda/** gs://storage-lab-cli-panda/ Can't see or utilize versioning in web UI gsutil acl ch -u AllUsers:R gs://storage-lab-cli-panda/Selfie.jpg Lab Script Commands Bucket Locations Starting Our First GCE VM: Google Compute Engine Setup Find which project is selected: gcloud config get-value project Check if any Compute Engines already running: gcloud compute instances list List Services: gcloud services list Can add --help or -h , like most commands List of APIs that are enabled for this specific project gcloud services list --enabled - Default gcloud services list --available - All Filter down with grep: gcloud services list --available | grep compute Result = compute.googleapis.com Compute Engine API gcloud services -h gcloud compute instances list URL given after sending N: API & Services Google API section of console Navigate to IAM & admin section See members and roles here Service Accounts Section Currently empty Navigate to Compute Engine section Simply going here will enable it After, running gcloud compute instances list will now show Listed 0 items compute.googleapis.com (Compute Engine API) & oslogin.googleapis.com (Cloud OS Login API) is now in services list Permissions also added automatically in IAM Service account also created automatically To create our very first virtual machine: gcloud compute instances create myvm gcloud compute instances delete myvm Lab Script Commands Rundown on gcloud The gcloud command Overview Overview Doc for gcloud Command-line tool to interact with GCP Best friends with gsutil and bq All share same configuration set via gcloud config gsutil could have been gcloud storage bq could have been gcloud bigquery In general: more powerful than console but less powerful than REST API Functionality in command-line tools not yet fully released, can use beta to use: gcloud beta billing accounts list Syntax: Syntax of gcloud gcloud <global flags> <service/product> <group/area> <command> <flags> <parameters> Always drills down (from left to right) Examples: gcloud --project myprojid compute instances list OR gcloud --project=myprojid myprojid compute instances list In our example, relied on project given in config. We used: gcloud compute instances create myvm (no project name given) Not all commands have parameters: gcloud services list --available gsutil ls - Implies working against google cloud storage service and the command is to list Command to make bucket: gsutil mb -l northamerica-northeast1 gs://storage-lab-cli-panda Global flags --help -h --project <ProjectID> --acount <Account> --filter Not always available, but often better than using grep --format Can choose JSON, YAML, CSV, etc. Can pipe ( | ) JSON to jq command for further processing --quiet (or -q ) Won't prompt you to confirm about destructive actions Config Properties Properties in gcloud Values entered once and used by any command that needs them Can be overridden on a specific command with corresponding flag Used very often for account, project, region, and zone Set core/account or account to replace --account Set core/project or project to replace --project Set compute/region to replace --region Set compute/zone to replace --zone Set with gcloud config set <property> <value> Check with gcloud config get-value <property> Clear with gcloud config unset <property> Configurations Configuration in gcloud Can maintain groups of settings and switch between them Most useful when using multiple projects Interactive workflow to set common properties in a config with gcloud init List all properties in a configuration with gcloud config list List all configurations with gcloud config configurations list IS_ACTIVE column shows which one is currently being used Other columns list account, project, region, zone, and the name of the config Make new config with gcloud config configurations create ITS_NAME Start using config with gcloud config configurations activate ITS_NAME Or use for just one command with --configuration=ITS_NAME Configurations Analogy Action Directory Configuration Make New mkdir newdir gcloud config configurations create newconfig Switch To cd newdir gcloud config configurations activate newconfig List Contents ls gcloud config list List Non-Active ls ~/newdir gcloud --configuration=newconfig config list OR gcloud config configurations describe newconfig GCE In and Out How you can connect into and out of a Google Compute Engine instance Labs Commands List Good first step to check and set project we're in Set: gcloud config set project [PROJECT_ID] Check: gcloud config list Check for hidden ssh folder in home directory pwd ls ls -a .ssh Quick look at the Cloud Shell machine itself whoami hostname curl api.ipify.org Check that nothing is running gcloud compute instances list Don't create default VM: gcloud compute instances create myhappyvm Enter no, cancel Look at how to set the machine type gcloud compute instances create myhappyvm -h gcloud compute instances create myhappyvm --help gcloud compute machine-types list Filter: gcloud topic filters gcloud compute machine-types list --filter=\"NAME:f1-micro\" gcloud compute machine-types list --filter=\"NAME:f1-micro AND ZONE~us-west\" Filters in gcloud Set default zone & region: gcloud config set compute/zone us-west2-b gcloud config set compute/region us-west2 Creating the instance: gcloud compute instances create --machine-type=f1-micro myhappyvm Ping the VM: By name: ping -c 3 myhappyvm Doesn't recognize \"myhappyvm\" By internal IP ping -c 3 10.168.0.2 Also doesn't work. By external IP ping -c 3 34.94.94.230 Pinging external IP works here Connect with SSH: ssh 34.94.94.230 Permission denied Use gcloud compute ssh myhappyvm Will prompt to set up SSH key if not setup already Now connected to VM whoami Same result hostname Different hostname SSH folder in cloudshell now has keys for compute VM SSH folder in VM now has key as well Instance Metadata Reference Metadata logged when gcloud compute ssh was first running Attempt to curl the metadata: curl metadata.google.internal./computeMetadata/v1/ Missing Metadata-Flavor:Google header curl -H \"Metadata-Flavor:Google\" metadata.google.internal./computeMetadata/v1/ curl -H \"Metadata-Flavor:Google\" metadata.google.internal./computeMetadata/v1/projects/ A look at project-id we see the id of our current project In attributes we see ssh keys Includes the public key Can get instance/name and other useful information here Including service-accounts/default/ Has aliases, email, identity, scopes, and token Token to sign API requests Also using service account auto created when we enabled compute engine API gcloud automatically has a way to connect out from this instance to the rest of the google cloud platform Also connected to our project Can see buckets we created from this VM Attempt delete VM: gcloud compute instances delete myhappyvm From within VM: Permission failed From cloudshell: Successful Check if deleted: gcloud compute instances list Listed 0 items expected GCE via Console Creating Instances Navigate to Compute Engine Service Settings Can set default region/zone here Console and command-line config informaton & settings are separate Metadata SSH keys Key from previous is registered. VM instances Create Custom machine config, etc Can scope to service account or none In addition to access scopes Once created, can edit some parts of the VM Cannot change the name By default does not preserve instances on deletion Can use \"Create Similar\" as shortcut to create similarly configured VM Preemptible Instances Can make preemtiple from management setting Setting on will also switch off automatic restart and will terminate on host maintainence Making preemtible will make Google do what it can to keep running Will shut down after 24 hours Startup Scripts Automation Startup script runs automatically when instance starts Whether first time or on a reboot Gets passed to instance as metadata The machines are designed to run script on boot Variety of uses Security tab Can override project level settings about SSH keys and block them from being used and add custom ones just for this instance Disks Default behavior is to delete boot disk when instance is deleted Can add a new one or attach an existing persistent disk Encryption options Google-managed easy preferred route Can connect via SSH with button in UI via VM instances Can delete from within the VM here since we changed scopes to allow access to Google compute engine through that service account In all activity, most logged activities happening as user account Other most recent two come from the service account that was used by the compute engine instance In metadata>SSH keys, two new keys were added as a part of the connection from the console to the instance Temporary keys Service Accounts and Scopes 9. Basic Services Challenge Lab GCE-GCS Challenge Lab GCE-GCS Challenge Lab Startup Desired Result (Requirements) Brand new project GCE instance that runs provided script System logs available in Stackdriver Logs New GCS bucket for resulting log files Log file appears in new bucket after instance finishes starting up No need to SSH to instance Tips No need to SSH But you can do so for debugging, if you want Final instance should not need any manual control via SSH You should not need to change the startup script But you must read it for key info to complete the lab Use the \"Create Similar\" button to try again Clean up after yourself Delete or Stop instances Advanced Challenge: No Console Repeat the whole lab from scratch using only the CLI in Cloud Shell Complete this Challenge Lab through the console UI, first Tip: You can use info from the UI-based project to craft your command lines Can you script everything? Even creating the new project? GCE-GCS Challenge Lab Data Flow Service Accounts (incl. scope) GCE Instance Statuses Long-polling for Metadata Changes Hypervisor-Visible Metrics Agent-visible Metrics Installing Stackdriver Agent Lost of Logs Sent by Agent (by Default) Our Actions Retrieve and review startup script Make new project Make logs destination bucket Enable GCE API Create new GCE instance Enable scope to write to GCS Set labels (optional) Set startup script Set metadta to point to logs destination bucket Monitor progress Check Stackdriver Logs Check CPU graph Check logs bucket Data Flow in Action GCE-GCS Challenge Lab Demo Demo walkthrough Create new project Also must link to billing Fetch provided bash script Create new Storage bucket Enable Compute Engine Set to run the bash script on startup Navigate to stackdriver logs for compute instance See file downloaded in bucket storage Basic Services Sample Practice Questions Breakdown Understand Eliminate Evaluate Choose Validate 10. Scaling Managed Instance Groups Lab Start-Up Script Challenge Lab GCE as active Project Compute Engine Create instance template Instance Templates Not required to set a zone Pick f1 micro machine Put in startup script Give metadata key name pair, with gs://PROJECT_ID/ as value Instance templates are immutable Can't be edited Can copy, however Create VM with template (x2) Create Instance Group Instance Groups Unmanaged Instance Group Groups instances, monitoring, etc Manual management Managed Instance Group Google will be creating and deleting instances on our behalf. Autoscaling Deleting a managed instance group will delete all of its instances because it owns them. Deleting an unmanaged instance group will just leave them all behind. Milestone: Robust Mental Model Resource Elasticity 11. Security What is Security? (Data Flow) Information Security CIA Triad: You cannot view data you shouldn't : Confidentiality You cannot change data you shouldn't : Integrity You can access data you should : Availability How do we control data flow? (AAA) Authentication - Who are you? Authorization - What are you allowed to you? Accounting - What did you do? Public Bucket Breach Key Security Mindset (Principles) Least privilege Defense in depth Fail securely Security by Design Principles Key Security Products/Features - AuthN Identity Humans in G Suite, Cloud Identity Applications and services use Service Accounts Identity hierarchy Google groups Can use Google Cloud Directory Sync (GCDS) to pull from LDAP (no push) OWASP Top 10 IAM Breakdown: Resource Hierarchy (To which thing?) IAM Overview Docs Resource Something you create in GCP Project IAM Resource Hierarchy Docs IAM Breakdown: Permissions and Roles (Can do what?) Service.Resource.Verb Examples: pubsub.subscriptions.consume pubsub.topics.publish Understanding Roles Understanding Custom Roles Roles A Role is a collection of Permissions to use or manage GCP Resources Primitive Roles - Project-level and often too broad Viewer is read-only Editor can view and change things Owner can also control access & billing Predefined Roles List Predefined Roles - Give granular access to specific GCP Resources E.g.: roles/bigquery.dataEditorm roles/pubsub.subscriber IAM Breakdown: Members and Groups (Who?) IAM Overview Docs w/ Members Members A Member is some Google-known identity Each Member is identified by a unique email address Can be: user : Specific Google account G Suite, Cloud Identity, Gmail, or validated email serviceAccount : Service Account for apps/services group : Google group of users and service accounts domain : Whole domain managed by G Suite or Cloud Identity allAuthenticatedUsers - Any Google account or service account allUsers - Anyone on the internet (public) Groups \"A Google group is a named collection of Google accounts and service accounts.\" \"Every group has a unique email that is associated with the group.\" You never act as the group. But membership in a group can grant capabilities to individuals. Use them for everything! Can be used for owner when within an organization Can nest groups in an organization Example: One group for each department, all those in group for all staff. IAM Breakdown: Policies (Bindings) IAM Overview Docs w/ Policies Policies A policy binds Members to Roles for some scope of Resources Answers: Who can do what to which things? Attached to some level in the Resource Hierarchy Organization, Folder, Project, Resource Roles and Members listed in policy, but Resources identified by attachment Always additive (\"Allow\") and never subtractive (no \"Deny\") \"Child policies cannot restrict access granted at a higher level.\" Granting, Changing, Revoking Access One policy per resource Max 1500 member bindings per policy Ridiculously High Max Anywhere close and \"You're doing it wrong!\" Use groups instead! Docs for gcloud add iam policy IAM Wrap-up Using IAM Securely FAQ Billing Access Control Billing Accounts Represents some way to pay for GCP Service Usage Type of Resource that lives outside of Projects Can belong to an Organization (i.e. be owned by it) Inherits Org-level IAM policies Can be linked to projects But does not own them No impact on project IAM Billing IAM Roles Overview of Billing Access Control Role Purpose Scope Billing Account Creator Create new self-serve billing accounts. Org Billing Account Administrator Manage billing accounts (but not create them). Billing Account Billing Account User Link projects to billing accounts. Billing Account Billing Account Viewer View Billing accoun tcost information and transactions Billing Account Project Billing Manager Link/unlink the project to/from a billing account. Project Monthly Invoiced Billing Invoiced Billing Get billed monthly and pay by invoice due date. Can pay via check or wire transfer Can increase project and quota limits Billing administrator of org's current billing account contacts Cloud Billing Support To determine eligibility To apply to switch to monthly invoicing Eligibility depends on Account age Typical monthly spend Country SMB Centralized Scenario: Small-to-medium enterprise: User type Billing activities Billing Cloud IAM roles CEO Manage payment instrument; View and approve invoices. Billing Account Administrator CTO Set budget alerts; View Spend; Create new billable projects Billing Account Administrator;Project Creator. Development teams None None SMB Delegated Scenario: Small-to-medium enterprise with preference for delegated authority User type Billing activities Billing Cloud IAM roles CEO Manage payment instrument; Delegate authority Billing Account Administrator CFO Set budget alerts; View spend Billing Account Administrator Accounts Payable View and approve invoices Billing Account Viewer Development teams Create new billable projects Billing Account User; Project Creator 12. Networking Routing Overview OSI Model of Networking Routing - Wikipedia Routing Focus on About Software -Defined Networking (SDN) More-general than the OSI 7-layer model of networking Not about any particular routing scheme Only setting the stage for routing tables / routes What is it? Routing is about deciding where data should go next Like a direction marker on a hiking trail Fork in the trail At the peak Many local decisions - No full map or path Where does it happen? On the way to Google's network On the way to the right resource On the way from one resource to another There and back again Routing: To Google's Network Getting data to Google's network Premium Routing Tier Blog Post Hot-Potato and Cold-Potato Routing Routing: To the Right Resource (Load Balancing) Load Balancing in GCP Getting Data to the right resource Latency reduction Uses servers physically close to clients Cross-Region Load Balancing (with Global Anycast IPs) Load balancing Separate from auto-scaling Cloud Load Balancer (all types; internal and external) System design Different servers may handle different parts of the system Especiailly when using microservices (instead of a monolith) HTTP(S) Load Balancer (with URL Map) Unicast vs Anycast Unicast There is only one unique device in the world than can handle this; send it there. Anycast There are multiple devices that could handle this; send it to any one- but ideally the closest. Layer 4 vs. Layer 7 TCP (of TCP/IP) is usually called Layer 4 (L4) It works solely with IP addresses HTTP and HTTPS work at Layer 7 (L7) These know about URLs and paths Each layer is built on the one below it Therefore: To route based on URL paths, routing needs to understand L7 L4 cannot route based on the URL paths defined in L7 What about DNS? Name resolution (via the Domain Name System) can be the first step in routing. But that comes with a number of problems: Layer 4 - Cannot route L4 based on L7's URL paths Chunky - DNS queries often cached and reused for huge client sets Sticky - DNS lookup \"locks on\" and refreshing per request has a high cost. Extra latency because each request includes another round-trip More money for additional DNS request processing Not Robust - Relies on the client always doing the right thing. Spoiler: They don't Routing: Among Resources (VPC) Getting data from one resource to another VPC ( global ) is Virtual Private Cloud - Your private SDN space in GCP Not just resource-to-resource - Also manages the doors to outside & peers. Subnets ( regional ) create logical spaces to contain resources All Subnets can reach all others - globally, without any need fro VPNs. Routes ( global ) define \"next hop\" for traffic based on destination IP Routes are global and apply by Instance-level Tags, not by Subnet No route to the internet gateway means no such data can flow Firewall Rules ( global ) further filter data flow that would otherwise route All Firewall Rules are global and apply by Instance-level Tags or Service Acct. Default Firewall Rules are restrictive inbound and permissive outbound Classless Inter-Domain Routing IPs and CIDRs IP address is abc.def.ghi.jkl (dotted quad) where each piece is 0-255 CIDR block is group of IP addresses specified in <IP>/xy notation Turn IP address into 32-bit binary number e.q. 10.10.0.254 -> 00001010 00001010 00000000 11111110 /xy in CIDR notation locks highest (leftmost) bits in IP address (0-32) abc.def.ghi.jkl/32 is single IP address because all 32 bits are locked abc.def.ghi.jkl/24 is 256 IP address because last 8 bits ( jkl ) can vary 0.0.0.0/0 means \"any IP address\" because no bits are locked RFC1918 defines private (i.e. non-Internet) address ranges you can use: 10.0.0.0/8 , 172.16.0.0/12 , and 192.168.0.0/16 RFC1918 Private Networks Creating Auto-Mode VPCs (Lab) VPC Subnet Creation Mode VPC Networks > Create VPC Network Set Subnet Creation Mode to Automatic Enable default firewall rules (all available) Create Custom-Mode VPCs (Lab) Creating the VPC VPC Overview Docs Create custom VPC Creating the Custom IAM Role & Service Account Understanding IAM Custom Roles Creating and Managing Custom Roles Service Accounts Overview Creating and enabling service accounts for instances Create custom IAM Role with monitoring and logging roles Delete default service account & create new with new custom IAM role Using the VPC and Configuring Firewall Rules Firewall Rules Overview Configuring Network Tags Filtering by Service Accounts vs Network tag Updated Managed Instance Groups Having trouble editing the instance in Group Compute Engine > Instance Template frontend-it Set to f1-micro machine type Set service account to frontend-sa from earlier Set Networking in advanced settings Network: app-vpc Subnet: oregon-subnet Compute Engine > Instance Template frontend-ig Min 2, Max 3 Attempt to ping, can't VPC Network app-vpc > Firewall Rules Add firewall rule Direction: Ingress Action on match: Allow Target > frontend-sa (service account) 13. GKE Introduction: Google Kubernetes Engine What a cluster is How to manage Kubernetes Deep Dive Intro Kubernetes On prem AND on cloud Great cloud on/off ramp 14. Kubernetes Course Introduction What You Need A Kubernetes cluster Several Options: Minikube Docker for Desktop AKS (hosted) EKS (hosted) GKE (hosted) Kops Kubeadm (on-premises) Play with Kubernetes (PWK) Schedule Kubernetes Big Picture Kubernetes App Architecture Kubernetes Networking Kubernetes Storage From Code to Kubernetes Kubernetes Deployments Scaling Kubernetes Apps RBAC and Admission Control Other Kubernetes Stuff What Next 15. Kubernetes Big Picture Kubernetes Primer Open source platform for running cloud native apps Infastructure (on-premises/cloud) Kubernetes on top of it to run your apps on Layer that sits about the VMs and provides a rich API and extensive set of primitives for running cloud native apps. Cloud-native app? Built from lots of small interacting services that come together This makes them easy to scale Kubernetes is platform of choice for running these Kubernetes cluster made up of a bunch of Linux nodes (vm or cloud instances) Some form the control plane Brain of the cluster Others are worker nodes Where the apps run Persistent Store - etcd Only stateful bit Protip Business critical, big cluster: etcd, potentially biggest issue Distributed databases not scaling very well API Server is gateway into the cluster Control plane -> Nodes Lots of Security around it Kubernetes API Where everything in Kubernetes is defined RESTful API that uses standard HTTP methods/verbs to perform CRUD style operations Create Read Update Delete Interaction with API done through the kubectl command line utility. Define different parts of app in yaml files and use kubectl to POST to them to API server Assuming authenticated, will create record of intent on the cluster in the store. Record of intent changes the overall desired state of cluster Causes other parts of control plane to kick into action Declarative Configuration Watch loops and controllers kick in to match current state to desired state API broken apart into groups core\"\" {API} apps {API} authorization {API} storage {API} Looked after by Special Interest Group (SIG) People responsible for feature development Alpha -> Beta -> GA Kubernetes Objects Containers Poster child for cloud native Kubernetes runs containers not directly, but wrapped in high-level construct called a pod . Atomic unit for virtualization environment is the VM Atomic unit for Kubernetes is the pod pod Contains one or more containers Atomic unit of scheduling Object on the cluster Defined in the v1 API group Wrap pod in high-level object called a deployment deployments Object on the cluster Defined in the apps/v1 API group Scaling Rolling updates pod Wrap one or more containers deploy Scalability and application releases Other objects exist for wrapping pods daemon sets One and only one of a specific pod will run on every worker in cluster. stateful sets Pods with stateful requriements Tons more! Spin Up a Quick Cluster Play with Kubernetes Initialize cluster master node: kubeadm init --apiserver-advertise-address $(hostname -i) Initialize cluster networking: kubectl apply -n kube-system -f \\ \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\n')\" 16. Kubernetes Application Architecture Kubernetes App Theory Requirements Persistent back-end Storage External-facing web service External load-balancer Secrets/Passwords Backups Scaling Build out front end web service code & backend database as a Docker image. SVC service for external load-balancer Wrap your web containers in a Kubernetes construct called a deployment. Same with backend Wrap in pods, then a deployment Secrets service Persistent volume Persistent volume claim Scalable micro-services Resources and services in the API Sample Kubernetes App .yaml files Used as declarative config files Front-end 3 Kubernetes objects defined A Service object for load balancer Deployment object Persistant storage Each object has apiVersion and kind properties Back-end Service Not a load-balancer one here For internal cluster traffic Deployment Running mysql pods Recap Apps Ideas Requirements Coding Then to Docker images Then Kubernetes stuff 17. Kubernetes Networking Common Networking Requirements All the Sevices have separate endpoints, and different IPs Dynamic DNS Highly dynamic networks are the new normal Sample App Requirements WordPress front-end MySQL back-end Can reach with name in metadata, i.e. wordpress Deployment Container port Deploy bunch of pods hosting containers running WordPress on port 80 Front it with a service Cloud native load balancer that gives way into application from the internet. .yaml config files also work double as documentation Kubernetes Networking Basics Rules All Nodes can talk All Pods can talk (not NAT) Every Pod gets its own IP Node network 443 (HTTPS) Pod networking Pod Network CNI plugin (Container Network Interface) Big flat network Service Basics If demand ramps, and you scale a service, you're adding new pods with a new IP. If demand drops, you're taking the nodes away. Similar with failed nodes Service is a stable abstraction point for pods Hit Service instead of pod directly. Every Service gets a name and an IP Are stable Gets registered with the clusters built in or added on DNS Every Kubernetes cluster has a native DNS service Every pod in cluster knows how to use it Think of Services as load-balancers or proxies. Front-end config and also a backend one Back-end needs to know which pods to send the traffic Done with label selector How does Service know which pods are going? When you create a Service object with a label selection, Kubernetes also creates another object on the cluster called an End Point Object End Point Object has list of pod IPs and ports matcing Service label selector. List is automatically updated Service Types Different types of Services that behave differently All provide stable networking abstraction point for a bunch of pods Main ones are: ClusterIP (default) Gets own IP Only accessible from within cluster NodePort Gets cluster-wide port (default: 30000-32767) Also accessible from outside cluster LoadBalancer Integrates with public cloud platform To provision on a cloud platform, that platform has to support load balancer creation in config via a public API as well as Kubernetes knowing and supporting it. Service Network Service is not on any network we recognize Not on node or pod networks On a 3rd network known as Service Network Not a real network Every node on the network has a process running called kube-proxy Writes a bunch of IPVS/IPTABLES rules on each node Any requests to service network, rewrite headers and send to appropriate pods on pod network. Since Kubernetes 1.2, running kube-proxy in IPTABLES mode has been the default. Good until proper scale Not designed for load balancing Kube-proxy IPVS Mode Stable (GA) since Kubernetes 1.11 Uses Linux kernel IP Virtual Server Native Layer-4 load balancer Supports more algorithms Demo Not for production use Three nodes, each with its own range of IP that it can give pods, and three pods deployed as one per node, each with an IP from those ranges. 18. Kubernetes Storage Storage Master a few concepts, and Kubernetes storage is a breeze! High-level storage requirements Container Storage Interface (CSI) The Kubernetes PersistentVolume Subsystem StorageClasses Lab/demo Recap Big Picture High-level Storage Requirements Kubernetes Volumes All about decoupling storage from Pods Exist in their own right If pod wants to use one, it needs to lay a claim to it and mount it. If pod fails, volume still exists Can share volume with multiple pods Storage is vital! File & Block First-class Citizens in Kubernetes Standards-based Pluggable backend Rich API Fundamental Storage Requirements Storage Backend Speed Replicated Resiliency etc By provider Kubernetes just provides an interface for pods to consume it Storage -> CSI -> PV Subsystem PV Subsystem PersistentVolume (PV) Storage: 20GB PersistentVolumeClaim (PVC) Ticket to use PV StorageClass (SC) Makes it dynamic Container Storage Interface CSI Out-of-tree Open-standard CSI @ Github Not Kubernetes specific Preferred way to integrate third party storage systems with the PV subsystem PV and PVC The Kubernetes PersistentVolume Subsystem Storage -> CSI -> PV Subsystem PV Has attributes such as size Storage (GCE Persistent disk (Google)) To use a PV, need a PV Claim Created with yaml file spec properties match Can't have two different claims on a PV with different policies Access Modes: RWO: ReadWriteOnce RWM: ReadWriteMany ROM: ReadOnlyMany Not all volumes support all modes A PV can only have one active PVC/AccessMode Reclaim Policy Retain Delete Storage Classes Storage Classes enable Dynamic Provisioning of Volumes Create your PVCs which reference a storage class name, and then you reference those PVCs in pod specs Kubernetes admin concern with parameters Developer or app concern with name Control loop in PVC Subsystem checking API Server for new PVC objects, any time it sees one, actions it. 19. From Code to Kubernetes Big Picture (19) Kubernetes object that references the image & code Object options Can wrap in a pod Could wrap in a high level construct such as a deployment, daemon set, or stateful set 3 Stages Code Docker Build the code into an image Push image to registry Kubernetes Rolls image as Kubernetes deployment or other object Demo (19) Code on repo Dockerfile (list of instructions to build a docker image) Build image Push image Web deployment on k8s Apply service in front (web-nodeport) Load balancer (if on cloud provider) 20. Kubernetes Deployments Declaratively! Deployment Theory Can't do empty/naked containers Must use pods Then deployments Higher level than pods Replica set Sits between deployments and pod Replica set has scaling mechanics Deploy has scaling & updates Deployment takes care of running one type of pod Declarative way to manage deployments is to make every single change that we ever make in the yml file Manifest always in sync with cluster Rolling Updates, pod by pod, with second replica set Labels! Links everything together 21. Kubernetes Auto-scaling Apps Big Picture (21) Demand goes up, spin up more pods or maybe more nodes. Demand goes down, turn them off Elaboration Demand (or load) can be a lot of things CPU & memory obvious Can be messages in queue Or open connections Generally speaking, if demand goes up we add more pods, but if nodes in the cluster are full, you can't add more pods and need to add more nodes first. To automatically add more nodes we have the cluster auto-scaler To automatically add more pods we have the horizontal pod auto-scaler Load increases on app Add more pod replicas If clusters are full and there aren't any nodes with enough capacity to take new pods then those pods moves to pending. Cluster auto-scaler looks for pending pods, and adds more nodes. Brief note on Vertical Pod Autoscaler (VPA) Alpha product at time of this tutorial Getting pod scheduled with right amount of resources Horizontal Pod Autoscaler (HPA) Theory All about pods Scaling pods Pod metrics Etc Pod scaling out rather than up. Automatic after initial setup Define HPA like any other resource in the API Tell it which deployment to work on (One-to-One) Set target utilization By percentage Need to create pods with resource requests Can also set limits on scaling HPA tells Deployment and Deployment tells Replica set HPA only decides when scaling needs to happen Declaratively! Cluster Autoscaler Theory Tied to underlying cloud platform Build cluster with autoscaling enabled Configure pools of like-nodes Also tied to K8s service Only works if you configure pods with resource requests Looks at what has been collectively requested Cluster Autoscaler Works on requested values Horizontal Pod Autoscaler Works on actual values For autoscaling to work properly, need to set up and do everything else properly, especially resource requests Checks every 10 seconds Warnings Don't try to manually manage pods, node pools Check your cloud for support, they vary Test performance on big clusters 22. Kubernetes Security RBAC and Admission Control Focus on access to the API server and in particular the role based access control bits. Big Picture (22) API centric Means everything in the cluster revolves around the API server Lots of options to lock it down REST based CRUD style operations kubectl Nodes Scheduler Controllers Every member of control plane is also a client Have to go through process Client (HTTPS) Self signed certificates out-of-the-box authN phase Prove your ID authZ phase Is user allowed to perform action Admission Control Mutate & validate Schema validation Instantiated on cluster This flow assumes we're hitting API server on the secure port Some installations open an insecure local port on the Masters Disable for prod Can differ by installation RBAC Additive deny-by-default system Have to add allow rules Authentication (AuthN) All about proving you are who you say you are Client -- Request (with creds) --> API API checks with Authentication module Yes/No back to API Configurable Out-of-the-Box options Bearer tokens Client certs Bootstrap tokens External systems Kubernetes does not do Users! Manage Users externally IAM Active Directory Etc.. Kubernetes cluster with CA Mint user certs with CA Embed user names in the CN property of the cert and any groups get listed as organizations or O property Create kubectl context so that certificate gets embedded with all future commands Good to go! Service Accounts Are stored in kubernetes Not for us devs, but used for system componants and other parts of control plane Managed by Kubernetes You can (should) manage them Authorization (AuthZ) Who (Subject) can perform which actions (Verb) on which resources (pods, deployments, etc)? Need to explicitly create some allow rules Powerful default users (Too powerful for production) New cluster, get context and a user with mega permissions RBAC (Role Based Access Control) Roles & RoleBindings (for least privilege) All about the rules Roles Which operations on which resources RoleBinding Who can do this, what user Namespace scoped and cluster scoped New cluster gets a bunch of pre-created cluster roles and cluster role bindings Docker-for-desktop example In summary RBAC denies everything by default Get around it by using powerful pre-created accounts Admission Control Kicks in after authN and authZ Deals with policy enforcement Can be used with Webhooks for External admission controller Needs to be secure! Needs to work solidly or it has potential to break all requests into API server Two main types Mutating Modifying requests Validating All have to except, single no stops request 23. More Kubernetes Stuff Other Kubernetes Stuff Few things high on list of things to look at next. DaemonSets Like deployments, they manage pods. Instead of being about scaling, these are about making sure a particular pod is running on every node. StatefulSets Bring benefits of Kubernetes to stateful bits of app Jobs For running a specified number of pods and making sure they complete CronJobs Run against a schedule Configure with pod spec Gets pods that run when you want them to PodSecurityPolicy List a bunch of things a pod has to conform to Deny access to specific things, etc Pod resource requests and limits Right way to do things and feeds into other things ResourceQuotas Lets you set limits against namespaces CustomResourceDefinition Extensibility of the API Extend the API in your local cluster 25. GAE: Google App Engine What is it? In scope of the exam Different The OG The original google cloud service Fairly easy to learn the basics Good test of your independence Deeper than it first seems Powerful 26. Services Breadth Changing GEars to Breadth Google Products List Page Compute Compute Engine (GCE) Compute Engine (GCE) Comparable to AWS EC2 or VMware Google Kubernetes Engine (GKE) Google Kubernetes Engine (GKE) Comparable to AWS EC2 Container Service (ECS & EKS) Probably use Docker App Engine (GAE) App Engine (GAE) Comparable to AWS Elastic Beanstalk or Heroku Google Cloud Functions (GCF) Google Cloud Functions (GCF) Comparable to AWS Lambda functions Storage Services Local SSDs Local SSDs Comparable to AWS EC2 Instance Store Vols. or Direct-Attached Storage (DAS) Persistent Disk (PD) Persistent Disk Comparable to AWS Elastic Block Storage (EBS) or Storage Area Network (SAN) Cloud Filestore Cloud Filestore Comparable to AWS Elastic File System (EFS) or Network-Attached Storage (NAS) Cloud Storage (GCS) Cloud Storage Comparable to Amazon S3 or Amazon Glacier Databases Cloud SQL Cloud SQL Comparable to Amazon RDS or Self-Managed MySQL Cloud Spanner Cloud Spanner Comparable to Sharded MySQL or CockroachDB Cloud Spanner Instance Configuration Big Query Big Query Comparable to Amazon Redshift, Amazon Athena, Presto Big Query Under the hood Cloud Bigtable Cloud Bigtable Comparable to DynamoDB, Cassandra, Apache HBASE Cloud Datastore Cloud Datastore Comparable to DynamoDB, MongoDB Cloud Datastore Queries Firebase DBs Firebase DBs Comparable to ELB + DynamoDB + EC2 + Socket.io + MongoDB + NGINX Data Transfer Data Transfer Appliance Data Transfer Appliance Comparable to AWS Snowball Storage Transfer Service Storage Transfer Service External Networking Google Domains Google Domains Comparable to Amazon Route 53, GoDaddy Cloud DNS Cloud DNS Comparable to Amazon Route 53, Dyn Static IPs Static IPs Comparable to AWS's Elastic IP Address Cloud Load Balancing (CLB) Cloud Load Balancing Comparable to AWS's Elastic Load Balancing, HA Proxy, NGINX Cloud CDN Cloud CDN Comparable to Amazon Cloudfront, Akamai, Cloudflare Internal Networking Virtual Private Cloud (VPC) Virtual Private Cloud Comparable to Amazon VPC, OpenFlow Cloud Interconnect Cloud Interconnect Cloud VPN Cloud VPN Comparable to AWS VPN, OpenVPN Dedicated Interconnect Dedicated Interconnect Comparable to AWS Direct Connect Cloud Router Cloud Router CDN Interconnect CDN Interconnect Machine Learning / AI Cloud Machine Learning Engine Cloud Machine Learning Engine Comparable to Amazon SageMaker, TensorFlow, Apache MXNet Cloud Vision API Cloud Vision API Comparable to Amazon Rekognition Cloud Speech API Cloud Speech API Cloud Natural Language API Cloud Natural Language API Cloud Translation API Cloud Translation API Comparable to DialogFlow DialogFlow Comparable to Amazon Lex Cloud Video Intelligence API Cloud Video Intelligence API Cloud Job Discovery Cloud Job Discovery Big Data and IoT Big Data Lifecycle Cloud Internet of Things (IoT) Core Cloud IoT Core Comparable to AWS IoT, Custom Management Cloud Pub-Sub Cloud Pub-Sub Comparable to Amazon SNS, Amazon SQS, RabbitMQ, Amazon Kinesis, Apache Kafka Cloud Dataprep Cloud Dataprep Comparable to AWS Glue, Informatica PowerCenter somwewhat, moreso OpenRefine, MatLab, or Excel Managed by Trifacta, not Google Cloud Dataproc Cloud Dataproc Comparable to Amazon EMR, Spark, Hadoop Cloud Dataflow Cloud Dataflow Comparable to Amazon EMR, Spark, Hadoop, and Apache Beam Cloud Datalab Cloud Datalab Comparable to Jupyter Notebook, uses this Cloud Data Studio Cloud Data Studio Comparable to Amazon QuickSight, Tableau Cloud Geonomics Cloud Geonomics Comparable to Global Alliance for Genomics & Health Identify and Access - Core Security GCP Security Overview Roles Roles Comparable to AWS IAM Policies Cloud IAM Cloud IAM Comparable to AWS IAM Service Accounts Service Accounts Comparable to AWS IAM Roles Cloud Identity Cloud Identity Comparable to AWS IAM, G Suite, Gmail/Google Account, Active Directory Security Key Enforcement Security Key Enforcement Cloud Resource Manager Cloud Resource Manager Comparable to AWS Organizations Cloud Identity-Aware Proxy (IAP) Cloud IAP Comparable to Amazon API Gateway Cloud Audit Logging Cloud Audit Logging Comparable AWS CloudTrail Security Management - Monitoring and Response Cloud Armor Cloud Armor Comparable to AWS Shield + AWS WAF Cloud Security Scanner Cloud Security Scanner Comparable to Amazon Inspector, Trustwave App Scanner, Qualys Web Application Scanning Cloud Data Loss Prevention API (DLP) Cloud DLP API Comparable to AWS Macie Event Threat Detection (ETD) Event Threat Detection Comparable to Amazon GuardDuty, Splunk Cloud Security Command Center (SCC) Cloud Security Command Center Comparable to AWS Security Hub, Splunk Enterprise Security, Sumo Logic Getting Started With SCC What is SIEM? (Youtube) Encryption Key Management Cloud Key Management Service Cloud KSS Comparable to AWS KMS, HashiCorp Vault Cloud Hardware Security Module Cloud HSM Comparable to AWS CloudHSM, SafeNet HSM Operations and Management Google Stackdriver Stackdriver Comparable to Amazon CloudWatch Stackdriver Monitoring Stackdriver Monitoring Comparable to CloudWatch Metrics & Dashboards, Datadog, collectd Stackdriver Logging Stackdriver Logging Comparable to CloudWatch Logs, Splunk, Fluentd Stackdriver Error Reporting Stackdriver Error Reporting Comparable to Rollbar, Bugsnag Stackdriver Trace Stackdriver Trace Comparable to AWS X-Ray, ZipKin, OpenTracing Stackdriver Debugger Stackdriver Debugger Stackdriver Profiler Stackdriver Profiler Comparable to AWS CloudFormation, HashiCorp Terraform Cloud Deployment Manager Rundown Cloud Deployment Manager Comparable to AWS CloudFormation, HashiCorp Terraform Cloud Billing API Cloud Billing API Comparable to AWS Billing API, Excel Development and APIs Cloud Source Repositories Cloud Source Repositories Comparable to AWS CodeCommit, GitHub Cloud Build Cloud Build Comparable to Amazon CodeBuild, Travis CI, Jenkins Container Registry (GCR) Container Registry Comparable to Amazon ECR, Docker Hub Cloud Endpoints Cloud Endpoints Cloud Endpoints Architecture Cloud Endpoints gRPC Transcoding Comparable to Amazon API Gateway, NGINX Apigee Apigee Comparable to Amazon API Gateway + AWS Shield, CA API Gateway Test Lab for Android Test Lab for Android Comparable to AWS Device Farm, Xamarin Test Cloud, Sauce Labs Mobile Testing 27. System of Services Putting it all Together Example Systems Project Treehouse API Hosting Jenkins on Kubernetes Log Processing Live Streaming Shopping Cart Analysis","title":"Google Cloud"},{"location":"gcloud/#google-cloud-notes","text":"Based on Udemy Course Google Certified Associate Cloud Engineer Collection","title":"Google Cloud Notes"},{"location":"gcloud/#1-course-info","text":"","title":"1. Course Info"},{"location":"gcloud/#course-introduction","text":"Getting certified on Cloud Platforms opens doors. In demand Contains what students need to pass exams and start utilizing the cloud in the real world. Kubernetes essential part of Google Cloud Deep Dive course available This course is a combination of: Google Certified Associate Cloud Engineer Introduction to Google Cloud Platform Kubernetes Deep Dive","title":"Course Introduction"},{"location":"gcloud/#making-comparisons","text":"AWS seems to make new services for anything requested Google ACE is more broad, although similar. Focus on data flows here. ACE has more focus on running systems and command line access. PSA has more focus on business analysis and trade-offs Overall need to understand how things work at a fairly deep level and need to have built things hands on. Challenge labs to test your skills on your own. By end of course will have learned: Kubernetes How Google Cloud is set up and it's main services. How to use it through web console and command line.","title":"Making Comparisons"},{"location":"gcloud/#course-outline-student-background","text":"Aim to answer How do I properly set up my Google Cloud Platform (GCP) account and projects? How do I set up and use the various GCP services? How can I build a GCP system I have designed? How can I get certified as a GCP Associate Cloud Engineer? Course Structure Certification/GCP Overview GCP Account Setup (Hands-On) GCP Services (Hands-On) Breadth & Exam Prep Prerequisities Certification Exam has no prerequisite Credit card for GCP account (will not be charged if stay in trial) Computer to connect to GCP and VMs MacOS, Windows, Linux, Chromebook, etc. are all fine. Mobile phone will not work. Considerations Similar certification system to AWS Learn about mental models Learn how to learn more effectively No AWS experience required. Not for GCP Not for course Not for exam","title":"Course Outline &amp; Student Background"},{"location":"gcloud/#2-certification-intro","text":"","title":"2. Certification Intro"},{"location":"gcloud/#exam-guide-blueprint","text":"Google's statement of what's most important To a person wanting to pass the exam To a person working in the field as a Cloud Engineer Defines scope Of role Of exam Of course From Google : An Associate Cloud Engineer deploys applications, monitors operations of multiple projects, and maintains enterprise solutions to ensure that they meet target performance metrics. This individual has experience working with public clouds and on-premises solutions. They are able to use Google Cloud Console and the command-line interface to perform common platform-based tasks to maintain one or more deployed solutions that leverage Google-managed or self-managed services on Google Cloud. Exam Sections (or \"Domains\") Setting up a cloud solution environment Setting up cloud projects and accounts Managing billing configuration Installing and configuring the command line interface (CLI) Planning and configuring a cloud solution Planning and estimating GCP product using the Pricing Calculator Planning and configuring compute resources Planning and configuring data storage options Planning and configuring network resource Deploying and implementing a cloud solution Deploying and implementing Compute Engine resources Deploying and implementing Kubernetes Engine resources Deploying and implementing App Enging and Cloud Functions resources Deploying and implementing data solutions Deploying and implementing networking resources. Ensuring successful operation of a cloud solution Managing Compute Engine resources Managing Kubernetes Engine resources Managing App Enging and Cloud Functions resources Managing data solutions Managing networking resources. Monitoring and logging Configuring access and security Managing Identity and Access Management (IAM) Managing service accounts Viewing audit logs for project and managed services","title":"Exam Guide (Blueprint)"},{"location":"gcloud/#3-intro-to-google-cloud-platform-gcp","text":"","title":"3. Intro to Google Cloud Platform (GCP)"},{"location":"gcloud/#gcp-context","text":"AWS is the far-and-away market leader What's the right cloud for you? Might use multiple Google is all about Big Data; huge scale Google's Tools \"Google is such a developer-focused cloud\" History of GCP Built by Googlers for Google Not original for Enterprise Purchased some services Leaks in abstractions more evident Catch-up to AWS Some functionality missing Avoided some mistakes More willing to be \"a cloud\" that you use, not just \"the cloud\" that you use.","title":"GCP Context"},{"location":"gcloud/#gcp-design-and-structure","text":"Global Secure Huge Scale Developers","title":"GCP Design and Structure"},{"location":"gcloud/#physical-infastructure","text":"vCPU Physical server Rack Data center (building) Zone Region Multi-Region Private global network","title":"Physical Infastructure"},{"location":"gcloud/#network-ingress-and-egress","text":"Normal network: Routes via Internet to edge location closest to destination Google: Routes so traffic enters from Internet at edge closest to source Enables very interesting scenarios Single global IP address can load balance worldwide Sidesteps many DNS issues Can now opt for \"normal\" network routing to reduce price (and functionality)","title":"Network Ingress and Egress"},{"location":"gcloud/#pricing","text":"Provisioned \"Make sure you're ready to handle X\" Usage \"Handle whatever I use and carge me for that\" Network traffic Free on the way in (ingress) Charged on the way out (egress), by GBs used Egress to GCP services sometimes free Depends on the destination service Depends on the location of that service","title":"Pricing"},{"location":"gcloud/#security","text":"Separation of duties and physical security Absolutely everything always encrypted at rest Strong key and identity management Network encryption All control info encrypted All WAN traffic to be encrypted automatically Moving towards encrypting all local traffic within data centers Distrust the network, anyway BeyondCorp Google Security Design","title":"Security"},{"location":"gcloud/#scale-and-automation","text":"Scale must be unbounded Devs don't want to answer pages","title":"Scale and Automation"},{"location":"gcloud/#resource-quotas-soft-limits","text":"Scope Regional Global Changes Automatic By request Response in 24-48h May be refused Queryable gcloud compute project-info describe --project myprojectid","title":"Resource Quotas (Soft Limits)"},{"location":"gcloud/#organizations","text":"Projects are similar to AWS accounts Projects own resources Resources can be shared with other projects Projects can be grouped and controlled in a hierarchy","title":"Organizations"},{"location":"gcloud/#4-intro-to-gcp-productsservices","text":"","title":"4. Intro to GCP Products/Services"},{"location":"gcloud/#how-to-cheat","text":"","title":"How to Cheat"},{"location":"gcloud/#productsservices-as-building-blocks","text":"Categories Data flow Compute, Storage, Networking centrally important","title":"Products/Services as Building Blocks"},{"location":"gcloud/#cloud-deployment-manager","text":"All pieces needed included in template Can customize","title":"Cloud Deployment Manager"},{"location":"gcloud/#gcp-marketplace","text":"aka Cloud Launcher A partner and open-source marketplace Buying completed things","title":"GCP Marketplace"},{"location":"gcloud/#key-building-blocks","text":"Compute Engine Most relatable Google cloud product Like computers from the store Spin up and use, as much as needed Build almost anything with it By the second Cloud function Key building block of serverless systems By the 10th of a second Many event types Cloud storage Serverless product Most pure product Storage and Serving Nearline & Coldline are variants of cloud storage Persistent Disk Block storage, similar to harddrive Only goes with compute engine. Cloud Filestore Neither object based nor block based File based Kubernetes Engine Alleviate management burden with Compute Engine Load Balancers Cloud TPU Specialized hardware for machine learning TensorFlow processing Many ML products AutoML, etc Data and Analytics Products Networking Virutal private cloud Dedicated Interconnect Cloud NAT Cloud load balancing Cloud DNS etc Management Tools Stackdriver Identity and Security Products Cloud Identity Cloud IAM","title":"Key Building Blocks"},{"location":"gcloud/#6-account-setup","text":"","title":"6. Account Setup"},{"location":"gcloud/#free-tier-gcp-accounts","text":"Google Cloud Platform Free Tier Billing account that does not get charged Must be manually upgraded to a paying account Still requires credit card, for verification $300 USD credit that can last 12 months \"When your trial ends, your account will be paused and you'll have the option to upgrade to a paid account.\" Business Accounts not eligible for free trial Free Trial Restrictions No more than 8 vCPUs (total simultaneous) No GPUs (video card chips) No TPUs (custom chips for TensorFlow) No Quota increases No cryptomining allowed No SLAs No premium OS licenses (e.g. Windows) No Cloud Launcher products with extra usage fees Always Free \"Always Free usage does not count against your free trial credits\" Last beyond end of free trial Full details at Free Tier Limits Compute Highlights 24h/day of f1-micro runtime, in most US regions, only 28h/day of App Engine runtime, in North America 2M/month of Cloud Functions invocations (with runtime/size limits) Storage Highlights Storage averaged over the month 5 GB of Regional Cloud Storage, including some operations 1 GB of Cloud Datastore storage, including some operations 10 GB of BigQuery storage, with 1 TB/month of query processing 30 GB HDD Storage on GCE and AE 5 GB snapshot storage on GCE and AE 5 GB of StackDriver logs with 7 day retention Networking Highlights Egress to China and Australia not free! 1 GB/month of App Engine data egress 1 GB/month of Compute Engine data egress 5 GB/month of egress by Cloud Function invocations 5 GB/month of egress from Cloud Storage based in North America 10 GB/month of Cloud PubSub messages Other highlights 120 build-minutes/day of Google Cloud Container Builder 60 minutes/month of Google Cloud Speech API recognition from audio/video 1000 units/month of Cloud Vision API calls 5000 units/month of Google Cloud Natural Language API Google Cloud Shell with 5 GB of persistent disk storage quota 1 GB of Google Cloud Source Repositories private hosting","title":"Free-Tier GCP Accounts"},{"location":"gcloud/#create-free-tier-gcp-account","text":"Create Free Trial GCP account New GMail account for Billing Principle of least privilege Signup","title":"Create Free-Tier GCP Account"},{"location":"gcloud/#explore-gcp-console","text":"The Google Cloud Platform Console Google Cloud Status Dashboard Fully customizable dashboard Activity tab Google Cloud Shell Do NOT click activate full account","title":"Explore GCP Console"},{"location":"gcloud/#set-up-billing-export","text":"Export Cloud Billing Data to BigQuery Setting up Billing Export Navigate to Console > Billing > Billing Export Need a BigQuery Dataset Could do from here, but then it will live inside that particular project, which isn't where we want it. Don't want all stuff mashed together. Use projects to manage groups of resources Create new project Quotas Projects aren't an infinite resource Create a new project here, unique ID across all projects Create new Dataset in BigQuery under new project Set up a label Set up BigQuery export Admin project billing_export dataset Recap Export must be set up per billing account Resources should be placed into appropriate projects Resources should be tagged with labels Billing export is not real-time Delay is hours","title":"Set Up Billing Export"},{"location":"gcloud/#set-up-billing-alert","text":"Can setup a \"budget\" with alerts Billing > Budget & alerts > Create Budget Trigger alerts for $1, include credits","title":"Set up Billing Alert"},{"location":"gcloud/#set-up-non-admin-user-access","text":"Limit risk by restricting user account, as opposed to constantly using admin account Key in this case is user account will not be able to upgrade the billing account to become a paying one. Production setup may have even more restrictive roles Billing IAM Role: Billing Account User Purpose: Link projects to billing accounts Level: Organization or billing account Use Case: This role has very restricted permissions, so you can grant it broadly, typically in combination with Project Creator. These two roles allow a user to create new projects linked to the billing account on which the role is granted. Add Billing Account User (different than admin account) Login and access Billing with newly granted User account Permissions limited here due to role User has access to that User Project created Admin account does not have access to newly created User Project Overview of Billing Access Owning a project and being able to control its resources is completely separate from being able to control the Billing Account attached to that project.","title":"Set Up (Non-Admin) User Access"},{"location":"gcloud/#7-cloud-shell-and-data-flows","text":"","title":"7. Cloud Shell and Data Flows"},{"location":"gcloud/#explore-cloud-shell-and-editor","text":"Cloud Shell Docs Course Resources on Github Shell Highlights Web browser access No need for local terminal Chromebook (+) No PuTTY! Automatic SSH key management 5 GB of persistent storage Easy-access to preinstalled tools gcloud, bq, kubectl, docker, npm/node, pip/python, ruby, vim, emacs, bash, etc. Lab walkthrough Log into GCP account with non-admin account Make sure 2FA is enabled and you are prompted for it. Enable Cloud Shell Switch projects: gcloud config set project [PROJECT_ID] Download file: dl README-cloudshell.txt node hello.js with git repo for cloud test Can view with Web Preview Can view and edit files in cloud editor nodemon preinstalled here diff hello.js html-hello.js Can change preview port","title":"Explore Cloud Shell and Editor"},{"location":"gcloud/#data-flows","text":"Data Flows are Everything (in IT) Core Concepts with regard to DATA Moving - Network, etc Processing - Compute, etc Remembering - Storage, etc Cloud Shell Lab Data Flow Your Machine Web Browser GCP Console Google Cloud Control Plane Opening up Cloud Shell Find persistent storage available Find machine to host our cloud shell instance Container Secure Shell Server Connection to this secure shell from browser Connect to git, download files, stored in persistent storage. Running Node Server Google cloud sets up proxy Opening up Editor Make changes to files in persistent storage Node process has to be reset to show any changes. Reload browser Loading alternative node process with different port also requires us to change proxy port to match. Key Takeaways Data flows are the foundation of every system Moving, Processing, Remembering Not just Network, Compute, Storage Build mental models Helps you make predictions Identify and think through data flows Higlights potential issues Requirements and options not always clear Especially in the real world. Critical skills for both real world and exam questions","title":"Data Flows"},{"location":"gcloud/#update-course-lab-files","text":"What's the plan? Configure git Stash changes Retrieve Updates Starting off Log into GCP console with user account Open Cloud Shell (Doesn't matter which project you use) chmod +x update.sh ./update.sh","title":"Update Course Lab Files"},{"location":"gcloud/#milestone-open-world","text":"Projects Two quotas to be aware of: Each user account has a qutoa on how many projects you can own Trial billing account has a separate quota for how many projects can be linked to it Google automatically creates a project for you admin account and links it to your trial billing account","title":"Milestone: Open World"},{"location":"gcloud/#8-basic-services","text":"","title":"8. Basic Services"},{"location":"gcloud/#gcs-google-cloud-storage","text":"Making Data Public Log into GCP Console with user account From now on, just assume this Only use admin account when we need it Create a new project Generally, new thing , new project Also link to billing Navigate to Storage in navigation list Can pin to top Create a Bucket Set up region/multi-region, labels, keys Edit permissions to set up public access to file. User - \"allUsers\" - Reader Objects not files Command line alternative methods for actions Example rename an object: gsutil mv -p gs://storage-lab-console-panda/README-cloudshell.txt gs://storage-lab-console-panda/README-cloudshell.txt Cannot change location or location-type after bucket creation Can edit bucket permissions Add allUsers as Storage Object Viewer to essentially create a public bucket , which, for security reasons, is not advised","title":"GCS: Google Cloud Storage"},{"location":"gcloud/#gcs-via-gsutil-in-command-line","text":"gcloud config list Using gsutil Buckets start with gs:// gsutil ls gs://storage-lab-console-panda/ Add ** for all Can use --help gsutil mb (mb = make bucket) Ex: gsutil -l NORTHAMERICA-NORTHEAST1 gs://storage-lab-cli-panda gsutil label get gs://storage-lab-console-panda Returns JSON listing labels gsutil label set gs://storage-lab-cli-panda gsutil label ch -l \"extralabel:extravalue\" gs://storage-lab-cli-panda gsutil versioning get gs://storage-lab-cli-panda gsutil versioning set on gs://storage-lab-cli-panda gsutil cp README.txt gs://storage-lab-cli-panda gsutil cp -a README.txt gs://storage-lab-cli-panda Getting version Between buckets: gsutil cp gs://storage-lab-console-panda/** gs://storage-lab-cli-panda/ Can't see or utilize versioning in web UI gsutil acl ch -u AllUsers:R gs://storage-lab-cli-panda/Selfie.jpg Lab Script Commands Bucket Locations","title":"GCS via gsutil in Command Line"},{"location":"gcloud/#starting-our-first-gce-vm-google-compute-engine-setup","text":"Find which project is selected: gcloud config get-value project Check if any Compute Engines already running: gcloud compute instances list List Services: gcloud services list Can add --help or -h , like most commands List of APIs that are enabled for this specific project gcloud services list --enabled - Default gcloud services list --available - All Filter down with grep: gcloud services list --available | grep compute Result = compute.googleapis.com Compute Engine API gcloud services -h gcloud compute instances list URL given after sending N: API & Services Google API section of console Navigate to IAM & admin section See members and roles here Service Accounts Section Currently empty Navigate to Compute Engine section Simply going here will enable it After, running gcloud compute instances list will now show Listed 0 items compute.googleapis.com (Compute Engine API) & oslogin.googleapis.com (Cloud OS Login API) is now in services list Permissions also added automatically in IAM Service account also created automatically To create our very first virtual machine: gcloud compute instances create myvm gcloud compute instances delete myvm Lab Script Commands","title":"Starting Our First GCE VM: Google Compute Engine Setup"},{"location":"gcloud/#rundown-on-gcloud","text":"The gcloud command Overview Overview Doc for gcloud Command-line tool to interact with GCP Best friends with gsutil and bq All share same configuration set via gcloud config gsutil could have been gcloud storage bq could have been gcloud bigquery In general: more powerful than console but less powerful than REST API Functionality in command-line tools not yet fully released, can use beta to use: gcloud beta billing accounts list Syntax: Syntax of gcloud gcloud <global flags> <service/product> <group/area> <command> <flags> <parameters> Always drills down (from left to right) Examples: gcloud --project myprojid compute instances list OR gcloud --project=myprojid myprojid compute instances list In our example, relied on project given in config. We used: gcloud compute instances create myvm (no project name given) Not all commands have parameters: gcloud services list --available gsutil ls - Implies working against google cloud storage service and the command is to list Command to make bucket: gsutil mb -l northamerica-northeast1 gs://storage-lab-cli-panda Global flags --help -h --project <ProjectID> --acount <Account> --filter Not always available, but often better than using grep --format Can choose JSON, YAML, CSV, etc. Can pipe ( | ) JSON to jq command for further processing --quiet (or -q ) Won't prompt you to confirm about destructive actions Config Properties Properties in gcloud Values entered once and used by any command that needs them Can be overridden on a specific command with corresponding flag Used very often for account, project, region, and zone Set core/account or account to replace --account Set core/project or project to replace --project Set compute/region to replace --region Set compute/zone to replace --zone Set with gcloud config set <property> <value> Check with gcloud config get-value <property> Clear with gcloud config unset <property> Configurations Configuration in gcloud Can maintain groups of settings and switch between them Most useful when using multiple projects Interactive workflow to set common properties in a config with gcloud init List all properties in a configuration with gcloud config list List all configurations with gcloud config configurations list IS_ACTIVE column shows which one is currently being used Other columns list account, project, region, zone, and the name of the config Make new config with gcloud config configurations create ITS_NAME Start using config with gcloud config configurations activate ITS_NAME Or use for just one command with --configuration=ITS_NAME","title":"Rundown on gcloud"},{"location":"gcloud/#configurations-analogy","text":"Action Directory Configuration Make New mkdir newdir gcloud config configurations create newconfig Switch To cd newdir gcloud config configurations activate newconfig List Contents ls gcloud config list List Non-Active ls ~/newdir gcloud --configuration=newconfig config list OR gcloud config configurations describe newconfig","title":"Configurations Analogy"},{"location":"gcloud/#gce-in-and-out","text":"","title":"GCE In and Out"},{"location":"gcloud/#how-you-can-connect-into-and-out-of-a-google-compute-engine-instance","text":"Labs Commands List Good first step to check and set project we're in Set: gcloud config set project [PROJECT_ID] Check: gcloud config list Check for hidden ssh folder in home directory pwd ls ls -a .ssh Quick look at the Cloud Shell machine itself whoami hostname curl api.ipify.org Check that nothing is running gcloud compute instances list Don't create default VM: gcloud compute instances create myhappyvm Enter no, cancel Look at how to set the machine type gcloud compute instances create myhappyvm -h gcloud compute instances create myhappyvm --help gcloud compute machine-types list Filter: gcloud topic filters gcloud compute machine-types list --filter=\"NAME:f1-micro\" gcloud compute machine-types list --filter=\"NAME:f1-micro AND ZONE~us-west\" Filters in gcloud Set default zone & region: gcloud config set compute/zone us-west2-b gcloud config set compute/region us-west2 Creating the instance: gcloud compute instances create --machine-type=f1-micro myhappyvm Ping the VM: By name: ping -c 3 myhappyvm Doesn't recognize \"myhappyvm\" By internal IP ping -c 3 10.168.0.2 Also doesn't work. By external IP ping -c 3 34.94.94.230 Pinging external IP works here Connect with SSH: ssh 34.94.94.230 Permission denied Use gcloud compute ssh myhappyvm Will prompt to set up SSH key if not setup already Now connected to VM whoami Same result hostname Different hostname SSH folder in cloudshell now has keys for compute VM SSH folder in VM now has key as well Instance Metadata Reference Metadata logged when gcloud compute ssh was first running Attempt to curl the metadata: curl metadata.google.internal./computeMetadata/v1/ Missing Metadata-Flavor:Google header curl -H \"Metadata-Flavor:Google\" metadata.google.internal./computeMetadata/v1/ curl -H \"Metadata-Flavor:Google\" metadata.google.internal./computeMetadata/v1/projects/ A look at project-id we see the id of our current project In attributes we see ssh keys Includes the public key Can get instance/name and other useful information here Including service-accounts/default/ Has aliases, email, identity, scopes, and token Token to sign API requests Also using service account auto created when we enabled compute engine API gcloud automatically has a way to connect out from this instance to the rest of the google cloud platform Also connected to our project Can see buckets we created from this VM Attempt delete VM: gcloud compute instances delete myhappyvm From within VM: Permission failed From cloudshell: Successful Check if deleted: gcloud compute instances list Listed 0 items expected","title":"How you can connect into and out of a Google Compute Engine instance"},{"location":"gcloud/#gce-via-console","text":"Creating Instances Navigate to Compute Engine Service Settings Can set default region/zone here Console and command-line config informaton & settings are separate Metadata SSH keys Key from previous is registered. VM instances Create Custom machine config, etc Can scope to service account or none In addition to access scopes Once created, can edit some parts of the VM Cannot change the name By default does not preserve instances on deletion Can use \"Create Similar\" as shortcut to create similarly configured VM Preemptible Instances Can make preemtiple from management setting Setting on will also switch off automatic restart and will terminate on host maintainence Making preemtible will make Google do what it can to keep running Will shut down after 24 hours Startup Scripts Automation Startup script runs automatically when instance starts Whether first time or on a reboot Gets passed to instance as metadata The machines are designed to run script on boot Variety of uses Security tab Can override project level settings about SSH keys and block them from being used and add custom ones just for this instance Disks Default behavior is to delete boot disk when instance is deleted Can add a new one or attach an existing persistent disk Encryption options Google-managed easy preferred route Can connect via SSH with button in UI via VM instances Can delete from within the VM here since we changed scopes to allow access to Google compute engine through that service account In all activity, most logged activities happening as user account Other most recent two come from the service account that was used by the compute engine instance In metadata>SSH keys, two new keys were added as a part of the connection from the console to the instance Temporary keys Service Accounts and Scopes","title":"GCE via Console"},{"location":"gcloud/#9-basic-services-challenge-lab","text":"","title":"9. Basic Services Challenge Lab"},{"location":"gcloud/#gce-gcs-challenge-lab","text":"GCE-GCS Challenge Lab Startup Desired Result (Requirements) Brand new project GCE instance that runs provided script System logs available in Stackdriver Logs New GCS bucket for resulting log files Log file appears in new bucket after instance finishes starting up No need to SSH to instance Tips No need to SSH But you can do so for debugging, if you want Final instance should not need any manual control via SSH You should not need to change the startup script But you must read it for key info to complete the lab Use the \"Create Similar\" button to try again Clean up after yourself Delete or Stop instances Advanced Challenge: No Console Repeat the whole lab from scratch using only the CLI in Cloud Shell Complete this Challenge Lab through the console UI, first Tip: You can use info from the UI-based project to craft your command lines Can you script everything? Even creating the new project?","title":"GCE-GCS Challenge Lab"},{"location":"gcloud/#gce-gcs-challenge-lab-data-flow","text":"Service Accounts (incl. scope) GCE Instance Statuses Long-polling for Metadata Changes Hypervisor-Visible Metrics Agent-visible Metrics Installing Stackdriver Agent Lost of Logs Sent by Agent (by Default) Our Actions Retrieve and review startup script Make new project Make logs destination bucket Enable GCE API Create new GCE instance Enable scope to write to GCS Set labels (optional) Set startup script Set metadta to point to logs destination bucket Monitor progress Check Stackdriver Logs Check CPU graph Check logs bucket","title":"GCE-GCS Challenge Lab Data Flow"},{"location":"gcloud/#data-flow-in-action","text":"","title":"Data Flow in Action"},{"location":"gcloud/#gce-gcs-challenge-lab-demo","text":"Demo walkthrough Create new project Also must link to billing Fetch provided bash script Create new Storage bucket Enable Compute Engine Set to run the bash script on startup Navigate to stackdriver logs for compute instance See file downloaded in bucket storage","title":"GCE-GCS Challenge Lab Demo"},{"location":"gcloud/#basic-services-sample-practice-questions-breakdown","text":"Understand Eliminate Evaluate Choose Validate","title":"Basic Services Sample Practice Questions Breakdown"},{"location":"gcloud/#10-scaling","text":"","title":"10. Scaling"},{"location":"gcloud/#managed-instance-groups","text":"Lab Start-Up Script Challenge Lab GCE as active Project Compute Engine Create instance template Instance Templates Not required to set a zone Pick f1 micro machine Put in startup script Give metadata key name pair, with gs://PROJECT_ID/ as value Instance templates are immutable Can't be edited Can copy, however Create VM with template (x2) Create Instance Group Instance Groups Unmanaged Instance Group Groups instances, monitoring, etc Manual management Managed Instance Group Google will be creating and deleting instances on our behalf. Autoscaling Deleting a managed instance group will delete all of its instances because it owns them. Deleting an unmanaged instance group will just leave them all behind.","title":"Managed Instance Groups"},{"location":"gcloud/#milestone-robust-mental-model","text":"Resource Elasticity","title":"Milestone: Robust Mental Model"},{"location":"gcloud/#11-security","text":"","title":"11. Security"},{"location":"gcloud/#what-is-security-data-flow","text":"Information Security CIA Triad: You cannot view data you shouldn't : Confidentiality You cannot change data you shouldn't : Integrity You can access data you should : Availability How do we control data flow? (AAA) Authentication - Who are you? Authorization - What are you allowed to you? Accounting - What did you do? Public Bucket Breach Key Security Mindset (Principles) Least privilege Defense in depth Fail securely Security by Design Principles Key Security Products/Features - AuthN Identity Humans in G Suite, Cloud Identity Applications and services use Service Accounts Identity hierarchy Google groups Can use Google Cloud Directory Sync (GCDS) to pull from LDAP (no push) OWASP Top 10","title":"What is Security? (Data Flow)"},{"location":"gcloud/#iam-breakdown-resource-hierarchy-to-which-thing","text":"IAM Overview Docs Resource Something you create in GCP Project IAM Resource Hierarchy Docs","title":"IAM Breakdown: Resource Hierarchy (To which thing?)"},{"location":"gcloud/#iam-breakdown-permissions-and-roles-can-do-what","text":"Service.Resource.Verb Examples: pubsub.subscriptions.consume pubsub.topics.publish Understanding Roles Understanding Custom Roles Roles A Role is a collection of Permissions to use or manage GCP Resources Primitive Roles - Project-level and often too broad Viewer is read-only Editor can view and change things Owner can also control access & billing Predefined Roles List Predefined Roles - Give granular access to specific GCP Resources E.g.: roles/bigquery.dataEditorm roles/pubsub.subscriber","title":"IAM Breakdown: Permissions and Roles (Can do what?)"},{"location":"gcloud/#iam-breakdown-members-and-groups-who","text":"IAM Overview Docs w/ Members Members A Member is some Google-known identity Each Member is identified by a unique email address Can be: user : Specific Google account G Suite, Cloud Identity, Gmail, or validated email serviceAccount : Service Account for apps/services group : Google group of users and service accounts domain : Whole domain managed by G Suite or Cloud Identity allAuthenticatedUsers - Any Google account or service account allUsers - Anyone on the internet (public) Groups \"A Google group is a named collection of Google accounts and service accounts.\" \"Every group has a unique email that is associated with the group.\" You never act as the group. But membership in a group can grant capabilities to individuals. Use them for everything! Can be used for owner when within an organization Can nest groups in an organization Example: One group for each department, all those in group for all staff.","title":"IAM Breakdown: Members and Groups (Who?)"},{"location":"gcloud/#iam-breakdown-policies-bindings","text":"IAM Overview Docs w/ Policies Policies A policy binds Members to Roles for some scope of Resources Answers: Who can do what to which things? Attached to some level in the Resource Hierarchy Organization, Folder, Project, Resource Roles and Members listed in policy, but Resources identified by attachment Always additive (\"Allow\") and never subtractive (no \"Deny\") \"Child policies cannot restrict access granted at a higher level.\" Granting, Changing, Revoking Access One policy per resource Max 1500 member bindings per policy Ridiculously High Max Anywhere close and \"You're doing it wrong!\" Use groups instead! Docs for gcloud add iam policy","title":"IAM Breakdown: Policies (Bindings)"},{"location":"gcloud/#iam-wrap-up","text":"Using IAM Securely FAQ","title":"IAM Wrap-up"},{"location":"gcloud/#billing-access-control","text":"Billing Accounts Represents some way to pay for GCP Service Usage Type of Resource that lives outside of Projects Can belong to an Organization (i.e. be owned by it) Inherits Org-level IAM policies Can be linked to projects But does not own them No impact on project IAM","title":"Billing Access Control"},{"location":"gcloud/#billing-iam-roles","text":"Overview of Billing Access Control Role Purpose Scope Billing Account Creator Create new self-serve billing accounts. Org Billing Account Administrator Manage billing accounts (but not create them). Billing Account Billing Account User Link projects to billing accounts. Billing Account Billing Account Viewer View Billing accoun tcost information and transactions Billing Account Project Billing Manager Link/unlink the project to/from a billing account. Project Monthly Invoiced Billing Invoiced Billing Get billed monthly and pay by invoice due date. Can pay via check or wire transfer Can increase project and quota limits Billing administrator of org's current billing account contacts Cloud Billing Support To determine eligibility To apply to switch to monthly invoicing Eligibility depends on Account age Typical monthly spend Country SMB Centralized Scenario: Small-to-medium enterprise: User type Billing activities Billing Cloud IAM roles CEO Manage payment instrument; View and approve invoices. Billing Account Administrator CTO Set budget alerts; View Spend; Create new billable projects Billing Account Administrator;Project Creator. Development teams None None SMB Delegated Scenario: Small-to-medium enterprise with preference for delegated authority User type Billing activities Billing Cloud IAM roles CEO Manage payment instrument; Delegate authority Billing Account Administrator CFO Set budget alerts; View spend Billing Account Administrator Accounts Payable View and approve invoices Billing Account Viewer Development teams Create new billable projects Billing Account User; Project Creator","title":"Billing IAM Roles"},{"location":"gcloud/#12-networking","text":"","title":"12. Networking"},{"location":"gcloud/#routing-overview","text":"OSI Model of Networking Routing - Wikipedia Routing Focus on About Software -Defined Networking (SDN) More-general than the OSI 7-layer model of networking Not about any particular routing scheme Only setting the stage for routing tables / routes What is it? Routing is about deciding where data should go next Like a direction marker on a hiking trail Fork in the trail At the peak Many local decisions - No full map or path Where does it happen? On the way to Google's network On the way to the right resource On the way from one resource to another There and back again","title":"Routing Overview"},{"location":"gcloud/#routing-to-googles-network","text":"Getting data to Google's network Premium Routing Tier Blog Post Hot-Potato and Cold-Potato Routing","title":"Routing: To Google's Network"},{"location":"gcloud/#routing-to-the-right-resource-load-balancing","text":"Load Balancing in GCP Getting Data to the right resource Latency reduction Uses servers physically close to clients Cross-Region Load Balancing (with Global Anycast IPs) Load balancing Separate from auto-scaling Cloud Load Balancer (all types; internal and external) System design Different servers may handle different parts of the system Especiailly when using microservices (instead of a monolith) HTTP(S) Load Balancer (with URL Map) Unicast vs Anycast Unicast There is only one unique device in the world than can handle this; send it there. Anycast There are multiple devices that could handle this; send it to any one- but ideally the closest. Layer 4 vs. Layer 7 TCP (of TCP/IP) is usually called Layer 4 (L4) It works solely with IP addresses HTTP and HTTPS work at Layer 7 (L7) These know about URLs and paths Each layer is built on the one below it Therefore: To route based on URL paths, routing needs to understand L7 L4 cannot route based on the URL paths defined in L7 What about DNS? Name resolution (via the Domain Name System) can be the first step in routing. But that comes with a number of problems: Layer 4 - Cannot route L4 based on L7's URL paths Chunky - DNS queries often cached and reused for huge client sets Sticky - DNS lookup \"locks on\" and refreshing per request has a high cost. Extra latency because each request includes another round-trip More money for additional DNS request processing Not Robust - Relies on the client always doing the right thing. Spoiler: They don't","title":"Routing: To the Right Resource (Load Balancing)"},{"location":"gcloud/#routing-among-resources-vpc","text":"","title":"Routing: Among Resources (VPC)"},{"location":"gcloud/#getting-data-from-one-resource-to-another","text":"VPC ( global ) is Virtual Private Cloud - Your private SDN space in GCP Not just resource-to-resource - Also manages the doors to outside & peers. Subnets ( regional ) create logical spaces to contain resources All Subnets can reach all others - globally, without any need fro VPNs. Routes ( global ) define \"next hop\" for traffic based on destination IP Routes are global and apply by Instance-level Tags, not by Subnet No route to the internet gateway means no such data can flow Firewall Rules ( global ) further filter data flow that would otherwise route All Firewall Rules are global and apply by Instance-level Tags or Service Acct. Default Firewall Rules are restrictive inbound and permissive outbound Classless Inter-Domain Routing","title":"Getting data from one resource to another"},{"location":"gcloud/#ips-and-cidrs","text":"IP address is abc.def.ghi.jkl (dotted quad) where each piece is 0-255 CIDR block is group of IP addresses specified in <IP>/xy notation Turn IP address into 32-bit binary number e.q. 10.10.0.254 -> 00001010 00001010 00000000 11111110 /xy in CIDR notation locks highest (leftmost) bits in IP address (0-32) abc.def.ghi.jkl/32 is single IP address because all 32 bits are locked abc.def.ghi.jkl/24 is 256 IP address because last 8 bits ( jkl ) can vary 0.0.0.0/0 means \"any IP address\" because no bits are locked RFC1918 defines private (i.e. non-Internet) address ranges you can use: 10.0.0.0/8 , 172.16.0.0/12 , and 192.168.0.0/16 RFC1918 Private Networks","title":"IPs and CIDRs"},{"location":"gcloud/#creating-auto-mode-vpcs-lab","text":"VPC Subnet Creation Mode VPC Networks > Create VPC Network Set Subnet Creation Mode to Automatic Enable default firewall rules (all available) Create","title":"Creating Auto-Mode VPCs (Lab)"},{"location":"gcloud/#custom-mode-vpcs-lab","text":"","title":"Custom-Mode VPCs (Lab)"},{"location":"gcloud/#creating-the-vpc","text":"VPC Overview Docs Create custom VPC","title":"Creating the VPC"},{"location":"gcloud/#creating-the-custom-iam-role-service-account","text":"Understanding IAM Custom Roles Creating and Managing Custom Roles Service Accounts Overview Creating and enabling service accounts for instances Create custom IAM Role with monitoring and logging roles Delete default service account & create new with new custom IAM role","title":"Creating the Custom IAM Role &amp; Service Account"},{"location":"gcloud/#using-the-vpc-and-configuring-firewall-rules","text":"Firewall Rules Overview Configuring Network Tags Filtering by Service Accounts vs Network tag Updated Managed Instance Groups Having trouble editing the instance in Group Compute Engine > Instance Template frontend-it Set to f1-micro machine type Set service account to frontend-sa from earlier Set Networking in advanced settings Network: app-vpc Subnet: oregon-subnet Compute Engine > Instance Template frontend-ig Min 2, Max 3 Attempt to ping, can't VPC Network app-vpc > Firewall Rules Add firewall rule Direction: Ingress Action on match: Allow Target > frontend-sa (service account)","title":"Using the VPC and Configuring Firewall Rules"},{"location":"gcloud/#13-gke-introduction-google-kubernetes-engine","text":"What a cluster is How to manage","title":"13. GKE Introduction: Google Kubernetes Engine"},{"location":"gcloud/#kubernetes-deep-dive-intro","text":"","title":"Kubernetes Deep Dive Intro"},{"location":"gcloud/#kubernetes","text":"On prem AND on cloud Great cloud on/off ramp","title":"Kubernetes"},{"location":"gcloud/#14-kubernetes-course-introduction","text":"","title":"14. Kubernetes Course Introduction"},{"location":"gcloud/#what-you-need","text":"A Kubernetes cluster Several Options: Minikube Docker for Desktop AKS (hosted) EKS (hosted) GKE (hosted) Kops Kubeadm (on-premises) Play with Kubernetes (PWK)","title":"What You Need"},{"location":"gcloud/#schedule","text":"Kubernetes Big Picture Kubernetes App Architecture Kubernetes Networking Kubernetes Storage From Code to Kubernetes Kubernetes Deployments Scaling Kubernetes Apps RBAC and Admission Control Other Kubernetes Stuff What Next","title":"Schedule"},{"location":"gcloud/#15-kubernetes-big-picture","text":"","title":"15. Kubernetes Big Picture"},{"location":"gcloud/#kubernetes-primer","text":"Open source platform for running cloud native apps Infastructure (on-premises/cloud) Kubernetes on top of it to run your apps on Layer that sits about the VMs and provides a rich API and extensive set of primitives for running cloud native apps. Cloud-native app? Built from lots of small interacting services that come together This makes them easy to scale Kubernetes is platform of choice for running these Kubernetes cluster made up of a bunch of Linux nodes (vm or cloud instances) Some form the control plane Brain of the cluster Others are worker nodes Where the apps run Persistent Store - etcd Only stateful bit Protip Business critical, big cluster: etcd, potentially biggest issue Distributed databases not scaling very well API Server is gateway into the cluster Control plane -> Nodes Lots of Security around it","title":"Kubernetes Primer"},{"location":"gcloud/#kubernetes-api","text":"Where everything in Kubernetes is defined RESTful API that uses standard HTTP methods/verbs to perform CRUD style operations Create Read Update Delete Interaction with API done through the kubectl command line utility. Define different parts of app in yaml files and use kubectl to POST to them to API server Assuming authenticated, will create record of intent on the cluster in the store. Record of intent changes the overall desired state of cluster Causes other parts of control plane to kick into action Declarative Configuration Watch loops and controllers kick in to match current state to desired state API broken apart into groups core\"\" {API} apps {API} authorization {API} storage {API} Looked after by Special Interest Group (SIG) People responsible for feature development Alpha -> Beta -> GA","title":"Kubernetes API"},{"location":"gcloud/#kubernetes-objects","text":"Containers Poster child for cloud native Kubernetes runs containers not directly, but wrapped in high-level construct called a pod . Atomic unit for virtualization environment is the VM Atomic unit for Kubernetes is the pod pod Contains one or more containers Atomic unit of scheduling Object on the cluster Defined in the v1 API group Wrap pod in high-level object called a deployment deployments Object on the cluster Defined in the apps/v1 API group Scaling Rolling updates pod Wrap one or more containers deploy Scalability and application releases Other objects exist for wrapping pods daemon sets One and only one of a specific pod will run on every worker in cluster. stateful sets Pods with stateful requriements Tons more!","title":"Kubernetes Objects"},{"location":"gcloud/#spin-up-a-quick-cluster","text":"Play with Kubernetes Initialize cluster master node: kubeadm init --apiserver-advertise-address $(hostname -i) Initialize cluster networking: kubectl apply -n kube-system -f \\ \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\n')\"","title":"Spin Up a Quick Cluster"},{"location":"gcloud/#16-kubernetes-application-architecture","text":"","title":"16. Kubernetes Application Architecture"},{"location":"gcloud/#kubernetes-app-theory","text":"Requirements Persistent back-end Storage External-facing web service External load-balancer Secrets/Passwords Backups Scaling Build out front end web service code & backend database as a Docker image. SVC service for external load-balancer Wrap your web containers in a Kubernetes construct called a deployment. Same with backend Wrap in pods, then a deployment Secrets service Persistent volume Persistent volume claim Scalable micro-services Resources and services in the API","title":"Kubernetes App Theory"},{"location":"gcloud/#sample-kubernetes-app","text":".yaml files Used as declarative config files Front-end 3 Kubernetes objects defined A Service object for load balancer Deployment object Persistant storage Each object has apiVersion and kind properties Back-end Service Not a load-balancer one here For internal cluster traffic Deployment Running mysql pods","title":"Sample Kubernetes App"},{"location":"gcloud/#recap","text":"Apps Ideas Requirements Coding Then to Docker images Then Kubernetes stuff","title":"Recap"},{"location":"gcloud/#17-kubernetes-networking","text":"","title":"17. Kubernetes Networking"},{"location":"gcloud/#common-networking-requirements","text":"All the Sevices have separate endpoints, and different IPs Dynamic DNS Highly dynamic networks are the new normal","title":"Common Networking Requirements"},{"location":"gcloud/#sample-app-requirements","text":"WordPress front-end MySQL back-end Can reach with name in metadata, i.e. wordpress Deployment Container port Deploy bunch of pods hosting containers running WordPress on port 80 Front it with a service Cloud native load balancer that gives way into application from the internet. .yaml config files also work double as documentation","title":"Sample App Requirements"},{"location":"gcloud/#kubernetes-networking-basics","text":"Rules All Nodes can talk All Pods can talk (not NAT) Every Pod gets its own IP Node network 443 (HTTPS) Pod networking Pod Network CNI plugin (Container Network Interface) Big flat network","title":"Kubernetes Networking Basics"},{"location":"gcloud/#service-basics","text":"If demand ramps, and you scale a service, you're adding new pods with a new IP. If demand drops, you're taking the nodes away. Similar with failed nodes Service is a stable abstraction point for pods Hit Service instead of pod directly. Every Service gets a name and an IP Are stable Gets registered with the clusters built in or added on DNS Every Kubernetes cluster has a native DNS service Every pod in cluster knows how to use it Think of Services as load-balancers or proxies. Front-end config and also a backend one Back-end needs to know which pods to send the traffic Done with label selector How does Service know which pods are going? When you create a Service object with a label selection, Kubernetes also creates another object on the cluster called an End Point Object End Point Object has list of pod IPs and ports matcing Service label selector. List is automatically updated","title":"Service Basics"},{"location":"gcloud/#service-types","text":"Different types of Services that behave differently All provide stable networking abstraction point for a bunch of pods Main ones are: ClusterIP (default) Gets own IP Only accessible from within cluster NodePort Gets cluster-wide port (default: 30000-32767) Also accessible from outside cluster LoadBalancer Integrates with public cloud platform To provision on a cloud platform, that platform has to support load balancer creation in config via a public API as well as Kubernetes knowing and supporting it.","title":"Service Types"},{"location":"gcloud/#service-network","text":"Service is not on any network we recognize Not on node or pod networks On a 3rd network known as Service Network Not a real network Every node on the network has a process running called kube-proxy Writes a bunch of IPVS/IPTABLES rules on each node Any requests to service network, rewrite headers and send to appropriate pods on pod network. Since Kubernetes 1.2, running kube-proxy in IPTABLES mode has been the default. Good until proper scale Not designed for load balancing Kube-proxy IPVS Mode Stable (GA) since Kubernetes 1.11 Uses Linux kernel IP Virtual Server Native Layer-4 load balancer Supports more algorithms","title":"Service Network"},{"location":"gcloud/#demo","text":"Not for production use Three nodes, each with its own range of IP that it can give pods, and three pods deployed as one per node, each with an IP from those ranges.","title":"Demo"},{"location":"gcloud/#18-kubernetes-storage","text":"","title":"18. Kubernetes Storage"},{"location":"gcloud/#storage","text":"Master a few concepts, and Kubernetes storage is a breeze! High-level storage requirements Container Storage Interface (CSI) The Kubernetes PersistentVolume Subsystem StorageClasses Lab/demo Recap","title":"Storage"},{"location":"gcloud/#big-picture","text":"High-level Storage Requirements Kubernetes Volumes All about decoupling storage from Pods Exist in their own right If pod wants to use one, it needs to lay a claim to it and mount it. If pod fails, volume still exists Can share volume with multiple pods Storage is vital! File & Block First-class Citizens in Kubernetes Standards-based Pluggable backend Rich API Fundamental Storage Requirements Storage Backend Speed Replicated Resiliency etc By provider Kubernetes just provides an interface for pods to consume it Storage -> CSI -> PV Subsystem PV Subsystem PersistentVolume (PV) Storage: 20GB PersistentVolumeClaim (PVC) Ticket to use PV StorageClass (SC) Makes it dynamic","title":"Big Picture"},{"location":"gcloud/#container-storage-interface","text":"CSI Out-of-tree Open-standard CSI @ Github Not Kubernetes specific Preferred way to integrate third party storage systems with the PV subsystem","title":"Container Storage Interface"},{"location":"gcloud/#pv-and-pvc","text":"The Kubernetes PersistentVolume Subsystem Storage -> CSI -> PV Subsystem PV Has attributes such as size Storage (GCE Persistent disk (Google)) To use a PV, need a PV Claim Created with yaml file spec properties match Can't have two different claims on a PV with different policies Access Modes: RWO: ReadWriteOnce RWM: ReadWriteMany ROM: ReadOnlyMany Not all volumes support all modes A PV can only have one active PVC/AccessMode Reclaim Policy Retain Delete","title":"PV and PVC"},{"location":"gcloud/#storage-classes","text":"Storage Classes enable Dynamic Provisioning of Volumes Create your PVCs which reference a storage class name, and then you reference those PVCs in pod specs Kubernetes admin concern with parameters Developer or app concern with name Control loop in PVC Subsystem checking API Server for new PVC objects, any time it sees one, actions it.","title":"Storage Classes"},{"location":"gcloud/#19-from-code-to-kubernetes","text":"","title":"19. From Code to Kubernetes"},{"location":"gcloud/#big-picture-19","text":"Kubernetes object that references the image & code Object options Can wrap in a pod Could wrap in a high level construct such as a deployment, daemon set, or stateful set","title":"Big Picture (19)"},{"location":"gcloud/#3-stages","text":"Code Docker Build the code into an image Push image to registry Kubernetes Rolls image as Kubernetes deployment or other object","title":"3 Stages"},{"location":"gcloud/#demo-19","text":"Code on repo Dockerfile (list of instructions to build a docker image) Build image Push image Web deployment on k8s Apply service in front (web-nodeport) Load balancer (if on cloud provider)","title":"Demo (19)"},{"location":"gcloud/#20-kubernetes-deployments","text":"Declaratively!","title":"20. Kubernetes Deployments"},{"location":"gcloud/#deployment-theory","text":"Can't do empty/naked containers Must use pods Then deployments Higher level than pods Replica set Sits between deployments and pod Replica set has scaling mechanics Deploy has scaling & updates Deployment takes care of running one type of pod Declarative way to manage deployments is to make every single change that we ever make in the yml file Manifest always in sync with cluster Rolling Updates, pod by pod, with second replica set Labels! Links everything together","title":"Deployment Theory"},{"location":"gcloud/#21-kubernetes-auto-scaling-apps","text":"","title":"21. Kubernetes Auto-scaling Apps"},{"location":"gcloud/#big-picture-21","text":"Demand goes up, spin up more pods or maybe more nodes. Demand goes down, turn them off Elaboration Demand (or load) can be a lot of things CPU & memory obvious Can be messages in queue Or open connections Generally speaking, if demand goes up we add more pods, but if nodes in the cluster are full, you can't add more pods and need to add more nodes first. To automatically add more nodes we have the cluster auto-scaler To automatically add more pods we have the horizontal pod auto-scaler Load increases on app Add more pod replicas If clusters are full and there aren't any nodes with enough capacity to take new pods then those pods moves to pending. Cluster auto-scaler looks for pending pods, and adds more nodes. Brief note on Vertical Pod Autoscaler (VPA) Alpha product at time of this tutorial Getting pod scheduled with right amount of resources","title":"Big Picture (21)"},{"location":"gcloud/#horizontal-pod-autoscaler-hpa-theory","text":"All about pods Scaling pods Pod metrics Etc Pod scaling out rather than up. Automatic after initial setup Define HPA like any other resource in the API Tell it which deployment to work on (One-to-One) Set target utilization By percentage Need to create pods with resource requests Can also set limits on scaling HPA tells Deployment and Deployment tells Replica set HPA only decides when scaling needs to happen Declaratively!","title":"Horizontal Pod Autoscaler (HPA) Theory"},{"location":"gcloud/#cluster-autoscaler-theory","text":"Tied to underlying cloud platform Build cluster with autoscaling enabled Configure pools of like-nodes Also tied to K8s service Only works if you configure pods with resource requests Looks at what has been collectively requested Cluster Autoscaler Works on requested values Horizontal Pod Autoscaler Works on actual values For autoscaling to work properly, need to set up and do everything else properly, especially resource requests Checks every 10 seconds Warnings Don't try to manually manage pods, node pools Check your cloud for support, they vary Test performance on big clusters","title":"Cluster Autoscaler Theory"},{"location":"gcloud/#22-kubernetes-security","text":"","title":"22. Kubernetes Security"},{"location":"gcloud/#rbac-and-admission-control","text":"Focus on access to the API server and in particular the role based access control bits.","title":"RBAC and Admission Control"},{"location":"gcloud/#big-picture-22","text":"API centric Means everything in the cluster revolves around the API server Lots of options to lock it down REST based CRUD style operations kubectl Nodes Scheduler Controllers Every member of control plane is also a client Have to go through process Client (HTTPS) Self signed certificates out-of-the-box authN phase Prove your ID authZ phase Is user allowed to perform action Admission Control Mutate & validate Schema validation Instantiated on cluster This flow assumes we're hitting API server on the secure port Some installations open an insecure local port on the Masters Disable for prod Can differ by installation RBAC Additive deny-by-default system Have to add allow rules","title":"Big Picture (22)"},{"location":"gcloud/#authentication-authn","text":"All about proving you are who you say you are Client -- Request (with creds) --> API API checks with Authentication module Yes/No back to API Configurable Out-of-the-Box options Bearer tokens Client certs Bootstrap tokens External systems Kubernetes does not do Users! Manage Users externally IAM Active Directory Etc.. Kubernetes cluster with CA Mint user certs with CA Embed user names in the CN property of the cert and any groups get listed as organizations or O property Create kubectl context so that certificate gets embedded with all future commands Good to go! Service Accounts Are stored in kubernetes Not for us devs, but used for system componants and other parts of control plane Managed by Kubernetes You can (should) manage them","title":"Authentication (AuthN)"},{"location":"gcloud/#authorization-authz","text":"Who (Subject) can perform which actions (Verb) on which resources (pods, deployments, etc)? Need to explicitly create some allow rules Powerful default users (Too powerful for production) New cluster, get context and a user with mega permissions RBAC (Role Based Access Control) Roles & RoleBindings (for least privilege) All about the rules Roles Which operations on which resources RoleBinding Who can do this, what user Namespace scoped and cluster scoped New cluster gets a bunch of pre-created cluster roles and cluster role bindings Docker-for-desktop example In summary RBAC denies everything by default Get around it by using powerful pre-created accounts","title":"Authorization (AuthZ)"},{"location":"gcloud/#admission-control","text":"Kicks in after authN and authZ Deals with policy enforcement Can be used with Webhooks for External admission controller Needs to be secure! Needs to work solidly or it has potential to break all requests into API server Two main types Mutating Modifying requests Validating All have to except, single no stops request","title":"Admission Control"},{"location":"gcloud/#23-more-kubernetes-stuff","text":"","title":"23. More Kubernetes Stuff"},{"location":"gcloud/#other-kubernetes-stuff","text":"Few things high on list of things to look at next. DaemonSets Like deployments, they manage pods. Instead of being about scaling, these are about making sure a particular pod is running on every node. StatefulSets Bring benefits of Kubernetes to stateful bits of app Jobs For running a specified number of pods and making sure they complete CronJobs Run against a schedule Configure with pod spec Gets pods that run when you want them to PodSecurityPolicy List a bunch of things a pod has to conform to Deny access to specific things, etc Pod resource requests and limits Right way to do things and feeds into other things ResourceQuotas Lets you set limits against namespaces CustomResourceDefinition Extensibility of the API Extend the API in your local cluster","title":"Other Kubernetes Stuff"},{"location":"gcloud/#25-gae-google-app-engine","text":"What is it? In scope of the exam Different The OG The original google cloud service Fairly easy to learn the basics Good test of your independence Deeper than it first seems Powerful","title":"25. GAE: Google App Engine"},{"location":"gcloud/#26-services-breadth","text":"","title":"26. Services Breadth"},{"location":"gcloud/#changing-gears-to-breadth","text":"Google Products List Page","title":"Changing GEars to Breadth"},{"location":"gcloud/#compute","text":"","title":"Compute"},{"location":"gcloud/#compute-engine-gce","text":"Compute Engine (GCE) Comparable to AWS EC2 or VMware","title":"Compute Engine (GCE)"},{"location":"gcloud/#google-kubernetes-engine-gke","text":"Google Kubernetes Engine (GKE) Comparable to AWS EC2 Container Service (ECS & EKS) Probably use Docker","title":"Google Kubernetes Engine (GKE)"},{"location":"gcloud/#app-engine-gae","text":"App Engine (GAE) Comparable to AWS Elastic Beanstalk or Heroku","title":"App Engine (GAE)"},{"location":"gcloud/#google-cloud-functions-gcf","text":"Google Cloud Functions (GCF) Comparable to AWS Lambda functions","title":"Google Cloud Functions (GCF)"},{"location":"gcloud/#storage-services","text":"","title":"Storage Services"},{"location":"gcloud/#local-ssds","text":"Local SSDs Comparable to AWS EC2 Instance Store Vols. or Direct-Attached Storage (DAS)","title":"Local SSDs"},{"location":"gcloud/#persistent-disk-pd","text":"Persistent Disk Comparable to AWS Elastic Block Storage (EBS) or Storage Area Network (SAN)","title":"Persistent Disk (PD)"},{"location":"gcloud/#cloud-filestore","text":"Cloud Filestore Comparable to AWS Elastic File System (EFS) or Network-Attached Storage (NAS)","title":"Cloud Filestore"},{"location":"gcloud/#cloud-storage-gcs","text":"Cloud Storage Comparable to Amazon S3 or Amazon Glacier","title":"Cloud Storage (GCS)"},{"location":"gcloud/#databases","text":"","title":"Databases"},{"location":"gcloud/#cloud-sql","text":"Cloud SQL Comparable to Amazon RDS or Self-Managed MySQL","title":"Cloud SQL"},{"location":"gcloud/#cloud-spanner","text":"Cloud Spanner Comparable to Sharded MySQL or CockroachDB Cloud Spanner Instance Configuration","title":"Cloud Spanner"},{"location":"gcloud/#big-query","text":"Big Query Comparable to Amazon Redshift, Amazon Athena, Presto Big Query Under the hood","title":"Big Query"},{"location":"gcloud/#cloud-bigtable","text":"Cloud Bigtable Comparable to DynamoDB, Cassandra, Apache HBASE","title":"Cloud Bigtable"},{"location":"gcloud/#cloud-datastore","text":"Cloud Datastore Comparable to DynamoDB, MongoDB Cloud Datastore Queries","title":"Cloud Datastore"},{"location":"gcloud/#firebase-dbs","text":"Firebase DBs Comparable to ELB + DynamoDB + EC2 + Socket.io + MongoDB + NGINX","title":"Firebase DBs"},{"location":"gcloud/#data-transfer","text":"","title":"Data Transfer"},{"location":"gcloud/#data-transfer-appliance","text":"Data Transfer Appliance Comparable to AWS Snowball","title":"Data Transfer Appliance"},{"location":"gcloud/#storage-transfer-service","text":"Storage Transfer Service","title":"Storage Transfer Service"},{"location":"gcloud/#external-networking","text":"","title":"External Networking"},{"location":"gcloud/#google-domains","text":"Google Domains Comparable to Amazon Route 53, GoDaddy","title":"Google Domains"},{"location":"gcloud/#cloud-dns","text":"Cloud DNS Comparable to Amazon Route 53, Dyn","title":"Cloud DNS"},{"location":"gcloud/#static-ips","text":"Static IPs Comparable to AWS's Elastic IP Address","title":"Static IPs"},{"location":"gcloud/#cloud-load-balancing-clb","text":"Cloud Load Balancing Comparable to AWS's Elastic Load Balancing, HA Proxy, NGINX","title":"Cloud Load Balancing (CLB)"},{"location":"gcloud/#cloud-cdn","text":"Cloud CDN Comparable to Amazon Cloudfront, Akamai, Cloudflare","title":"Cloud CDN"},{"location":"gcloud/#internal-networking","text":"","title":"Internal Networking"},{"location":"gcloud/#virtual-private-cloud-vpc","text":"Virtual Private Cloud Comparable to Amazon VPC, OpenFlow","title":"Virtual Private Cloud (VPC)"},{"location":"gcloud/#cloud-interconnect","text":"Cloud Interconnect","title":"Cloud Interconnect"},{"location":"gcloud/#cloud-vpn","text":"Cloud VPN Comparable to AWS VPN, OpenVPN","title":"Cloud VPN"},{"location":"gcloud/#dedicated-interconnect","text":"Dedicated Interconnect Comparable to AWS Direct Connect","title":"Dedicated Interconnect"},{"location":"gcloud/#cloud-router","text":"Cloud Router","title":"Cloud Router"},{"location":"gcloud/#cdn-interconnect","text":"CDN Interconnect","title":"CDN Interconnect"},{"location":"gcloud/#machine-learning-ai","text":"","title":"Machine Learning / AI"},{"location":"gcloud/#cloud-machine-learning-engine","text":"Cloud Machine Learning Engine Comparable to Amazon SageMaker, TensorFlow, Apache MXNet","title":"Cloud Machine Learning Engine"},{"location":"gcloud/#cloud-vision-api","text":"Cloud Vision API Comparable to Amazon Rekognition","title":"Cloud Vision API"},{"location":"gcloud/#cloud-speech-api","text":"Cloud Speech API","title":"Cloud Speech API"},{"location":"gcloud/#cloud-natural-language-api","text":"Cloud Natural Language API","title":"Cloud Natural Language API"},{"location":"gcloud/#cloud-translation-api","text":"Cloud Translation API Comparable to","title":"Cloud Translation API"},{"location":"gcloud/#dialogflow","text":"DialogFlow Comparable to Amazon Lex","title":"DialogFlow"},{"location":"gcloud/#cloud-video-intelligence-api","text":"Cloud Video Intelligence API","title":"Cloud Video Intelligence API"},{"location":"gcloud/#cloud-job-discovery","text":"Cloud Job Discovery","title":"Cloud Job Discovery"},{"location":"gcloud/#big-data-and-iot","text":"","title":"Big Data and IoT"},{"location":"gcloud/#big-data-lifecycle","text":"","title":"Big Data Lifecycle"},{"location":"gcloud/#cloud-internet-of-things-iot-core","text":"Cloud IoT Core Comparable to AWS IoT, Custom Management","title":"Cloud Internet of Things (IoT) Core"},{"location":"gcloud/#cloud-pub-sub","text":"Cloud Pub-Sub Comparable to Amazon SNS, Amazon SQS, RabbitMQ, Amazon Kinesis, Apache Kafka","title":"Cloud Pub-Sub"},{"location":"gcloud/#cloud-dataprep","text":"Cloud Dataprep Comparable to AWS Glue, Informatica PowerCenter somwewhat, moreso OpenRefine, MatLab, or Excel Managed by Trifacta, not Google","title":"Cloud Dataprep"},{"location":"gcloud/#cloud-dataproc","text":"Cloud Dataproc Comparable to Amazon EMR, Spark, Hadoop","title":"Cloud Dataproc"},{"location":"gcloud/#cloud-dataflow","text":"Cloud Dataflow Comparable to Amazon EMR, Spark, Hadoop, and Apache Beam","title":"Cloud Dataflow"},{"location":"gcloud/#cloud-datalab","text":"Cloud Datalab Comparable to Jupyter Notebook, uses this","title":"Cloud Datalab"},{"location":"gcloud/#cloud-data-studio","text":"Cloud Data Studio Comparable to Amazon QuickSight, Tableau","title":"Cloud Data Studio"},{"location":"gcloud/#cloud-geonomics","text":"Cloud Geonomics Comparable to Global Alliance for Genomics & Health","title":"Cloud Geonomics"},{"location":"gcloud/#identify-and-access-core-security","text":"GCP Security Overview","title":"Identify and Access - Core Security"},{"location":"gcloud/#roles","text":"Roles Comparable to AWS IAM Policies","title":"Roles"},{"location":"gcloud/#cloud-iam","text":"Cloud IAM Comparable to AWS IAM","title":"Cloud IAM"},{"location":"gcloud/#service-accounts","text":"Service Accounts Comparable to AWS IAM Roles","title":"Service Accounts"},{"location":"gcloud/#cloud-identity","text":"Cloud Identity Comparable to AWS IAM, G Suite, Gmail/Google Account, Active Directory","title":"Cloud Identity"},{"location":"gcloud/#security-key-enforcement","text":"Security Key Enforcement","title":"Security Key Enforcement"},{"location":"gcloud/#cloud-resource-manager","text":"Cloud Resource Manager Comparable to AWS Organizations","title":"Cloud Resource Manager"},{"location":"gcloud/#cloud-identity-aware-proxy-iap","text":"Cloud IAP Comparable to Amazon API Gateway","title":"Cloud Identity-Aware Proxy (IAP)"},{"location":"gcloud/#cloud-audit-logging","text":"Cloud Audit Logging Comparable AWS CloudTrail","title":"Cloud Audit Logging"},{"location":"gcloud/#security-management-monitoring-and-response","text":"","title":"Security Management - Monitoring and Response"},{"location":"gcloud/#cloud-armor","text":"Cloud Armor Comparable to AWS Shield + AWS WAF","title":"Cloud Armor"},{"location":"gcloud/#cloud-security-scanner","text":"Cloud Security Scanner Comparable to Amazon Inspector, Trustwave App Scanner, Qualys Web Application Scanning","title":"Cloud Security Scanner"},{"location":"gcloud/#cloud-data-loss-prevention-api-dlp","text":"Cloud DLP API Comparable to AWS Macie","title":"Cloud Data Loss Prevention API (DLP)"},{"location":"gcloud/#event-threat-detection-etd","text":"Event Threat Detection Comparable to Amazon GuardDuty, Splunk","title":"Event Threat Detection (ETD)"},{"location":"gcloud/#cloud-security-command-center-scc","text":"Cloud Security Command Center Comparable to AWS Security Hub, Splunk Enterprise Security, Sumo Logic Getting Started With SCC What is SIEM? (Youtube)","title":"Cloud Security Command Center (SCC)"},{"location":"gcloud/#encryption-key-management","text":"","title":"Encryption Key Management"},{"location":"gcloud/#cloud-key-management-service","text":"Cloud KSS Comparable to AWS KMS, HashiCorp Vault","title":"Cloud Key Management Service"},{"location":"gcloud/#cloud-hardware-security-module","text":"Cloud HSM Comparable to AWS CloudHSM, SafeNet HSM","title":"Cloud Hardware Security Module"},{"location":"gcloud/#operations-and-management","text":"","title":"Operations and Management"},{"location":"gcloud/#google-stackdriver","text":"Stackdriver Comparable to Amazon CloudWatch","title":"Google Stackdriver"},{"location":"gcloud/#stackdriver-monitoring","text":"Stackdriver Monitoring Comparable to CloudWatch Metrics & Dashboards, Datadog, collectd","title":"Stackdriver Monitoring"},{"location":"gcloud/#stackdriver-logging","text":"Stackdriver Logging Comparable to CloudWatch Logs, Splunk, Fluentd","title":"Stackdriver Logging"},{"location":"gcloud/#stackdriver-error-reporting","text":"Stackdriver Error Reporting Comparable to Rollbar, Bugsnag","title":"Stackdriver Error Reporting"},{"location":"gcloud/#stackdriver-trace","text":"Stackdriver Trace Comparable to AWS X-Ray, ZipKin, OpenTracing","title":"Stackdriver Trace"},{"location":"gcloud/#stackdriver-debugger","text":"Stackdriver Debugger","title":"Stackdriver Debugger"},{"location":"gcloud/#stackdriver-profiler","text":"Stackdriver Profiler Comparable to AWS CloudFormation, HashiCorp Terraform","title":"Stackdriver Profiler"},{"location":"gcloud/#cloud-deployment-manager-rundown","text":"Cloud Deployment Manager Comparable to AWS CloudFormation, HashiCorp Terraform","title":"Cloud Deployment Manager Rundown"},{"location":"gcloud/#cloud-billing-api","text":"Cloud Billing API Comparable to AWS Billing API, Excel","title":"Cloud Billing API"},{"location":"gcloud/#development-and-apis","text":"","title":"Development and APIs"},{"location":"gcloud/#cloud-source-repositories","text":"Cloud Source Repositories Comparable to AWS CodeCommit, GitHub","title":"Cloud Source Repositories"},{"location":"gcloud/#cloud-build","text":"Cloud Build Comparable to Amazon CodeBuild, Travis CI, Jenkins","title":"Cloud Build"},{"location":"gcloud/#container-registry-gcr","text":"Container Registry Comparable to Amazon ECR, Docker Hub","title":"Container Registry (GCR)"},{"location":"gcloud/#cloud-endpoints","text":"Cloud Endpoints Cloud Endpoints Architecture Cloud Endpoints gRPC Transcoding Comparable to Amazon API Gateway, NGINX","title":"Cloud Endpoints"},{"location":"gcloud/#apigee","text":"Apigee Comparable to Amazon API Gateway + AWS Shield, CA API Gateway","title":"Apigee"},{"location":"gcloud/#test-lab-for-android","text":"Test Lab for Android Comparable to AWS Device Farm, Xamarin Test Cloud, Sauce Labs Mobile Testing","title":"Test Lab for Android"},{"location":"gcloud/#27-system-of-services","text":"","title":"27. System of Services"},{"location":"gcloud/#putting-it-all-together","text":"","title":"Putting it all Together"},{"location":"gcloud/#example-systems","text":"Project Treehouse","title":"Example Systems"},{"location":"gcloud/#api-hosting","text":"","title":"API Hosting"},{"location":"gcloud/#jenkins-on-kubernetes","text":"","title":"Jenkins on Kubernetes"},{"location":"gcloud/#log-processing","text":"","title":"Log Processing"},{"location":"gcloud/#live-streaming","text":"","title":"Live Streaming"},{"location":"gcloud/#shopping-cart-analysis","text":"","title":"Shopping Cart Analysis"},{"location":"js/","text":"Javascript Usage and History Web Browsers Applications Desktop - Electron Mobile - Cordova Server - Node.js History / Versions 1995 - Created 1997 - Standardizing 1999 - ECMAScript 3 2009 - ECMAScript 5 2015 ECMAScript 2015 (ES6) Yearly updates since Language Features Constants - variable that cannot change const Must be initiated - const x = 2 Variable Declarations let Cannot be called before declared Has block scoping var undefined before declaration Rest Parameters The rest or remaining parameters Must be last argument function x(z, ...y) z - named parameter ...y - rest parameter, as array Destructuring Arrays Assign values in array to variables let carIds = [1, 2, 5]; let [car1, car2, car3] = carIds; // with rest parameters: let car1, remainingCars; [car1, ...remainingCars] = carIds // log // 1 [2, 5] Destructuring Objects { } instead of [ ] for objects let car = { id: 5000, style: \"convertible\" } let { id, style } = car; // log // 5000, convertible Put destructuring in ( ) if variables already declared let id, style; ({id, style} = car); Spread Syntax Take array, spread out elements for parameters Similar to rest syntax, does the opposite let carIds = [100, 300, 500]; startCars(...carIds); Can iterate through arrays and strings typeof() Returns a string typeof(1); // 'number' typeof(true); // 'boolean' typeof('Hello') // 'string' typeof(function() {}); // 'function' typeof({}); // 'object' typeof(null); // 'object' typeof(undefined) // 'undefined' typeof(NaN); // 'number' // NaN - not a number Common Type Conversions Convert to string - foo.toString(); String to integer - Number.parseInt('55'); String to number - Number.parseFloat('55.99'); Controlling Loops Use break to get out of a loop Use continue to finish iteration (without rest of body) Operators Equality operators (var1 == var2) - JS will attempt to convert to matching types for comparison (var1 === var2) - No conversion, types must be equal. 'Strict Equality' Unary operators ++var or var++ - Increment --var or var-- - Decrement +var - string to numertical type -var - negation, changes sign of numeric type Logical (Boolean) operators && - AND || - OR ! - NOT, convert to bool, flip Relational Operators Compared by ASCII > , >= - greater than, greater than or equal to < , <= - less than, less than or equal to Conditional Operators ? used in shorthand if condition ? exprIfTrue : exprIfFalse ex: console.log((5>4) ? 'yes' : 'no'); // yes Assignment Operators +=, -=, /=, *=, %= <<= - shift bits to left >>= - shift bits to right >>>= - shift but keep the sign Operator Precendence Full Chart Highest to Lowest Grouping (...) Multiplication, Division, Remainder Addition, Subtraction Logical AND Logical OR Functions and Scope Function scope Variables that can be accessed with a function of a nested function lifetime If not available in function, looks to parent function Block scope { } not in a function Using let for block scope No block scope for var , no such thing for these IIFE's - Immediately Invoked Function Expression ex: (function () { console.log('in function'); })(); // can return values this way let app = (function () { let carId = 123; console.log('in function'); return {}; })(); console.log(app); // [Function: app] Closures Keeping a function, it's variables and nested function in scope ex: let app = (function() { let carId = 123; let getId = function() { return carId; }; return { getId: getId // reference }; })(); console.log(app.getId()); // 123 The this keyword Context for the function ex: let o = { carId: 123, getId: function() { return this.carId; } }; console.log(o.getId()); // 123 Context can change, ie this value can change Call and apply Change values of this to change the object which is the context of the function With previous example: // call ex: let newCar = { carId: 456 }; console.log(o.getId.call(newCar)); //456 // apply ex /* getId: function (prefix) { return prefix + this.carId; } */ console.log(o.getId.apply(newCar, ['id: '])) // ID: 456 Call and apply similar, except apply accepts array of args Bind Make copy of a function and change context / this value. let newFn = o.getId.bind(newCar); Arrow Functions Function declarations Arrow function symbol: => let getId = () => 123; //no params More examples let getId = prefix => prefix + 123; console.log(getId('ID: ')); // ID: 123 let getId = (prefix, suffix) => prefix + 123 + suffix; console.log(getId('ID: ', '!')); // ID: 123! // with braces / return keyword required let getId = (prefix, suffix) => { return prefix + 123 + suffix; }; // same result as previous // use with underscore: let getId = _ => 123; Arrow functions do NOT have their own this value. this refers to enclosing context Default Parameters ex: let trackCar = function(carId, city='NY') { // using backticks for interpreting variables console.log(`Tracking ${carId} in ${city}.`); } Like other defaults, must be on right side. Default overwritten if defined. Objects and Arrays Constructor Functions Examples function Car() { } // capitalized name as convention` let car = new Car(); function Car(id) { this.carId = id; } let car = new Car(123); console.log(car.carId); // 123 Method: function run on an object function Car(id) { this.carId = id; this.start = function () { console.log('Start: ' + this.carId); }; } let vehicle = new Car(123); vehicle.start(); // Start: 123 Prototypes // using previous example Car.prototype.start = function() { console.log('Start: ' + this.carId); } // single copy, instead of one function for each object Expanding Objects using Prototypes Give new functionality to objects String.prototype.hello = function() { return this.toString() + ' Hello'; }; console.log('foo'.hello()); // foo Hello Javascript Object Notation (JSON) let car = { id: 123, style: 'convertible' }; console.log(JSON.stringify(car)); // { \"id\": 123, \"style\": \"convertible\" } // Array to JSON let carIds = [ { carId: 123 }, { carId: 456 }, { carId: 789 } ]; console.log(JSON.stringify(carIds)); // [{ \"carId\": 123 }, { \"carId\": 456 }, ...] // Parsing JSON: let jsonIn = [{ \"carId\": 123 }, { \"carId\": 456 }, { \"carId\": 789 }]; let carIds = JSON.parse(jsonIn); // log: [ { carId: 123 }, { carId: 456 }, { carId: 789 } ] Array Iteration Examples: carIds.foreach(car => console.log(car)); carIds.foreach((car, index) => console.log(car, index)); // only some elements let convertibles = carIds.filter(car => car.style === 'convertible'); // every case. find, condition, T/F, all elements let result = carIds.every(car => car.carId > 0); // true // retrieve first instance matching condition let car = carIds.find(car => car.carId > 500); Classes and Modules Class Basics class Car { }; let car = new Car(); Constructors and properties constructor - function executed when new instance of a class is created javascript class Car() { constructor(id) { // constructor this.id = id; // property } } // car.id to access property directly Methods No function keyword needed Example within class Car javascript identify(params) { return `Car Id: ${this.id}`; // dont need `this` to access } Inheritance Example: class Car extends Vehicle { constructor() { super(); // refers back to parent Vehicle } start() { return 'In Car Start' + super.start(); } } Creating and Importing a Module Create & Export export class Car { ... } Import import { Car } from './models/car.js' Programming the BOM and DOM BOM - Browser Object Model DOM - Document Object Model Window Object Global object Properties document location console innerHeight innerWidth pageXOffset pageYOffset Methods alert() back() confirm() Events ( not common ) gGlobal object, must refer when dealing with modules Timers fire asynchronously setTimeout(); // once setInterval(); // repeatedly ```javascript let timeoutId = setTimeout(function() { console.log('1 second paused'); }, 1000); // cancel clearTimeout(timeoutId); // or clearTimeout(id); ``` Location object Properties href (URL) hostname port pathname search Methods assign() reload() ex: location.href or document.location.href Document Object Properties body forms links Methods createElement() createEvent() getElementById() getElementsByClassName() Events onload onclick onKeypress Selecting DOM Elements Common: document.getElementById('elementId'); document.getElementByClassName('className'); document.getElementByTagName('tagName'); Modifying DOM Elements Example: javascript let el = document.getElementById('elementId'); el.textContent = 'new text here'; el.setAttribute('name', 'nameValue'); el.classList.add('myClassName'); el.style.color = 'blue'; Promises and Error Handling Errors in Javascript let car = newCar; // reference error, execution stops Error Handling with try and catch javascript try { let car = newCar; } catch (error) { console.log('error: ', error); } // continue execution With finally (always executes) ```javascript finally { console.log('this always executes'); } Developer defined errors javascript try { throw new Error('any custom error'); } Creating a Promise Temporary holder for a value you will retrieve after asynchronous call javascript let promise = new Promise ( function(resolve, reject) { setTimeout(resolve, 100, 'someValue'); } ); Setting a Promise javascript promise.then( value => console.log('fulfilled: ' + value); error => console.log('rejected: ' + error); ); Data Access Using HTTP HTTP Requests using XHR XML HTTP Requests javascript let xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { console.log(this.responseText); } }; xttp.open(\"GET\", \"http://myid.mockapi.io/api/v1/users\", true); xttp.send(); HTTP Requests with jQuery ```javascript import $ from 'jquery'; let promise = $.get( \"http://myid.mockapi.io/api/u1/users\", data => console.log('data: ', data) ); // returns promise promise.then( data => console.log('success', data), error => console.log('error: ', error) ); // POST $.post(\"url\", user); // user -> data ``` Forms Preventing Form Submission Form -> .js -> Server submit event ```javascript let form = document.getElementById('user-form'); form.addEventListener('submit', event => { // prevent browser from submitting event.preventDefault(); }); ``` Accessing Form Fields form.addEventListener('submit', event => { let user = form.elements['user']; let avatarFile = form.elements['avatar-file']; console.log(user.value, avatarFile.value); }); Showing Validation Errors javascript let userError = document.getElementById('user-error'); userError.textContent = 'Invalid Entry'; userError.style.color = 'red'; user.style.borderColor = 'red'; user.focus(); Posting from Javascript post, data to object levels from form Chrome Dev Tools and Security Network >> bundle.js file Sources >> Watch, etc Don't store sensitive info on browser Security and the eval() function JS Global eval() function will execute whatever is passed Avoid eval() altogether? Script tags? Preventing Man-in-the-Middle Attacks Code put into HTML between server and intended client Use SSL, use HTTP header Cookie attributes: Secure and HttpOnly Cross-site Scripting (XSS) Files from 3rd party servers Addressing XSS attacks CSP: Content Security Policy Use HTTP Header: Content-Security-Policy CORS: Cross Origin Resource Sharing Use HTTP Header: Access-Control-Allow-Origin Building Your Application for Production Minimizing bundle file npm run dev npm run build dist folder, files for server","title":"Javascript"},{"location":"js/#javascript","text":"","title":"Javascript"},{"location":"js/#usage-and-history","text":"Web Browsers Applications Desktop - Electron Mobile - Cordova Server - Node.js History / Versions 1995 - Created 1997 - Standardizing 1999 - ECMAScript 3 2009 - ECMAScript 5 2015 ECMAScript 2015 (ES6) Yearly updates since","title":"Usage and History"},{"location":"js/#language-features","text":"","title":"Language Features"},{"location":"js/#constants-variable-that-cannot-change","text":"const Must be initiated - const x = 2","title":"Constants - variable that cannot change"},{"location":"js/#variable-declarations","text":"let Cannot be called before declared Has block scoping var undefined before declaration","title":"Variable Declarations"},{"location":"js/#rest-parameters","text":"The rest or remaining parameters Must be last argument function x(z, ...y) z - named parameter ...y - rest parameter, as array","title":"Rest Parameters"},{"location":"js/#destructuring-arrays","text":"Assign values in array to variables let carIds = [1, 2, 5]; let [car1, car2, car3] = carIds; // with rest parameters: let car1, remainingCars; [car1, ...remainingCars] = carIds // log // 1 [2, 5]","title":"Destructuring Arrays"},{"location":"js/#destructuring-objects","text":"{ } instead of [ ] for objects let car = { id: 5000, style: \"convertible\" } let { id, style } = car; // log // 5000, convertible Put destructuring in ( ) if variables already declared let id, style; ({id, style} = car);","title":"Destructuring Objects"},{"location":"js/#spread-syntax","text":"Take array, spread out elements for parameters Similar to rest syntax, does the opposite let carIds = [100, 300, 500]; startCars(...carIds); Can iterate through arrays and strings","title":"Spread Syntax"},{"location":"js/#typeof","text":"Returns a string typeof(1); // 'number' typeof(true); // 'boolean' typeof('Hello') // 'string' typeof(function() {}); // 'function' typeof({}); // 'object' typeof(null); // 'object' typeof(undefined) // 'undefined' typeof(NaN); // 'number' // NaN - not a number","title":"typeof()"},{"location":"js/#common-type-conversions","text":"Convert to string - foo.toString(); String to integer - Number.parseInt('55'); String to number - Number.parseFloat('55.99');","title":"Common Type Conversions"},{"location":"js/#controlling-loops","text":"Use break to get out of a loop Use continue to finish iteration (without rest of body)","title":"Controlling Loops"},{"location":"js/#operators","text":"","title":"Operators"},{"location":"js/#equality-operators","text":"(var1 == var2) - JS will attempt to convert to matching types for comparison (var1 === var2) - No conversion, types must be equal. 'Strict Equality'","title":"Equality operators"},{"location":"js/#unary-operators","text":"++var or var++ - Increment --var or var-- - Decrement +var - string to numertical type -var - negation, changes sign of numeric type","title":"Unary operators"},{"location":"js/#logical-boolean-operators","text":"&& - AND || - OR ! - NOT, convert to bool, flip","title":"Logical (Boolean) operators"},{"location":"js/#relational-operators","text":"Compared by ASCII > , >= - greater than, greater than or equal to < , <= - less than, less than or equal to","title":"Relational Operators"},{"location":"js/#conditional-operators","text":"? used in shorthand if condition ? exprIfTrue : exprIfFalse ex: console.log((5>4) ? 'yes' : 'no'); // yes","title":"Conditional Operators"},{"location":"js/#assignment-operators","text":"+=, -=, /=, *=, %= <<= - shift bits to left >>= - shift bits to right >>>= - shift but keep the sign","title":"Assignment Operators"},{"location":"js/#operator-precendence","text":"Full Chart Highest to Lowest Grouping (...) Multiplication, Division, Remainder Addition, Subtraction Logical AND Logical OR","title":"Operator Precendence"},{"location":"js/#functions-and-scope","text":"","title":"Functions and Scope"},{"location":"js/#function-scope","text":"Variables that can be accessed with a function of a nested function lifetime If not available in function, looks to parent function","title":"Function scope"},{"location":"js/#block-scope","text":"{ } not in a function Using let for block scope No block scope for var , no such thing for these IIFE's - Immediately Invoked Function Expression ex: (function () { console.log('in function'); })(); // can return values this way let app = (function () { let carId = 123; console.log('in function'); return {}; })(); console.log(app); // [Function: app]","title":"Block scope"},{"location":"js/#closures","text":"Keeping a function, it's variables and nested function in scope ex: let app = (function() { let carId = 123; let getId = function() { return carId; }; return { getId: getId // reference }; })(); console.log(app.getId()); // 123","title":"Closures"},{"location":"js/#the-this-keyword","text":"Context for the function ex: let o = { carId: 123, getId: function() { return this.carId; } }; console.log(o.getId()); // 123 Context can change, ie this value can change","title":"The this keyword"},{"location":"js/#call-and-apply","text":"Change values of this to change the object which is the context of the function With previous example: // call ex: let newCar = { carId: 456 }; console.log(o.getId.call(newCar)); //456 // apply ex /* getId: function (prefix) { return prefix + this.carId; } */ console.log(o.getId.apply(newCar, ['id: '])) // ID: 456 Call and apply similar, except apply accepts array of args","title":"Call and apply"},{"location":"js/#bind","text":"Make copy of a function and change context / this value. let newFn = o.getId.bind(newCar);","title":"Bind"},{"location":"js/#arrow-functions","text":"Function declarations Arrow function symbol: => let getId = () => 123; //no params More examples let getId = prefix => prefix + 123; console.log(getId('ID: ')); // ID: 123 let getId = (prefix, suffix) => prefix + 123 + suffix; console.log(getId('ID: ', '!')); // ID: 123! // with braces / return keyword required let getId = (prefix, suffix) => { return prefix + 123 + suffix; }; // same result as previous // use with underscore: let getId = _ => 123; Arrow functions do NOT have their own this value. this refers to enclosing context","title":"Arrow Functions"},{"location":"js/#default-parameters","text":"ex: let trackCar = function(carId, city='NY') { // using backticks for interpreting variables console.log(`Tracking ${carId} in ${city}.`); } Like other defaults, must be on right side. Default overwritten if defined.","title":"Default Parameters"},{"location":"js/#objects-and-arrays","text":"","title":"Objects and Arrays"},{"location":"js/#constructor-functions","text":"Examples function Car() { } // capitalized name as convention` let car = new Car(); function Car(id) { this.carId = id; } let car = new Car(123); console.log(car.carId); // 123 Method: function run on an object function Car(id) { this.carId = id; this.start = function () { console.log('Start: ' + this.carId); }; } let vehicle = new Car(123); vehicle.start(); // Start: 123","title":"Constructor Functions"},{"location":"js/#prototypes","text":"// using previous example Car.prototype.start = function() { console.log('Start: ' + this.carId); } // single copy, instead of one function for each object Expanding Objects using Prototypes Give new functionality to objects String.prototype.hello = function() { return this.toString() + ' Hello'; }; console.log('foo'.hello()); // foo Hello","title":"Prototypes"},{"location":"js/#javascript-object-notation-json","text":"let car = { id: 123, style: 'convertible' }; console.log(JSON.stringify(car)); // { \"id\": 123, \"style\": \"convertible\" } // Array to JSON let carIds = [ { carId: 123 }, { carId: 456 }, { carId: 789 } ]; console.log(JSON.stringify(carIds)); // [{ \"carId\": 123 }, { \"carId\": 456 }, ...] // Parsing JSON: let jsonIn = [{ \"carId\": 123 }, { \"carId\": 456 }, { \"carId\": 789 }]; let carIds = JSON.parse(jsonIn); // log: [ { carId: 123 }, { carId: 456 }, { carId: 789 } ]","title":"Javascript Object Notation (JSON)"},{"location":"js/#array-iteration","text":"Examples: carIds.foreach(car => console.log(car)); carIds.foreach((car, index) => console.log(car, index)); // only some elements let convertibles = carIds.filter(car => car.style === 'convertible'); // every case. find, condition, T/F, all elements let result = carIds.every(car => car.carId > 0); // true // retrieve first instance matching condition let car = carIds.find(car => car.carId > 500);","title":"Array Iteration"},{"location":"js/#classes-and-modules","text":"Class Basics class Car { }; let car = new Car();","title":"Classes and Modules"},{"location":"js/#constructors-and-properties","text":"constructor - function executed when new instance of a class is created javascript class Car() { constructor(id) { // constructor this.id = id; // property } } // car.id to access property directly","title":"Constructors and properties"},{"location":"js/#methods","text":"No function keyword needed Example within class Car javascript identify(params) { return `Car Id: ${this.id}`; // dont need `this` to access }","title":"Methods"},{"location":"js/#inheritance","text":"Example: class Car extends Vehicle { constructor() { super(); // refers back to parent Vehicle } start() { return 'In Car Start' + super.start(); } }","title":"Inheritance"},{"location":"js/#creating-and-importing-a-module","text":"Create & Export export class Car { ... } Import import { Car } from './models/car.js'","title":"Creating and Importing a Module"},{"location":"js/#programming-the-bom-and-dom","text":"BOM - Browser Object Model DOM - Document Object Model","title":"Programming the BOM and DOM"},{"location":"js/#window-object","text":"Global object Properties document location console innerHeight innerWidth pageXOffset pageYOffset Methods alert() back() confirm() Events ( not common ) gGlobal object, must refer when dealing with modules","title":"Window Object"},{"location":"js/#timers","text":"fire asynchronously setTimeout(); // once setInterval(); // repeatedly ```javascript let timeoutId = setTimeout(function() { console.log('1 second paused'); }, 1000); // cancel clearTimeout(timeoutId); // or clearTimeout(id); ```","title":"Timers"},{"location":"js/#location-object","text":"Properties href (URL) hostname port pathname search Methods assign() reload() ex: location.href or document.location.href","title":"Location object"},{"location":"js/#document-object","text":"Properties body forms links Methods createElement() createEvent() getElementById() getElementsByClassName() Events onload onclick onKeypress","title":"Document Object"},{"location":"js/#selecting-dom-elements","text":"Common: document.getElementById('elementId'); document.getElementByClassName('className'); document.getElementByTagName('tagName');","title":"Selecting DOM Elements"},{"location":"js/#modifying-dom-elements","text":"Example: javascript let el = document.getElementById('elementId'); el.textContent = 'new text here'; el.setAttribute('name', 'nameValue'); el.classList.add('myClassName'); el.style.color = 'blue';","title":"Modifying DOM Elements"},{"location":"js/#promises-and-error-handling","text":"","title":"Promises and Error Handling"},{"location":"js/#errors-in-javascript","text":"let car = newCar; // reference error, execution stops Error Handling with try and catch javascript try { let car = newCar; } catch (error) { console.log('error: ', error); } // continue execution With finally (always executes) ```javascript finally { console.log('this always executes'); } Developer defined errors javascript try { throw new Error('any custom error'); } Creating a Promise Temporary holder for a value you will retrieve after asynchronous call javascript let promise = new Promise ( function(resolve, reject) { setTimeout(resolve, 100, 'someValue'); } ); Setting a Promise javascript promise.then( value => console.log('fulfilled: ' + value); error => console.log('rejected: ' + error); );","title":"Errors in Javascript"},{"location":"js/#data-access-using-http","text":"","title":"Data Access Using HTTP"},{"location":"js/#http-requests-using-xhr","text":"XML HTTP Requests javascript let xhttp = new XMLHttpRequest(); xhttp.onreadystatechange = function() { if (this.readyState == 4 && this.status == 200) { console.log(this.responseText); } }; xttp.open(\"GET\", \"http://myid.mockapi.io/api/v1/users\", true); xttp.send(); HTTP Requests with jQuery ```javascript import $ from 'jquery'; let promise = $.get( \"http://myid.mockapi.io/api/u1/users\", data => console.log('data: ', data) ); // returns promise promise.then( data => console.log('success', data), error => console.log('error: ', error) ); // POST $.post(\"url\", user); // user -> data ```","title":"HTTP Requests using XHR"},{"location":"js/#forms","text":"","title":"Forms"},{"location":"js/#preventing-form-submission","text":"Form -> .js -> Server submit event ```javascript let form = document.getElementById('user-form'); form.addEventListener('submit', event => { // prevent browser from submitting event.preventDefault(); }); ```","title":"Preventing Form Submission"},{"location":"js/#accessing-form-fields","text":"form.addEventListener('submit', event => { let user = form.elements['user']; let avatarFile = form.elements['avatar-file']; console.log(user.value, avatarFile.value); });","title":"Accessing Form Fields"},{"location":"js/#showing-validation-errors","text":"javascript let userError = document.getElementById('user-error'); userError.textContent = 'Invalid Entry'; userError.style.color = 'red'; user.style.borderColor = 'red'; user.focus();","title":"Showing Validation Errors"},{"location":"js/#posting-from-javascript","text":"post, data to object levels from form","title":"Posting from Javascript"},{"location":"js/#chrome-dev-tools-and-security","text":"Network >> bundle.js file Sources >> Watch, etc Don't store sensitive info on browser","title":"Chrome Dev Tools and Security"},{"location":"js/#security-and-the-eval-function","text":"JS Global eval() function will execute whatever is passed Avoid eval() altogether? Script tags?","title":"Security and the eval() function"},{"location":"js/#preventing-man-in-the-middle-attacks","text":"Code put into HTML between server and intended client Use SSL, use HTTP header Cookie attributes: Secure and HttpOnly","title":"Preventing Man-in-the-Middle Attacks"},{"location":"js/#cross-site-scripting-xss","text":"Files from 3rd party servers Addressing XSS attacks CSP: Content Security Policy Use HTTP Header: Content-Security-Policy CORS: Cross Origin Resource Sharing Use HTTP Header: Access-Control-Allow-Origin","title":"Cross-site Scripting (XSS)"},{"location":"js/#building-your-application-for-production","text":"Minimizing bundle file npm run dev npm run build dist folder, files for server","title":"Building Your Application for Production"},{"location":"mean/","text":"MEAN Stack Layout backend/ app.js script.js e2e/ node_modules/ src/ ... # Other Angular Frontend Using Angular Material c:\\project> ng add @angular/material Adding Node.js & Express Backend Node Backend // backend/app.js const express = require('express'); const app = express(); app.use('/api/posts', (req, res, next) => { console.log('middleware'); next(); }); module.exports = app; Express Framework (Simple) // server.js const http = require('http'); const app = require('./backend/app'); const port = process.env.PORT || 3000; app.set('port', port); const server = http.createServer(app); server.listen(port); Express Framework (Improved) // server.js const app = require(\"./backend/app\"); const debug = require(\"debug\")(\"node-angular\"); const http = require(\"http\"); const normalizePort = val => { var port = parseInt(val, 10); if (isNaN(port)) { // named pipe return val; } if (port >= 0) { // port number return port; } return false; }; const onError = error => { if (error.syscall !== \"listen\") { throw error; } const bind = typeof port === \"string\" ? \"pipe \" + port : \"port \" + port; switch (error.code) { case \"EACCES\": console.error(bind + \" requires elevated privileges\"); process.exit(1); break; case \"EADDRINUSE\": console.error(bind + \" is already in use\"); process.exit(1); break; default: throw error; } }; const onListening = () => { const addr = server.address(); const bind = typeof port === \"string\" ? \"pipe \" + addr : \"port \" + port; debug(\"Listening on \" + bind); }; const port = normalizePort(process.env.PORT || \"3000\"); app.set(\"port\", port); const server = http.createServer(app); server.on(\"error\", onError); server.on(\"listening\", onListening); server.listen(port); Adding the GET Backend API Point // backend/app.js const express = require('express'); const app = express(); app.get('/api/posts', (req, res, next) => { const posts = [ { id: \"f01dofoen\", title: \"first server-side post\", content: \"this is coming from the server\" }, { id: \"f02dofoen\", title: \"second server-side post\", content: \"this is coming from the server!\" } ]; console.log('posts fetched from /api/posts'); res.status(200).json({ message: 'Posts fetched successfully!', posts: posts }); }); module.exports = app; Handling GET request with Angular // posts.service.ts constructor(private http: HttpClient) {} getPosts() { this.http.get<{message: string, posts: Post[]}>('http://localhost:3000/api/posts') .subscribe((postData) => { this.posts = postData.posts; this.postsUpdated.next([...this.posts]); }); } Backend: CORS and Setting Headers // backend/app.js app.use((req, res, next) => { res.setHeader(\"Access-Control-Allow-Origin\", \"*\"); res.setHeader( \"Access-Control-Allow-Header\", \"Origin, X-Requested-With, Content-Type, Accept\" ); res.setHeader( \"Access-Control-Allow-Methods\", \"GET, POST, PATCH, DELETE, OPTIONS\" ) next(); }); Adding the POST Backend API Point app.post('/api/posts', (req, res, next) => { const post = req.body; console.log(post); res.status(201).json({ message: 'Post added successfully' }); }); Integrating MongoDB What is MongoDB? A NoSQL Database which stores \"Documents\" in \"Collections\" (instead of \"Records\" in \"Tables\" as in SQL) Store Application Data Enforces no Data Schema or Relations Easily connected to Node/Express ( NOT to Angular! ) NoSQL vs SQL NoSQL MongoDB, CouchDB Enforces no Data Schema Less Focused on Relations \"Independant Documents\" Great for: Logs, Orders, (Chat) Messages SQL MySQL, MS SQL Enforces a Strict Data Schema Relations are a Core Feature Records are Related Great for: Shopping Carts, Contracts, Networks Connect Angular to the Database? NO! Secure Authentication is not really possible Full database would be exposed. Mongoose Package built on top of MongoDB driver npm i mongoose --save Constructing Post schema & model // backend/models/post.js const mongoose = require('mongoose'); const postSchema = mongoose.Schema({ title: { type: String, required: true }, content: { type: String, required: true } }); module.exports = mongoose.model('Post', postSchema); Saving a Post // backend/app.js // in app.post const post = new Post({ title: req.body.title, content: req.body.content }); post.save(); Fetch Posts from collection // backend/app.js // in app.get Post.find().then(documents => { res.status(200).json({ message: 'Posts fetched successfully!', posts: documents }); }); Delete from collection with ID // backend/app.js app.delete('/api/posts/:id', (req, res, next) => { Post.deleteOne({ _id: req.params.id }).then(result => { console.log(result); res.status(200).json({message: 'Post deleted!'}); }); }); // src/app/posts/posts.service.ts deletePost(postId: string){ this.http.delete('http://localhost:3000/api/posts/' + postId) .subscribe(() => { // console.log('Deleted!'); // updating posts const updatedPosts = this.posts.filter(post => post.id !== postId); this.posts = updatedPosts; this.postsUpdated.next([...this.posts]); }); } Adding Posts with an ID // src/app/posts/posts.service.ts addPost(title: string, content: string) { const post: Post = { id: null, title, content}; this.http .post<{message: string, postId: string}>('http://localhost:3000/api/posts', post) .subscribe(responseData => { const id = responseData.postId; post.id = id; this.posts.push(post); this.postsUpdated.next([...this.posts]); }); } // backend/app.js app.post('/api/posts', (req, res, next) => { const post = new Post({ title: req.body.title, content: req.body.content }); post.save().then(result => { console.log(result); res.status(201).json({ message: 'Post added successfully', postId: result._id }); }); }); Enchancing the App Adding Routing // src/app/app-routing.module.ts import { NgModule } from '@angular/core'; import { RouterModule, Routes } from '@angular/router'; import { PostListComponent } from './posts/post-list/post-list.component'; import { PostCreateComponent } from './posts/post-create/post-create.component'; const routes: Routes = [ { path: '', component: PostListComponent }, { path: 'create', component: PostCreateComponent } ]; @NgModule({ imports: [RouterModule.forRoot(routes)], exports: [RouterModule] }) export class AppRoutingModule {} // import to app.module.ts Header Links with RouterLink <!-- src/app/header/header.component.html --> <mat-toolbar color=\"primary\"> <span><a routerLink=\"/\">MyMessages</a></span> <ul> <li> <a routerLink=\"/create\">New Post</a> </li> </ul> </mat-toolbar> Styling Links /* src/app/header/header.component.css */ ul { list-style: none; padding: 0; margin: 0; } a { text-decoration: none; color: white; } .spacer { flex: 1 1 auto; } <!-- src/app/header/header.component.html --> <mat-toolbar color=\"primary\"> <span><a routerLink=\"/\">MyMessages</a></span> <span class=\"spacer\"></span> <ul> <li> <a mat-button routerLink=\"/create\" routerLinkActive=\"mat-accent\">New Post</a> </li> </ul> </mat-toolbar> Creating the Edit Form Using ActivatedRoute to find postId (if any) and distinguish create/edit modes // src/app/posts/post-create.component.ts (not all file contents as of this point shown here) export class PostCreateComponent implements OnInit { enteredTitle = ''; enteredContent = ''; private mode = 'create'; private postId: string; private post: Post; constructor(public postsService: PostsService, public route: ActivatedRoute) {} ngOnInit() { this.route.paramMap.subscribe((paramMap: ParamMap) => { if (paramMap.has('postId')) { this.mode = 'edit'; this.postId = paramMap.get('postId'); this.post = this.postsService.getPost(this.postId); } else { this.mode = 'create'; this.postId = null; } }); } <!-- src/app/posts/post-create.component.html (not all file contents as of this point shown here) --> <!-- edit button --> <a mat-button color=\"primary\" [routerLink]=\"['/edit', post.id]\">EDIT</a> Finishing Edit Feature Creating PUT request // backend/app.js app.put('/api/posts/:id', (req, res, next) => { const post = new Post({ _id: req.body.id, title: req.body.title, content: req.body.content }); Post.updateOne({ _id: req.params.id }, post).then(result => { console.log(result); res.status(200).json({message: 'Update Successful!'}); }); }); Adding updatePost method to Posts Service // src/app/posts/post.service.ts updatePost(id: string, title: string, content: string) { const post: Post = { id, title, content }; this.http.put('http://localhost:3000/api/posts/' + id, post) .subscribe(response => console.log(response)); } Update onAddPost to onSavePost and adding logic to differentiate modes // src/app/posts/post-create.component.ts onSavePost(form: NgForm) { if (form.invalid) { return; } if (this.mode === 'create'){ this.postsService.addPost(form.value.title, form.value.content); } else { this.postsService.updatePost(this.postId, form.value.title, form.value.content); } form.resetForm(); } Updating Posts on the Server Changing updatePost to locally update posts after successful response // src/app/posts/post.service.ts updatePost(id: string, title: string, content: string) { const post: Post = { id, title, content }; this.http.put('http://localhost:3000/api/posts/' + id, post) .subscribe(response => { const updatedPosts = [...this.posts]; const oldPostIndex = updatedPosts.findIndex(p => p.id === post.id); updatedPosts[oldPostIndex] = post; this.posts = updatedPosts; this.postsUpdated.next([...this.posts]); }); } Getting post data from server while on Post create component Add new route to backend API: // backend/app.js app.get('/api/posts/:id', (req, res, next) => { Post.findById(req.params.id).then(post => { if (post) { res.status(200).json(post); } else { res.status(404).json({message: 'Post not found!'}); } }); }); Changing getPost in Posts Service // src/app/posts/post.service.ts getPost(id: string) { return this.http.get<{_id: string, title: string, content: string}>('http://localhost:3000/api/posts/' + id); } Updating post-create method to reflect changes // src/app/posts/post-create/post-create.component.ts this.postsService.getPost(this.postId).subscribe(postData => { this.post = {id: postData._id, title: postData.title, content: postData.content}; }); Now must change ngModel in HTML file to check if post title & content exists <!-- src/app/posts/post-create.component.html --> [ngModel]=\"post?.title\" [ngModel]=\"post?.content\" Reorganizing Backend Routes Moving all routes in app.js to new folder & file backend/routes/posts.js // backend/routes/posts.js import { Router } from 'express'; const Post = require('../models/post'); const router = Router(); // ... module.exports = router; Using express router and exporting. Require in app.js and use // backend/app.js const postsRoutes = require('./routes/posts'); // ... app.use(postsRoutes); Change to limit to /api/posts routes // backend/app.js app.use('/api/posts', postsRoutes); // backend/routes/posts.js router.post('', // ... router.put('/:id', // ... // etc Adding Loading Spinners and Redirecting to Messages page on Edit/Add Use isLoading property in list and create post components Set to false initially, true when needed isLoading = false; Redirects this.router.navigate(['/']); Using mat-spinner with *ngIf <mat-spinner *ngIf=\"isLoading\"></mat-spinner> <mat-accordion multi=\"true\" *ngIf=\"posts.length > 0 && !isLoading\"> Adding Image Uploads to our App Allowing an uploaded image with Post Adding the File Input Button Adding button and an input, proxy button to input and hide <div> <button mat-stroked-button type=\"button\" (click)=\"filePicker.click()\">Pick Image</button> <input type=\"file\" #filePicker> </div> Hiding with CSS input[type=\"file\"] { visibility: hidden; } Converting the Form from a Template Driven to a Reactive Approach Going from Angular handling form, registering controls with ngModel, to Reactive with advanced features Features include custom validators We define all of this, including controls, in Reactive approach Must import to App Module: // replace FormsModule with ReactiveFormsModule in import and imports array import { ReactiveFormsModule } from '@angular/forms'; // ... imports: [ //... ReactiveFormsModule, //... ] Remove the ngModel, postForm ngForm, and validators Now create form programmatically in Typescript Starting with form Property // import & use FormGroup instead of NgForm: // import { NgForm } from '@angular/forms'; import { FormGroup } from '@angular/forms'; // ... form: FormGroup; // define in ngOnInit : this.form = new FormGroup({ title: new FormControl(null, { validators: [Validators.required, Validators.minLength(3)] }), content: new FormControl(null, { validators: [Validators.required] }) }); // for form reset, use this.form.reset() instead: this.form.reset(); // form.resetForm(); Changes to HTML: <form [formGroup]=\"form\" (submit)=\"onSavePost()\" *ngIf=\"!isLoading\"> <mat-form-field> <input matInput type=\"text\" formControlName=\"title\" placeholder=\"Post Title\"> <mat-error *ngIf=\"form.get('title').invalid\">Please enter a post title.</mat-error> </mat-form-field> Adding Image Controls to Store the Image First add change event to input control: <input type=\"file\" #filePicker (change)=\"onImagePicked($event)\"> Implement onImagePicked: onImagePicked(event: Event) { const file = (event.target as HTMLInputElement).files[0]; this.form.patchValue({ image: file }); this.form.get('image').updateValueAndValidity(); } Adding Image Preview Add to HTML template: <div class=\"image-preview\"> <img src=\"\" [alt]=\"form.value.title\"> </div> New property in TS file and access with FileReader: imagePreview: string; // ... // in onImagePicked: // ... const reader = new FileReader(); reader.onload = () => { this.imagePreview = (reader.result as string); }; reader.readAsDataURL(file); Adjust HTML element <div class=\"image-preview\" *ngIf=\"imagePreview !== '' && imagePreview\"> <img [src]=\"imagePreview\" [alt]=\"form.value.title\"> </div> Setting up a validator with Mime-Type Validator Create file mime-type.validator.ts in posts-create will be async // src/app/posts/post-create/mime-type.validator.ts import { AbstractControl } from '@angular/forms'; import { Observable, Observer } from 'rxjs'; export const mimeType = (control: AbstractControl): Promise<{[key: string]: any}> | Observable<{[key: string]: any}> => { const file = control.value as File; const fileReader = new FileReader(); const frObs = new Observable( (observer: Observer<{[key: string]: any}>) => { fileReader.addEventListener('loadend', () => { const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4); let header = ''; let isValid = false; // tslint:disable-next-line: prefer-for-of for (let i = 0; i < arr.length; i++) { header += arr[i].toString(16); } switch (header) { case '89504e47': isValid = true; break; case 'ffd8ffe0': case 'ffd8ffe1': case 'ffd8ffe2': case 'ffd8ffe3': case 'ffd8ffe8': isValid = true; break; default: isValid = false; // Or you can use the blob.type as fallback break; } if (isValid) { observer.next(null); } else { observer.next({ invalidMimeType: true }); } observer.complete(); }); fileReader.readAsArrayBuffer(file); } ); return frObs; }; Adding Server Side Upload npm i --save multer Attach to certain routes that should be able to accept files Import to backend/routes/posts.js const multer = require('multer') Use diskStorage // backend/posts.js const storage = multer.diskStorage({ destination: (req, file, cb) => { const isValid = MIME_TYPE_MAP[file.mimetype]; let error = new Error('Invalid mime type'); if (isValid) { error = null; } cb(error, 'backend/images'); }, filename: (req, file, cb) => { const name = file.originalname.toLowerCase().split(' ').join('-'); const ext = MIME_TYPE_MAP[file.mimetype]; cb(null, name + '-' + Date.now() + '.' + ext); } }); // pass as arg into post route: router.post('', multer({storage}).single('image'), (req, res, next) => { // ... Adding the code to Angular and Front-end to Upload File In addPost (posts service), now use FormData instead of JSON // posts.service.ts addPost(title: string, content: string, image: File) { // const post: Post = { id: null, title, content}; const postData = new FormData(); postData.append('title', title); postData.append('content', content); postData.append('image', image, title); this.http .post<{message: string, postId: string}>( 'http://localhost:3000/api/posts', postData ) .subscribe(responseData => { const post: Post = { id: responseData.postId, title, content }; this.posts.push(post); this.postsUpdated.next([...this.posts]); this.router.navigate(['/']); }); } Working with file URL Add to posts.js, posts.service.ts, post-create, and update models // posts.js // in router.post const url = req.protocol + '://' + req.get('host'); const post = new Post({ title: req.body.title, content: req.body.content, imagePath: url + '/images/' + req.file.filename }); // ... // use of spread syntax for post instance: message: 'Post added successfully', res.status(201).json({ message: 'Post added successfully', post: { ...createdPost, id: createdPost._id // title: createdPost.title, // content: createdPost.content, // imagePath: createdPost.imagePath } }); // posts.service.ts return { title: post.title, content: post.content, id: post._id, imagePath: post.imagePath }; // imagePath set to null for now in post-create component Fetch images on the Front-End First, in HTML <!-- post-list component in between post title and content --> <div class=\"post-image\"> <img [src]=\"post.imagePath\" [alt]=\"post.title\"> </div> Use Express & Path to serve images to front-end app.use('/images', express.static(path.join('backend/images'))); Edit/Update Posts Change our update function // posts.service.ts // in updatePost // const post: Post = { id, title, content, imagePath: null }; let postData: Post | FormData; if (typeof(image) === 'object') { postData = new FormData(); postData.append('title', title); postData.append('content', content); postData.append('image', image, title); } else { postData = { id, title, content, imagePath: image }; } Add a check for control value in mime-type validator if (typeof(control.value) === 'string') { return of(null); } Add imagePath to what getPost returns in post service getPost(id: string) { return this.http.get<{ _id: string, title: string, content: string, imagePath: string }>('http://localhost:3000/api/posts/' + id); } Add a check for undefined in put request '/:id', and if it is a file, use same logic as in post request // posts.js, in router.put('/:id') let imagePath = req.body.imagePath; if (req.file) { const url = req.protocol + '://' + req.get('host'); imagePath = url + '/images/' + req.file.filename } const post = new Post({ _id: req.body.id, title: req.body.title, content: req.body.content, imagePath }); Also must append id to prevent new one being generated in updatePost within post service: postData.append('id', id); Adding Pagination Sets of Posts, pages Also give user flexibility to decide # of posts on page. Use Angular Material import { ..., ... MatPaginatorModule, ... } from '@angular/material'; imports: [..., ..., MatPaginatorModule,...] Adding the Component In post-list.component.html <mat-paginator [length]=\"totalPosts\" [pageSize]=\"postsPerPage\" [pageSizeOptions]=\"pageSizeOptions\" (page)=\"onChangedPage($event)\"></mat-paginator> In post-list.component.ts totalPosts = 10; postsPerPage = 2; pageSizeOptions = [1, 2, 5, 10]; // ... onChangedPage(pageData: PageEvent) { Fix spacing in CSS mat-paginator { margin-top: 1rem; } Working on Pagination Backend Implement pagination on get all posts using Query Parameters router.get('', (req, res, next) => { const pageSize = req.query.pagesize; const currentPage = req.query.page; const postQuery = Post.find(); if (pageSize && currentPage) { postQuery .skip(pageSize * (currentPage - 1)) .limit(pageSize); } postQuery.then(documents => { res.status(200).json({ message: 'Posts fetched successfully!', posts: documents }); }); }); Connecting the Angular Paginator to the Backend Add query params to getPosts() in posts service getPosts(postsPerPage: number, currentPage: number) { const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`; this.http .get<{ message: string, posts: any }>( 'http://localhost:3000/api/posts' + queryParams ) .pipe(map((postData) => { return postData.posts.map(post => { return { title: post.title, content: post.content, id: post._id, imagePath: post.imagePath }; }); })) .subscribe(transformedPosts => { this.posts = transformedPosts; this.postsUpdated.next([...this.posts]); }); } Adjust in list component // ngOnInit this.postsService.getPosts(this.postsPerPage, this.currentPage); //... onChangedPage(pageData: PageEvent) { this.currentPage = pageData.pageIndex + 1; this.postsPerPage = pageData.pageSize; this.postsService.getPosts(this.postsPerPage, this.currentPage); } Fetching posts correctly Display spinner by integrating isLoading to new function Adjust get all posts query router.get('', (req, res, next) => { const pageSize = +req.query.pagesize; const currentPage = +req.query.page; const postQuery = Post.find(); let fetchedPosts; if (pageSize && currentPage) { postQuery .skip(pageSize * (currentPage - 1)) .limit(pageSize); } postQuery .then(documents => { fetchedPosts = documents; return Post.count(); }) .then(count => { res.status(200).json({ message: 'Posts fetched successfully!', posts: fetchedPosts, maxPosts: count }); }); }); Update Posts Service Subject: private postsUpdated = new Subject<{posts: Post[], postCount: number}>(); Get posts getPosts(postsPerPage: number, currentPage: number) { const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`; this.http .get<{ message: string, posts: any, maxPosts: number }>( 'http://localhost:3000/api/posts' + queryParams ) .pipe( map(postData => { return { posts: postData.posts.map(post => { return { title: post.title, content: post.content, id: post._id, imagePath: post.imagePath }; }), maxPosts: postData.maxPosts }; })) .subscribe(transformedPostData => { this.posts = transformedPostData.posts; this.postsUpdated.next({posts: [...this.posts], postCount: transformedPostData.maxPosts}); }); } Finishing Touches Adjust subscribe in posts service, update and add post, to just navigate. Not needed here anymore. Change delete post to just return the http request Adjust post list component to subscribe and call get posts: onDelete(postId: string) { this.isLoading = true; this.postsService.deletePost(postId).subscribe(() => { this.postsService.getPosts(this.postsPerPage, this.currentPage); }); } Adjust subscription in post list component NgOnInit ngOnInit() { this.isLoading = true; this.postsService.getPosts(this.postsPerPage, this.currentPage); this.postsSub = this.postsService.getPostUpdateListener() .subscribe((postData: {posts: Post[], postCount: number}) => { this.isLoading = false; this.totalPosts = postData.postCount; this.posts = postData.posts; }); }","title":"MEAN"},{"location":"mean/#mean-stack","text":"","title":"MEAN Stack"},{"location":"mean/#layout","text":"backend/ app.js script.js e2e/ node_modules/ src/ ... # Other","title":"Layout"},{"location":"mean/#angular-frontend","text":"Using Angular Material c:\\project> ng add @angular/material","title":"Angular Frontend"},{"location":"mean/#adding-nodejs-express-backend","text":"","title":"Adding Node.js &amp; Express Backend"},{"location":"mean/#node-backend","text":"// backend/app.js const express = require('express'); const app = express(); app.use('/api/posts', (req, res, next) => { console.log('middleware'); next(); }); module.exports = app;","title":"Node Backend"},{"location":"mean/#express-framework-simple","text":"// server.js const http = require('http'); const app = require('./backend/app'); const port = process.env.PORT || 3000; app.set('port', port); const server = http.createServer(app); server.listen(port);","title":"Express Framework (Simple)"},{"location":"mean/#express-framework-improved","text":"// server.js const app = require(\"./backend/app\"); const debug = require(\"debug\")(\"node-angular\"); const http = require(\"http\"); const normalizePort = val => { var port = parseInt(val, 10); if (isNaN(port)) { // named pipe return val; } if (port >= 0) { // port number return port; } return false; }; const onError = error => { if (error.syscall !== \"listen\") { throw error; } const bind = typeof port === \"string\" ? \"pipe \" + port : \"port \" + port; switch (error.code) { case \"EACCES\": console.error(bind + \" requires elevated privileges\"); process.exit(1); break; case \"EADDRINUSE\": console.error(bind + \" is already in use\"); process.exit(1); break; default: throw error; } }; const onListening = () => { const addr = server.address(); const bind = typeof port === \"string\" ? \"pipe \" + addr : \"port \" + port; debug(\"Listening on \" + bind); }; const port = normalizePort(process.env.PORT || \"3000\"); app.set(\"port\", port); const server = http.createServer(app); server.on(\"error\", onError); server.on(\"listening\", onListening); server.listen(port);","title":"Express Framework (Improved)"},{"location":"mean/#adding-the-get-backend-api-point","text":"// backend/app.js const express = require('express'); const app = express(); app.get('/api/posts', (req, res, next) => { const posts = [ { id: \"f01dofoen\", title: \"first server-side post\", content: \"this is coming from the server\" }, { id: \"f02dofoen\", title: \"second server-side post\", content: \"this is coming from the server!\" } ]; console.log('posts fetched from /api/posts'); res.status(200).json({ message: 'Posts fetched successfully!', posts: posts }); }); module.exports = app;","title":"Adding the GET Backend API Point"},{"location":"mean/#handling-get-request-with-angular","text":"// posts.service.ts constructor(private http: HttpClient) {} getPosts() { this.http.get<{message: string, posts: Post[]}>('http://localhost:3000/api/posts') .subscribe((postData) => { this.posts = postData.posts; this.postsUpdated.next([...this.posts]); }); }","title":"Handling GET request with Angular"},{"location":"mean/#backend-cors-and-setting-headers","text":"// backend/app.js app.use((req, res, next) => { res.setHeader(\"Access-Control-Allow-Origin\", \"*\"); res.setHeader( \"Access-Control-Allow-Header\", \"Origin, X-Requested-With, Content-Type, Accept\" ); res.setHeader( \"Access-Control-Allow-Methods\", \"GET, POST, PATCH, DELETE, OPTIONS\" ) next(); });","title":"Backend: CORS and Setting Headers"},{"location":"mean/#adding-the-post-backend-api-point","text":"app.post('/api/posts', (req, res, next) => { const post = req.body; console.log(post); res.status(201).json({ message: 'Post added successfully' }); });","title":"Adding the POST Backend API Point"},{"location":"mean/#integrating-mongodb","text":"","title":"Integrating MongoDB"},{"location":"mean/#what-is-mongodb","text":"A NoSQL Database which stores \"Documents\" in \"Collections\" (instead of \"Records\" in \"Tables\" as in SQL) Store Application Data Enforces no Data Schema or Relations Easily connected to Node/Express ( NOT to Angular! )","title":"What is MongoDB?"},{"location":"mean/#nosql-vs-sql","text":"NoSQL MongoDB, CouchDB Enforces no Data Schema Less Focused on Relations \"Independant Documents\" Great for: Logs, Orders, (Chat) Messages SQL MySQL, MS SQL Enforces a Strict Data Schema Relations are a Core Feature Records are Related Great for: Shopping Carts, Contracts, Networks Connect Angular to the Database? NO! Secure Authentication is not really possible Full database would be exposed. Mongoose Package built on top of MongoDB driver npm i mongoose --save Constructing Post schema & model // backend/models/post.js const mongoose = require('mongoose'); const postSchema = mongoose.Schema({ title: { type: String, required: true }, content: { type: String, required: true } }); module.exports = mongoose.model('Post', postSchema); Saving a Post // backend/app.js // in app.post const post = new Post({ title: req.body.title, content: req.body.content }); post.save(); Fetch Posts from collection // backend/app.js // in app.get Post.find().then(documents => { res.status(200).json({ message: 'Posts fetched successfully!', posts: documents }); }); Delete from collection with ID // backend/app.js app.delete('/api/posts/:id', (req, res, next) => { Post.deleteOne({ _id: req.params.id }).then(result => { console.log(result); res.status(200).json({message: 'Post deleted!'}); }); }); // src/app/posts/posts.service.ts deletePost(postId: string){ this.http.delete('http://localhost:3000/api/posts/' + postId) .subscribe(() => { // console.log('Deleted!'); // updating posts const updatedPosts = this.posts.filter(post => post.id !== postId); this.posts = updatedPosts; this.postsUpdated.next([...this.posts]); }); } Adding Posts with an ID // src/app/posts/posts.service.ts addPost(title: string, content: string) { const post: Post = { id: null, title, content}; this.http .post<{message: string, postId: string}>('http://localhost:3000/api/posts', post) .subscribe(responseData => { const id = responseData.postId; post.id = id; this.posts.push(post); this.postsUpdated.next([...this.posts]); }); } // backend/app.js app.post('/api/posts', (req, res, next) => { const post = new Post({ title: req.body.title, content: req.body.content }); post.save().then(result => { console.log(result); res.status(201).json({ message: 'Post added successfully', postId: result._id }); }); });","title":"NoSQL vs SQL"},{"location":"mean/#enchancing-the-app","text":"","title":"Enchancing the App"},{"location":"mean/#adding-routing","text":"// src/app/app-routing.module.ts import { NgModule } from '@angular/core'; import { RouterModule, Routes } from '@angular/router'; import { PostListComponent } from './posts/post-list/post-list.component'; import { PostCreateComponent } from './posts/post-create/post-create.component'; const routes: Routes = [ { path: '', component: PostListComponent }, { path: 'create', component: PostCreateComponent } ]; @NgModule({ imports: [RouterModule.forRoot(routes)], exports: [RouterModule] }) export class AppRoutingModule {} // import to app.module.ts","title":"Adding Routing"},{"location":"mean/#header-links-with-routerlink","text":"<!-- src/app/header/header.component.html --> <mat-toolbar color=\"primary\"> <span><a routerLink=\"/\">MyMessages</a></span> <ul> <li> <a routerLink=\"/create\">New Post</a> </li> </ul> </mat-toolbar>","title":"Header Links with RouterLink"},{"location":"mean/#styling-links","text":"/* src/app/header/header.component.css */ ul { list-style: none; padding: 0; margin: 0; } a { text-decoration: none; color: white; } .spacer { flex: 1 1 auto; } <!-- src/app/header/header.component.html --> <mat-toolbar color=\"primary\"> <span><a routerLink=\"/\">MyMessages</a></span> <span class=\"spacer\"></span> <ul> <li> <a mat-button routerLink=\"/create\" routerLinkActive=\"mat-accent\">New Post</a> </li> </ul> </mat-toolbar>","title":"Styling Links"},{"location":"mean/#creating-the-edit-form","text":"Using ActivatedRoute to find postId (if any) and distinguish create/edit modes // src/app/posts/post-create.component.ts (not all file contents as of this point shown here) export class PostCreateComponent implements OnInit { enteredTitle = ''; enteredContent = ''; private mode = 'create'; private postId: string; private post: Post; constructor(public postsService: PostsService, public route: ActivatedRoute) {} ngOnInit() { this.route.paramMap.subscribe((paramMap: ParamMap) => { if (paramMap.has('postId')) { this.mode = 'edit'; this.postId = paramMap.get('postId'); this.post = this.postsService.getPost(this.postId); } else { this.mode = 'create'; this.postId = null; } }); } <!-- src/app/posts/post-create.component.html (not all file contents as of this point shown here) --> <!-- edit button --> <a mat-button color=\"primary\" [routerLink]=\"['/edit', post.id]\">EDIT</a>","title":"Creating the Edit Form"},{"location":"mean/#finishing-edit-feature","text":"Creating PUT request // backend/app.js app.put('/api/posts/:id', (req, res, next) => { const post = new Post({ _id: req.body.id, title: req.body.title, content: req.body.content }); Post.updateOne({ _id: req.params.id }, post).then(result => { console.log(result); res.status(200).json({message: 'Update Successful!'}); }); }); Adding updatePost method to Posts Service // src/app/posts/post.service.ts updatePost(id: string, title: string, content: string) { const post: Post = { id, title, content }; this.http.put('http://localhost:3000/api/posts/' + id, post) .subscribe(response => console.log(response)); } Update onAddPost to onSavePost and adding logic to differentiate modes // src/app/posts/post-create.component.ts onSavePost(form: NgForm) { if (form.invalid) { return; } if (this.mode === 'create'){ this.postsService.addPost(form.value.title, form.value.content); } else { this.postsService.updatePost(this.postId, form.value.title, form.value.content); } form.resetForm(); }","title":"Finishing Edit Feature"},{"location":"mean/#updating-posts-on-the-server","text":"Changing updatePost to locally update posts after successful response // src/app/posts/post.service.ts updatePost(id: string, title: string, content: string) { const post: Post = { id, title, content }; this.http.put('http://localhost:3000/api/posts/' + id, post) .subscribe(response => { const updatedPosts = [...this.posts]; const oldPostIndex = updatedPosts.findIndex(p => p.id === post.id); updatedPosts[oldPostIndex] = post; this.posts = updatedPosts; this.postsUpdated.next([...this.posts]); }); } Getting post data from server while on Post create component Add new route to backend API: // backend/app.js app.get('/api/posts/:id', (req, res, next) => { Post.findById(req.params.id).then(post => { if (post) { res.status(200).json(post); } else { res.status(404).json({message: 'Post not found!'}); } }); }); Changing getPost in Posts Service // src/app/posts/post.service.ts getPost(id: string) { return this.http.get<{_id: string, title: string, content: string}>('http://localhost:3000/api/posts/' + id); } Updating post-create method to reflect changes // src/app/posts/post-create/post-create.component.ts this.postsService.getPost(this.postId).subscribe(postData => { this.post = {id: postData._id, title: postData.title, content: postData.content}; }); Now must change ngModel in HTML file to check if post title & content exists <!-- src/app/posts/post-create.component.html --> [ngModel]=\"post?.title\" [ngModel]=\"post?.content\"","title":"Updating Posts on the Server"},{"location":"mean/#reorganizing-backend-routes","text":"Moving all routes in app.js to new folder & file backend/routes/posts.js // backend/routes/posts.js import { Router } from 'express'; const Post = require('../models/post'); const router = Router(); // ... module.exports = router; Using express router and exporting. Require in app.js and use // backend/app.js const postsRoutes = require('./routes/posts'); // ... app.use(postsRoutes); Change to limit to /api/posts routes // backend/app.js app.use('/api/posts', postsRoutes); // backend/routes/posts.js router.post('', // ... router.put('/:id', // ... // etc","title":"Reorganizing Backend Routes"},{"location":"mean/#adding-loading-spinners-and-redirecting-to-messages-page-on-editadd","text":"Use isLoading property in list and create post components Set to false initially, true when needed isLoading = false; Redirects this.router.navigate(['/']); Using mat-spinner with *ngIf <mat-spinner *ngIf=\"isLoading\"></mat-spinner> <mat-accordion multi=\"true\" *ngIf=\"posts.length > 0 && !isLoading\">","title":"Adding Loading Spinners and Redirecting to Messages page on Edit/Add"},{"location":"mean/#adding-image-uploads-to-our-app","text":"Allowing an uploaded image with Post","title":"Adding Image Uploads to our App"},{"location":"mean/#adding-the-file-input-button","text":"Adding button and an input, proxy button to input and hide <div> <button mat-stroked-button type=\"button\" (click)=\"filePicker.click()\">Pick Image</button> <input type=\"file\" #filePicker> </div> Hiding with CSS input[type=\"file\"] { visibility: hidden; }","title":"Adding the File Input Button"},{"location":"mean/#converting-the-form-from-a-template-driven-to-a-reactive-approach","text":"Going from Angular handling form, registering controls with ngModel, to Reactive with advanced features Features include custom validators We define all of this, including controls, in Reactive approach Must import to App Module: // replace FormsModule with ReactiveFormsModule in import and imports array import { ReactiveFormsModule } from '@angular/forms'; // ... imports: [ //... ReactiveFormsModule, //... ] Remove the ngModel, postForm ngForm, and validators Now create form programmatically in Typescript Starting with form Property // import & use FormGroup instead of NgForm: // import { NgForm } from '@angular/forms'; import { FormGroup } from '@angular/forms'; // ... form: FormGroup; // define in ngOnInit : this.form = new FormGroup({ title: new FormControl(null, { validators: [Validators.required, Validators.minLength(3)] }), content: new FormControl(null, { validators: [Validators.required] }) }); // for form reset, use this.form.reset() instead: this.form.reset(); // form.resetForm(); Changes to HTML: <form [formGroup]=\"form\" (submit)=\"onSavePost()\" *ngIf=\"!isLoading\"> <mat-form-field> <input matInput type=\"text\" formControlName=\"title\" placeholder=\"Post Title\"> <mat-error *ngIf=\"form.get('title').invalid\">Please enter a post title.</mat-error> </mat-form-field>","title":"Converting the Form from a Template Driven to a Reactive Approach"},{"location":"mean/#adding-image-controls-to-store-the-image","text":"First add change event to input control: <input type=\"file\" #filePicker (change)=\"onImagePicked($event)\"> Implement onImagePicked: onImagePicked(event: Event) { const file = (event.target as HTMLInputElement).files[0]; this.form.patchValue({ image: file }); this.form.get('image').updateValueAndValidity(); }","title":"Adding Image Controls to Store the Image"},{"location":"mean/#adding-image-preview","text":"Add to HTML template: <div class=\"image-preview\"> <img src=\"\" [alt]=\"form.value.title\"> </div> New property in TS file and access with FileReader: imagePreview: string; // ... // in onImagePicked: // ... const reader = new FileReader(); reader.onload = () => { this.imagePreview = (reader.result as string); }; reader.readAsDataURL(file); Adjust HTML element <div class=\"image-preview\" *ngIf=\"imagePreview !== '' && imagePreview\"> <img [src]=\"imagePreview\" [alt]=\"form.value.title\"> </div>","title":"Adding Image Preview"},{"location":"mean/#setting-up-a-validator-with-mime-type-validator","text":"Create file mime-type.validator.ts in posts-create will be async // src/app/posts/post-create/mime-type.validator.ts import { AbstractControl } from '@angular/forms'; import { Observable, Observer } from 'rxjs'; export const mimeType = (control: AbstractControl): Promise<{[key: string]: any}> | Observable<{[key: string]: any}> => { const file = control.value as File; const fileReader = new FileReader(); const frObs = new Observable( (observer: Observer<{[key: string]: any}>) => { fileReader.addEventListener('loadend', () => { const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4); let header = ''; let isValid = false; // tslint:disable-next-line: prefer-for-of for (let i = 0; i < arr.length; i++) { header += arr[i].toString(16); } switch (header) { case '89504e47': isValid = true; break; case 'ffd8ffe0': case 'ffd8ffe1': case 'ffd8ffe2': case 'ffd8ffe3': case 'ffd8ffe8': isValid = true; break; default: isValid = false; // Or you can use the blob.type as fallback break; } if (isValid) { observer.next(null); } else { observer.next({ invalidMimeType: true }); } observer.complete(); }); fileReader.readAsArrayBuffer(file); } ); return frObs; };","title":"Setting up a validator with Mime-Type Validator"},{"location":"mean/#adding-server-side-upload","text":"npm i --save multer Attach to certain routes that should be able to accept files Import to backend/routes/posts.js const multer = require('multer') Use diskStorage // backend/posts.js const storage = multer.diskStorage({ destination: (req, file, cb) => { const isValid = MIME_TYPE_MAP[file.mimetype]; let error = new Error('Invalid mime type'); if (isValid) { error = null; } cb(error, 'backend/images'); }, filename: (req, file, cb) => { const name = file.originalname.toLowerCase().split(' ').join('-'); const ext = MIME_TYPE_MAP[file.mimetype]; cb(null, name + '-' + Date.now() + '.' + ext); } }); // pass as arg into post route: router.post('', multer({storage}).single('image'), (req, res, next) => { // ...","title":"Adding Server Side Upload"},{"location":"mean/#adding-the-code-to-angular-and-front-end-to-upload-file","text":"In addPost (posts service), now use FormData instead of JSON // posts.service.ts addPost(title: string, content: string, image: File) { // const post: Post = { id: null, title, content}; const postData = new FormData(); postData.append('title', title); postData.append('content', content); postData.append('image', image, title); this.http .post<{message: string, postId: string}>( 'http://localhost:3000/api/posts', postData ) .subscribe(responseData => { const post: Post = { id: responseData.postId, title, content }; this.posts.push(post); this.postsUpdated.next([...this.posts]); this.router.navigate(['/']); }); }","title":"Adding the code to Angular and Front-end to Upload File"},{"location":"mean/#working-with-file-url","text":"Add to posts.js, posts.service.ts, post-create, and update models // posts.js // in router.post const url = req.protocol + '://' + req.get('host'); const post = new Post({ title: req.body.title, content: req.body.content, imagePath: url + '/images/' + req.file.filename }); // ... // use of spread syntax for post instance: message: 'Post added successfully', res.status(201).json({ message: 'Post added successfully', post: { ...createdPost, id: createdPost._id // title: createdPost.title, // content: createdPost.content, // imagePath: createdPost.imagePath } }); // posts.service.ts return { title: post.title, content: post.content, id: post._id, imagePath: post.imagePath }; // imagePath set to null for now in post-create component","title":"Working with file URL"},{"location":"mean/#fetch-images-on-the-front-end","text":"First, in HTML <!-- post-list component in between post title and content --> <div class=\"post-image\"> <img [src]=\"post.imagePath\" [alt]=\"post.title\"> </div> Use Express & Path to serve images to front-end app.use('/images', express.static(path.join('backend/images')));","title":"Fetch images on the Front-End"},{"location":"mean/#editupdate-posts","text":"Change our update function // posts.service.ts // in updatePost // const post: Post = { id, title, content, imagePath: null }; let postData: Post | FormData; if (typeof(image) === 'object') { postData = new FormData(); postData.append('title', title); postData.append('content', content); postData.append('image', image, title); } else { postData = { id, title, content, imagePath: image }; } Add a check for control value in mime-type validator if (typeof(control.value) === 'string') { return of(null); } Add imagePath to what getPost returns in post service getPost(id: string) { return this.http.get<{ _id: string, title: string, content: string, imagePath: string }>('http://localhost:3000/api/posts/' + id); } Add a check for undefined in put request '/:id', and if it is a file, use same logic as in post request // posts.js, in router.put('/:id') let imagePath = req.body.imagePath; if (req.file) { const url = req.protocol + '://' + req.get('host'); imagePath = url + '/images/' + req.file.filename } const post = new Post({ _id: req.body.id, title: req.body.title, content: req.body.content, imagePath }); Also must append id to prevent new one being generated in updatePost within post service: postData.append('id', id);","title":"Edit/Update Posts"},{"location":"mean/#adding-pagination","text":"Sets of Posts, pages Also give user flexibility to decide # of posts on page. Use Angular Material import { ..., ... MatPaginatorModule, ... } from '@angular/material'; imports: [..., ..., MatPaginatorModule,...]","title":"Adding Pagination"},{"location":"mean/#adding-the-component","text":"In post-list.component.html <mat-paginator [length]=\"totalPosts\" [pageSize]=\"postsPerPage\" [pageSizeOptions]=\"pageSizeOptions\" (page)=\"onChangedPage($event)\"></mat-paginator> In post-list.component.ts totalPosts = 10; postsPerPage = 2; pageSizeOptions = [1, 2, 5, 10]; // ... onChangedPage(pageData: PageEvent) { Fix spacing in CSS mat-paginator { margin-top: 1rem; }","title":"Adding the Component"},{"location":"mean/#working-on-pagination-backend","text":"Implement pagination on get all posts using Query Parameters router.get('', (req, res, next) => { const pageSize = req.query.pagesize; const currentPage = req.query.page; const postQuery = Post.find(); if (pageSize && currentPage) { postQuery .skip(pageSize * (currentPage - 1)) .limit(pageSize); } postQuery.then(documents => { res.status(200).json({ message: 'Posts fetched successfully!', posts: documents }); }); });","title":"Working on Pagination Backend"},{"location":"mean/#connecting-the-angular-paginator-to-the-backend","text":"Add query params to getPosts() in posts service getPosts(postsPerPage: number, currentPage: number) { const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`; this.http .get<{ message: string, posts: any }>( 'http://localhost:3000/api/posts' + queryParams ) .pipe(map((postData) => { return postData.posts.map(post => { return { title: post.title, content: post.content, id: post._id, imagePath: post.imagePath }; }); })) .subscribe(transformedPosts => { this.posts = transformedPosts; this.postsUpdated.next([...this.posts]); }); } Adjust in list component // ngOnInit this.postsService.getPosts(this.postsPerPage, this.currentPage); //... onChangedPage(pageData: PageEvent) { this.currentPage = pageData.pageIndex + 1; this.postsPerPage = pageData.pageSize; this.postsService.getPosts(this.postsPerPage, this.currentPage); }","title":"Connecting the Angular Paginator to the Backend"},{"location":"mean/#fetching-posts-correctly","text":"Display spinner by integrating isLoading to new function Adjust get all posts query router.get('', (req, res, next) => { const pageSize = +req.query.pagesize; const currentPage = +req.query.page; const postQuery = Post.find(); let fetchedPosts; if (pageSize && currentPage) { postQuery .skip(pageSize * (currentPage - 1)) .limit(pageSize); } postQuery .then(documents => { fetchedPosts = documents; return Post.count(); }) .then(count => { res.status(200).json({ message: 'Posts fetched successfully!', posts: fetchedPosts, maxPosts: count }); }); }); Update Posts Service Subject: private postsUpdated = new Subject<{posts: Post[], postCount: number}>(); Get posts getPosts(postsPerPage: number, currentPage: number) { const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`; this.http .get<{ message: string, posts: any, maxPosts: number }>( 'http://localhost:3000/api/posts' + queryParams ) .pipe( map(postData => { return { posts: postData.posts.map(post => { return { title: post.title, content: post.content, id: post._id, imagePath: post.imagePath }; }), maxPosts: postData.maxPosts }; })) .subscribe(transformedPostData => { this.posts = transformedPostData.posts; this.postsUpdated.next({posts: [...this.posts], postCount: transformedPostData.maxPosts}); }); }","title":"Fetching posts correctly"},{"location":"mean/#finishing-touches","text":"Adjust subscribe in posts service, update and add post, to just navigate. Not needed here anymore. Change delete post to just return the http request Adjust post list component to subscribe and call get posts: onDelete(postId: string) { this.isLoading = true; this.postsService.deletePost(postId).subscribe(() => { this.postsService.getPosts(this.postsPerPage, this.currentPage); }); } Adjust subscription in post list component NgOnInit ngOnInit() { this.isLoading = true; this.postsService.getPosts(this.postsPerPage, this.currentPage); this.postsSub = this.postsService.getPostUpdateListener() .subscribe((postData: {posts: Post[], postCount: number}) => { this.isLoading = false; this.totalPosts = postData.postCount; this.posts = postData.posts; }); }","title":"Finishing Touches"},{"location":"mern/","text":"MERN Stack Notes based on Udemy Course React, NodeJS, Express & MongoDB - The MERN Fullstack Guide 1. Introduction What is the \"MERN Stack\" M ongoDB E xpress R eact N ode.js What is React? A Client-Side (Browser) Library which allows you to build highly reactive user interfaces Render UI with Dynamic Data Handle User Input Communicate with Backend Services Provides a \"Mobile App\"-like User Experience What is Node? A Server-side Runtime: Javascript on the Server-side Listen to Requests and Send Responses Execute Server-side Logic Interact with Databases and Files An Alternative to PHP, Ruby on Rails, Java etc. Is rarely used Standalone! What is Express? A Node Framework which simplifies writing Server-side Code and Logic. Based on Node, offers same Functionalities Middleware-based: Funnel Requests through Functions Includes Routing, View-rendering & More Simplifies the Usage of Node. Express is for Node what Laravel would be for PHP. What is MongoDB? A NoSQL Database which stores \"Documents\" in \"Collections\" (instead of \"Records\" in \"Tables\" as in SQL). Store Application Data (Users, Products, ...) Enforces no Data Schema or Relations Easily connected to Node/Express (NOT to React!) A powerful Database which can easily be integrated into a Node/Express Environment MERN - A First Overview Course Outline Getting Started MERN in Theory React Frontend Components, Hooks, Routing Frontend User Input Validation Node + Express + MongoDB Backend REST API, ROutes, Controllers, Models Backend User Input Connecting Both Ends File Upload Authentication Deployment 2. The MERN Stack - Theory Understanding the Big Picture Diving into the Frontend React SPA (Single Page Application) Understanding the Backend REST vs GraphQL Connecting Node & React Diving Deeper into the Code Using simple-mern-project Backend Basic backend server setup // backend/server.js const express = require('express'); const bodyParser = require('body-parser'); const uuid = require('uuid/v4'); const app = express(); const DUMMY_PRODUCTS = []; // not a database, just some in-memory storage for now app.use(bodyParser.json()); // CORS Headers => Required for cross-origin/ cross-server communication app.use((req, res, next) => { res.setHeader('Access-Control-Allow-Origin', '*'); res.setHeader( 'Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization' ); res.setHeader( 'Access-Control-Allow-Methods', 'GET, POST, PATCH, DELETE, OPTIONS' ); next(); }); app.get('/products', (req, res, next) => { res.status(200).json({ products: DUMMY_PRODUCTS }); }); app.post('/product', (req, res, next) => { const { title, price } = req.body; if (!title || title.trim().length === 0 || !price || price <= 0) { return res.status(422).json({ message: 'Invalid input, please enter a valid title and price.' }); } const createdProduct = { id: uuid(), title, price }; DUMMY_PRODUCTS.push(createdProduct); res .status(201) .json({ message: 'Created new product.', product: createdProduct }); }); app.listen(5000); // start Node + Express server on port 5000 Frontend Components Functions or classes index.js Entry point to frontend Application App.js HTML in javascript Use React Hooks Help with managing state useState, useEffect 3. Planning the App Module Introduction General Planning Steps Come up with an idea / solve a problem Create a design / sketch Plan your data models (the data you'll work with) Plan your endpoints (API, backend) and pages (SPA, frontend) Understanding the General App Idea Data & API Endpoints used in our App Required SPA Pages for the Frontend 4. React.js - A Refresher What is React? A Javascript Library* for Building User Interfaces *started a huge eco-system, effectively forming a \"pseudo-framework\" Declarative Approach You define the result, not the steps that lead to the result Imperative Approach (\"normal JS\") You define all the steps to achieve the result You define components and build your UI with these components Setting Up a Starting Project create-react-app Understanding JSX Syntax in React HTML-like code in Javascript files Translates to instructions React understands Example: import React from 'react'; const App = () => { return <h1>A React App!</h1>; // similar to React.createElement('h1', {}, 'Hello!'); }; export default App; Similar example: const App = () => { return <h1 title=\"it works!\">Hello!</h1>; // similar to React.createElement('h1', {title: 'it works!'}, \"Hello!\"); }; Understanding Components All about Components Can be a function which returns JSC or returns React.createElement() calls. Can be a javascript class with a render method some technical differences to function in modern React, you can only use functional components ** Previous example as a class: class App extends React.Component { render() { return <h1 title=\"it works!\">Hello! This is ReactJS!</h1>; } } We'll only be using functional in this course Just a regular javascript function in the end What makes it a React component is that it returns JSX or React.createElement() logic Capitalize components in tags, otherwise will be treated as built-in HTML tag: <App /> Working with Multiple Components Must use className and not class in JSX code <div className=\"name\"> Styles all applied globally (in App.css here, at least) Styles are not automatically scoped to a component, normal CSS rules are applied, because all CSS files, no matter where you import them, are applied globally to entire page. GoalList component example: // src/components/GoalList.js import React from 'react'; import './GoalList.css'; const GoalList = () => { return ( <ul className='goal-list'> <li>Finish the Course</li> <li>Learn all about Course main topics</li> <li>Help others!</li> </ul> ); }; export default GoalList; // src/App.js import React from 'react'; import GoalList from './components/GoalList'; import './App.css'; const App = () => { return <div className=\"course-goals\"> <h2>Course Goals</h2> <GoalList /> </div>; }; export default App; Using Props to pass Data between Components Pass data from component to component with a concept called props Changing GoalList to dynamic props as GoalList parameter, object passed to React functional component automatically, object that is bundle of all the props you passed to component Rendering Lists of Data Can use hardcoded data, but need to map every object into a list item in the end. Will need to use map() JS function. Must also use unique key GoalList Example: // src/App.js const App = () => { const courseGoals = [ {id: 'cg1', text: 'Finish the course!'}, {id: 'cg2', text: 'Learn all about Course main topics'}, {id: 'cg3', text: 'Help others!'}, ]; return <div className=\"course-goals\"> <h2>Course Goals</h2> <GoalList goals={courseGoals} /> </div>; }; export default App; // src/components/GoalList.js import React from 'react'; import './GoalList.css'; const GoalList = props => { return ( <ul className='goal-list'> {props.goals.map(goal => { return <li key={goal.id}>{goal.text}</li>; })} </ul> ); }; export default GoalList; Handling Events React component must return JSX Can add event listeners to any element Will use onSubmit with form here, must point to a function (don't give parentheses) Can use onClick and others Function will get an event object as parameter passed in automatically by React Can prevent default behavior (form submission) Now pass data from NewGoal to the parent (App component) Efficient Child<=>Parent Communication Pass a callback function from the parent to the child Technically in form, used all props. No difference between class name where a string is passed and on submit where a pointer to function is passed. Can use this to pass a prop onto NewGoal in App.js, which holds pointer to a function. Example so far: // src/components/NewGoal/NewGoal.js import React from 'react'; import './NewGoal.css'; const NewGoal = props => { const addGoalHandler = event => { event.preventDefault(); const newGoal = { id: Math.random().toString(), text: 'my new goal!!' }; props.onAddGoal(newGoal); }; return <form className=\"new-goal\" onSubmit={addGoalHandler}> <input type=\"text\" /> <button type=\"submit\">Add Goal</button> </form> }; export default NewGoal; // src/App.js import React from 'react'; import GoalList from './components/GoalList/GoalList'; import NewGoal from './components/NewGoal/NewGoal'; import './App.css'; const App = () => { const courseGoals = [ {id: 'cg1', text: 'Finish the course!'}, {id: 'cg2', text: 'Learn all about Course main topics'}, {id: 'cg3', text: 'Help others!'}, ]; const addNewGoalHandler = (newGoal) => { courseGoals.push(newGoal); console.log(courseGoals); } return <div className=\"course-goals\"> <h2>Course Goals</h2> <NewGoal onAddGoal={addNewGoalHandler} /> <GoalList goals={courseGoals} /> </div>; }; export default App; Working with \"State\" Need to explicitly tell React when to update UI Do this using state Use hook function useState useState() returns array of exactly 2 elements Latest state snapshot Function that allows us to update that state and tell React it should re-render Pass courseGoals array into useState() Updated App.js: // src/App.js import React, { useState } from 'react'; import GoalList from './components/GoalList/GoalList'; import NewGoal from './components/NewGoal/NewGoal'; import './App.css'; const App = () => { const [courseGoals, setCourseGoals] = useState([ {id: 'cg1', text: 'Finish the course!'}, {id: 'cg2', text: 'Learn all about Course main topics'}, {id: 'cg3', text: 'Help others!'}, ]); const addNewGoalHandler = (newGoal) => { setCourseGoals(courseGoals.concat(newGoal)); } return <div className=\"course-goals\"> <h2>Course Goals</h2> <NewGoal onAddGoal={addNewGoalHandler} /> <GoalList goals={courseGoals} /> </div>; }; export default App; More on State State is a crucial concept in React Whenever you update the state snapshot, React does 2 things Update internally stored state data. Will then can the component function again Re-evaluates entire component, not necessarily the entire DOM useState() ignores initial and previous snapshots on update, replaces it. This is why we passed courseGoals.concat(newGoal) to setCourseGoals() This is actually not the best possible way to update state, due to deferring state updates. Better method: setCourseGoals((prevCourseGoals) => { return prevCourseGoals.concat(newGoal); }); Shorthand version: setCourseGoals(prevCourseGoals => prevCourseGoals.concat(newGoal)); Only need if state update depends on previous state data. Fetching User Input (Two-way Binding) Store user input in some variable, the pass to new goal. Using onChange event Flawed on its own here, even when giving value of variable to input tag Must use state Manipulate and reset input field Updated NewGoal.js: // src/components/NewGoal/NewGoal.js import React, { useState } from 'react'; import './NewGoal.css'; const NewGoal = props => { const [enteredText, setEnteredText] = useState(''); const addGoalHandler = event => { event.preventDefault(); const newGoal = { id: Math.random().toString(), text: enteredText }; setEnteredText(''); props.onAddGoal(newGoal); }; const textChangeHandler = event => { setEnteredText(event.target.value); }; return <form className=\"new-goal\" onSubmit={addGoalHandler}> <input type=\"text\" value={enteredText} onChange={textChangeHandler} /> <button type=\"submit\">Add Goal</button> </form> }; export default NewGoal; 5. React.js - Building the Frontend Introduction Create React (Single Page) App Add Routing & Core Pages Split Into Core Components UI Components + CSS Styling Starting Setup, Paes & Routes Two ways to organize Pages & Components folders Separate by Feature Will use this method here: places/-| |- pages/ |- components/ shared/-| |- components/ user/-| |- pages/ |- components/ Install third party routing package npm i --save react-router-dom App component will be starting point for router Route path treated as filter, use exact property. Use Redirect for others as well Use Switch to not redirect if able to find a path App.js so far: import React from 'react'; import { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'; import Users from './user/pages/Users'; import NewPlace from './places/pages/NewPlace'; const App = () => { return ( <Router> <Switch> <Route path=\"/\" exact> <Users /> </Route> <Route path=\"/places/new\" exact> <NewPlace /> </Route> <Redirect to=\"/\" /> </Switch> </Router> ); } export default App; Adding a UsersList Page / Component Wiring up User components User.js so far: // src/user/pages/User.js import React from 'react'; import UsersList from '../components/UsersList'; const Users = () => { const USERS = [ { id: 'u1', name: 'John', image: 'https://images.heb.com/is/image/HEBGrocery/cat-medium/flowers-2868.jpg', places: 3 } ]; return <UsersList items={USERS} />; }; export default Users; UsersList.js so far: import React from 'react'; import UserItem from './UserItem'; import './UsersList.css'; const UsersList = props => { if (props.items.length === 0) { return ( <div className='center'> <h2>No users found.</h2> </div> ); } return ( <ul> {props.items.map(user => ( <UserItem key={user.id} id={user.id} image={user.image} name={user.name} placeCount={user.places} /> ))} </ul> ); }; export default UsersList; UserItem.js so far: import React from 'react'; import './UserItem.css'; const UserItem = props => {}; export default UserItem; Adding a UserItem Component Added className=\"users-list\" to <ul> tag in UsersList.js UserItem.js so far: // src/user/components/UserItem.js import React from 'react'; import './UserItem.css'; const UserItem = props => { return ( <li className=\"user-item\"> <div className=\"user-item__content\"> <div className=\"user-item__image\"> <img src={props.image} alt={props.name}/> </div> <div className=\"user-item__info\"> <h2>{props.name}</h2> <h3>{props.placeCount} {props.placeCount === 1 ? 'Place' : 'Places'}</h3> </div> </div> </li> ); }; export default UserItem; Styling our App & More Components Use Avatar.js & Avatar.css and Card.js & Card.css provided for styling. Updated UserItem.js: import React from 'react'; import { Link } from 'react-router-dom'; import Avatar from '../../shared/components/UIElements/Avatar'; import Card from '../../shared/components/UIElements/Card'; import './UserItem.css'; const UserItem = props => { return ( <li className='user-item'> <Card className='user-item__content'> <Link to={`/${props.id}/places`}> <div className='user-item__image'> <Avatar image={props.image} alt={props.name} /> </div> <div className='user-item__info'> <h2>{props.name}</h2> <h3> {props.placeCount} {props.placeCount === 1 ? 'Place' : 'Places'} </h3> </div> </Link> </Card> </li> ); }; export default UserItem; Presentational vs Stateful Components Presentational Just output content, structure, styling Card/Avatar components are good examples of this. UserItem also. Stateful Smarter, manage some state, orchestrate that child components receive new data, etc. Adding a Main Header Add Card component to UsersList in event of no users. props.children special prop that React knows. Will always refer to the things you pass between your opening and closing tags of component. Placeholder for the content you enter between the opening and closing tag of your own component. // src/share/components/Navigation/MainHeader.js import React from 'react'; import './MainHeader.css'; const MainHeader = props => { return <header className='main-header'>{props.children}</header>; }; export default MainHeader; // src/share/components/Navigation/MainNavigation.js import React from 'react'; import { Link } from 'react-router-dom'; import MainHeader from './MainHeader'; import './MainNavigation.css'; const MainNavigation = props => { return ( <MainHeader> <button className='main-navigation__menu-btn'> <span /> <span /> <span /> </button> <h1 className='main-navigation__title'> <Link to='/'>YourPlaces</Link> </h1> <nav>...</nav> </MainHeader> ); }; export default MainNavigation; Adding Navlinks // src/shared/components/Navigation/NavLinks.js import React from 'react'; import { NavLink } from 'react-router-dom'; import './NavLinks.css'; const NavLinks = props => { return <ul className=\"nav-links\"> <li> <NavLink to=\"/\" exact>ALL USERS</NavLink> </li> <li> <NavLink to=\"/u1/places\">MY PLACES</NavLink> </li> <li> <NavLink to=\"/places/new\">ADD PLACE</NavLink> </li> <li> <NavLink to=\"/auth\">AUTHENTICATE</NavLink> </li> </ul> }; export default NavLinks; Then insert in MainNavigation <nav><NavLinks /></nav> Implementing a Basic Desktop & Mobile Navigation Two Main Changes Add CSS class to nav in MainNavigation.js ` Develop SideDrawer.js Note: Can only have one root jsx element per component Can use React.Fragment to fulfill this requirement. SideDrawer.js so far: import React from 'react'; import { Link } from 'react-router-dom'; import MainHeader from './MainHeader'; import NavLinks from './NavLinks'; import SideDrawer from './SideDrawer'; import './MainNavigation.css'; const MainNavigation = props => { return ( <React.Fragment> <SideDrawer> <nav className='main-navigation__drawer-nav'> <NavLinks /> </nav> </SideDrawer> <MainHeader> <button className='main-navigation__menu-btn'> <span /> <span /> <span /> </button> <h1 className='main-navigation__title'> <Link to='/'>YourPlaces</Link> </h1> <nav className='main-navigation__header-nav'> <NavLinks /> </nav> </MainHeader> </React.Fragment> ); }; export default MainNavigation; Understanding Portals Portals in React allows us to project/render a component in a different place than it would normally be rendered. Add <div id=\"drawer-hook\"></div> into index.html, in body just after no script. This is where SideDrawer will be rendered. SideDrawer.js so far: import React from 'react'; import ReactDOM from 'react-dom'; import './SideDrawer.css'; const SideDrawer = props => { const content = <aside className=\"side-drawer\">{props.children}</aside>; return ReactDOM.createPortal(content, document.getElementById('drawer-hook')); }; export default SideDrawer; Drawer still always visible, no animation. Handling the Drawer State Add <div id=\"backdrop-hook\"></div> into index.html, just before drawer hook. Backdrop.js import React from 'react'; import ReactDOM from 'react-dom'; import './Backdrop.css'; const Backdrop = props => { return ReactDOM.createPortal( <div className=\"backdrop\" onClick={props.onClick}></div>, document.getElementById('backdrop-hook') ); }; export default Backdrop; SideDrawer.js so far: import React from 'react'; import ReactDOM from 'react-dom'; import './SideDrawer.css'; const SideDrawer = props => { const content = <aside className=\"side-drawer\">{props.children}</aside>; return ReactDOM.createPortal(content, document.getElementById('drawer-hook')); }; export default SideDrawer; Animating the Sidedrawer Install third party library npm i --save react-transition-group SideDrawer.js: import React from 'react'; import ReactDOM from 'react-dom'; import { CSSTransition } from 'react-transition-group'; import './SideDrawer.css'; const SideDrawer = props => { const content = ( <CSSTransition in={props.show} timeout={200} classNames='slide-in-left' mountOnEnter unmountOnExit > <aside className='side-drawer' onClick={props.onClick}>{props.children}</aside> </CSSTransition> ); return ReactDOM.createPortal(content, document.getElementById('drawer-hook')); }; export default SideDrawer; MainNavigation.js import React, { useState } from 'react'; import { Link } from 'react-router-dom'; import MainHeader from './MainHeader'; import NavLinks from './NavLinks'; import SideDrawer from './SideDrawer'; import BackDrop from '../UIElements/Backdrop'; import './MainNavigation.css'; const MainNavigation = props => { const [drawerIsOpen, setDrawerIsOpen] = useState(false); const openDrawer = () => { setDrawerIsOpen(true); }; const closeDrawerHandler = () => { setDrawerIsOpen(false); }; return ( <React.Fragment> {drawerIsOpen && <BackDrop onClick={closeDrawerHandler} />} <SideDrawer show={drawerIsOpen} onClick={closeDrawerHandler}> <nav className='main-navigation__drawer-nav'> <NavLinks /> </nav> </SideDrawer> <MainHeader> <button className='main-navigation__menu-btn' onClick={openDrawer}> <span /> <span /> <span /> </button> <h1 className='main-navigation__title'> <Link to='/'>YourPlaces</Link> </h1> <nav className='main-navigation__header-nav'> <NavLinks /> </nav> </MainHeader> </React.Fragment> ); }; export default MainNavigation; Rendering User Places & Using Dynamic Route Segments PlaceItem.js so far: // src/places/components/PlaceItem.js import React from 'react'; import Card from '../../shared/components/UIElements/Card'; import './PlaceItem.css'; const PlaceItem = props => { return ( <li className='place-item'> <Card className='place-item__content'> <div className='place-item__image'> <img src={props.image} alt={props.title} /> </div> <div className='place-item__info'> <h2>{props.title}</h2> <h3>{props.address}</h3> <p>{props.description}</p> </div> <div className='place-item__actions'> <button>VIEW ON MAP</button> <button>EDIT</button> <button>DELETE</button> </div> </Card> </li> ); }; export default PlaceItem; PlaceList.js so far: // src/places/components/PlaceList.js import React from 'react'; import Card from '../../shared/components/UIElements/Card'; import PlaceItem from './PlaceItem'; import './PlaceList.css'; const PlaceList = props => { if (props.items.length === 0) { return ( <div className='place-list center'> <Card> <h2>No places found. Maybe create one?</h2> <button>Share Place</button> </Card> </div> ); } return ( <ul className='place-list'> {props.items.map(place => ( <PlaceItem key={place.id} id={place.id} image={place.imageUrl} title={place.title} description={place.description} address={place.address} creatorId={place.creator} coordinates={place.location} /> ))} </ul> ); }; export default PlaceList; import React from 'react'; import Card from '../../shared/components/UIElements/Card'; import PlaceItem from './PlaceItem'; import './PlaceList.css'; const PlaceList = props => { if (props.items.length === 0) { return ( <div className='place-list center'> <Card> <h2>No places found. Maybe create one?</h2> <button>Share Place</button> </Card> </div> ); } return ( <ul className='place-list'> {props.items.map(place => ( <PlaceItem key={place.id} id={place.id} image={place.imageUrl} title={place.title} description={place.description} address={place.address} creatorId={place.creator} coordinates={place.location} /> ))} </ul> ); }; export default PlaceList; UserPlaces.js so far: // src/places/pages/UserPlaces.js import React from 'react'; import PlaceList from '../components/PlaceList'; const UserPlaces = () => { const DUMMY_PLACES = [ { id: 'p1', title: 'Empire State Building', description: 'One of the most famous sky scrapers in the world!', imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/1/10/Empire_State_Building_%28aerial_view%29.jpg', address: '20 West 34th Street, New York City, NY 10118-0114', location: { lat: 40.7484405, lng: -73.9878584 }, creator: 'u1' }, { id: 1, title: 'Empire State Building', description: 'One of the most famous sky scrapers in the world!', imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/1/10/Empire_State_Building_%28aerial_view%29.jpg', address: '20 West 34th Street, New York City, NY 10118-0114', location: { lat: 40.7484405, lng: -73.9878584 }, creator: 'u2' } ]; return <PlaceList items={DUMMY_PLACES} />; }; export default UserPlaces; In App.js: // src/App.js import UserPlaces from './places/pages/UserPlaces'; // in MainNavigation: <Route path=\"/:userId/places\"> <UserPlaces /> </Route> Getting Route Params Using useParams() // src/places/pages/UserPlaces.js import { useParams } from 'react-router-dom'; // ... const UserPlaces = () => { const userId = useParams().userId; const loadedPlaces = DUMMY_PLACES.filter(place => place.creator === userId); return <PlaceList items={loadedPlaces} />; }; Adding Custom Buttons Using provided Button.js: // src/shared/components/FormElements/Button.js import React from 'react'; import { Link } from 'react-router-dom'; import './Button.css'; const Button = props => { if (props.href) { return ( <a className={`button button--${props.size || 'default'} ${props.inverse && 'button--inverse'} ${props.danger && 'button--danger'}`} href={props.href} > {props.children} </a> ); } if (props.to) { return ( <Link to={props.to} exact={props.exact} className={`button button--${props.size || 'default'} ${props.inverse && 'button--inverse'} ${props.danger && 'button--danger'}`} > {props.children} </Link> ); } return ( <button className={`button button--${props.size || 'default'} ${props.inverse && 'button--inverse'} ${props.danger && 'button--danger'}`} type={props.type} onClick={props.onClick} disabled={props.disabled} > {props.children} </button> ); }; export default Button; Use in PlaceItem.js: // src/places/components/PlaceItem.js <div className='place-item__actions'> <Button inverse>VIEW ON MAP</Button> <Button to={`/places/${props.id}`}>EDIT</Button> <Button danger>DELETE</Button> </div> Adding a Modal Modal.js: // src/shared/components/UIElements/Modal.js import React from 'react'; import ReactDOM from 'react-dom'; import { CSSTransition } from 'react-transition-group'; import Backdrop from './Backdrop'; import './Modal.css'; const ModalOverlay = props => { const content = ( <div className={`modal ${props.className}`} style={props.style}> <header className={`modal__header ${props.headerClass}`}> <h2>{props.header}</h2> <form onSubmit={ props.onSubmit ? props.onSubmit : event => event.preventDefault() } > <div className={`modal__conent ${props.contentClass}`}> {props.children} </div> <footer className={`modal__footer ${props.footerClass}`}> {props.footer} </footer> </form> </header> </div> ); return ReactDOM.createPortal(content, document.getElementById('modal-hook')); }; const Modal = props => { return ( <React.Fragment> {props.show && <Backdrop onClick={props.onCancel} />} <CSSTransition in={props.show} mountOnEnter unmountOnExit timeout={200} classNames='modal' > <ModalOverlay {...props} /> </CSSTransition> </React.Fragment> ); }; export default Modal; In PlaceItem.js src/places/components/PlaceItem.js import React, { useState } from 'react'; import Card from '../../shared/components/UIElements/Card'; import Button from '../../shared/components/FormElements/Button'; import Modal from '../../shared/components/UIElements/Modal'; import './PlaceItem.css'; const PlaceItem = props => { const [showMap, setShowMap] = useState(false); const openMapHandler = () => setShowMap(true); const closeMapHandler = () => setShowMap(false); return ( <React.Fragment> <Modal show={showMap} onCancel={closeMapHandler} header={props.address} contentClass='place-item__modal-content' footerClass='place-item__modal-actions' footer={<Button onClick={closeMapHandler}>CLOSE</Button>} > <div className=\"map-container\"> <h2>THE MAP!</h2> </div> </Modal> <li className='place-item'> <Card className='place-item__content'> <div className='place-item__image'> <img src={props.image} alt={props.title} /> </div> <div className='place-item__info'> <h2>{props.title}</h2> <h3>{props.address}</h3> <p>{props.description}</p> </div> <div className='place-item__actions'> <Button inverse onClick={openMapHandler}>VIEW ON MAP</Button> <Button to={`/places/${props.id}`}>EDIT</Button> <Button danger>DELETE</Button> </div> </Card> </li> </React.Fragment> ); }; export default PlaceItem; Rendering a Map with Google Maps Will need Google Maps SDK Script in index.html: <script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyC7ap01wqRWATA7guCbFBvIgpbYZwKQIEo\" async defer></script> Also utilize useRef & useEffect // src/shared/components/UIElements/Map.js import React, { useRef, useEffect } from 'react'; import './Map.css'; const Map = props => { const mapRef = useRef(); const { center, zoom } = props; useEffect(() => { const map = new window.google.maps.Map(mapRef.current, { center: center, zoom: zoom }); new window.google.maps.Marker({ position: center, map: map }); }, [center, zoom]); return ( <div ref={mapRef} className={`map ${props.className}`} style={props.style} ></div> ); }; export default Map; Adding a Custom Form Input Component NewPlace.js: // src/places/pages/NewPlace.js import React from 'react'; import Input from '../../shared/components/FormElements/Input'; import './NewPlace.css'; const NewPlace = () => { return ( <form className='place-form'> <Input element='input' type='text' label='Title' validators={[]} errorText='Please enter a valid title.' /> </form> ); }; export default NewPlace; Input.js: // src/shared/components/FormElements/Input.js import React from 'react'; import './Input.css'; const Input = props => { const element = props.element === 'input' ? ( <input id={props.id} type={props.type} placeholder={props.placeholder} /> ) : ( <textarea id={props.id} rows={props.rows || 3} /> ); return ( <div className={`form-control`}> <label htmlFor={props.id}>{props.label}</label> {element} </div> ); }; export default Input; Managing State in the Input Component Utilizing useReducer Input.js: // src/shared/components/FormElements/Input.js import React, { useReducer } from 'react'; import './Input.css'; const inputReducer = (state, action) => { switch (action.type) { case 'CHANGE': return { ...state, value: action.val, isValid: true }; default: return state; } }; const Input = props => { const [inputState, dispatch] = useReducer(inputReducer, { value: '', isValid: false }); const changeHandler = event => { dispatch({ type: 'CHANGE', val: event.target.value }); }; const element = props.element === 'input' ? ( <input id={props.id} type={props.type} placeholder={props.placeholder} onChange={changeHandler} value={inputState.value} /> ) : ( <textarea id={props.id} rows={props.rows || 3} onChange={changeHandler} value={inputState.value} /> ); return ( <div className={`form-control ${!inputState.isValid && 'form-control--invalid'}`} > <label htmlFor={props.id}>{props.label}</label> {element} {!inputState.isValid && <p>{props.errorText}</p>} </div> ); }; export default Input; NewPlace.js: // src/places/pages/NewPlace.js import React from 'react'; import Input from '../../shared/components/FormElements/Input'; import './NewPlace.css'; const NewPlace = () => { return ( <form className='place-form'> <Input element='input' type='text' label='Title' validators={[]} errorText='Please enter a valid title.' /> </form> ); }; export default NewPlace; Adding Input Validation Use provided validators in NewPlace.js: <Input // ... validators={[VALIDATOR_REQUIRE()]} > in Input.js: import React, { useReducer } from 'react'; import { validate } from '../../util/validators'; import './Input.css'; const inputReducer = (state, action) => { switch (action.type) { case 'CHANGE': return { ...state, value: action.val, isValid: validate(action.val, action.validators) }; case 'TOUCH': { // keep from erroring immediately on visiting page return { ...state, isTouched: true } } default: return state; } }; const Input = props => { const [inputState, dispatch] = useReducer(inputReducer, { value: '', isTouched: false, isValid: false }); const changeHandler = event => { dispatch({ type: 'CHANGE', val: event.target.value, validators: props.validators }); }; const touchHandler = () => { dispatch({ type: 'TOUCH' }); }; const element = props.element === 'input' ? ( <input id={props.id} type={props.type} placeholder={props.placeholder} onChange={changeHandler} onBlur={touchHandler} value={inputState.value} /> ) : ( <textarea id={props.id} rows={props.rows || 3} onChange={changeHandler} onBlur={touchHandler} value={inputState.value} /> ); return ( <div className={`form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`} > <label htmlFor={props.id}>{props.label}</label> {element} {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>} </div> ); }; export default Input; Sharing Input Values & Adding Multiple Inputs Utilizing useEffect in Input.js: // in Input component: const { id, onInput } = props; const { value, isValid } = inputState; useEffect(() => { onInput(id, value, isValid); }, [id, value, isValid, onInput]); And Utilizing useCallback , to avoid infinite loop, in NewPlace.js: import React, { useCallback } from 'react'; import Input from '../../shared/components/FormElements/Input'; import { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; import './NewPlace.css'; const NewPlace = () => { const titleInputHandler = useCallback((id, value, isValid) => {}, []); const descriptionInputHandler = useCallback((id, value, isValid) => {}, []); return ( <form className='place-form'> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={titleInputHandler} /> <Input id='description' element='input' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (at least 5 characters).' onInput={descriptionInputHandler} /> </form> ); }; export default NewPlace; Managing Form-wide State NewPlace.js: // src/places/pages/NewPlace.js import React, { useCallback, useReducer } from 'react'; import Input from '../../shared/components/FormElements/Input'; import Button from '../../shared/components/FormElements/Button'; import { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; import './NewPlace.css'; const formReducer = (state, action) => { switch (action.type) { case 'INPUT_CHANGE': let formIsValid = true; for (const inputId in state.inputs) { if (inputId === action.inputId) { formIsValid = formIsValid && action.isValid; } else { formIsValid = formIsValid && state.inputs[inputId].isValid; } } return { ...state, inputs: { ...state.inputs, [action.inputId]: { value: action.value, isValid: action.isValid } }, isValid: formIsValid }; default: return state; } }; const NewPlace = () => { const [formState, dispatch] = useReducer(formReducer, { inputs: { title: { value: '', isValid: false }, description: { value: '', isValid: false } }, isValid: false }); const inputHandler = useCallback((id, value, isValid) => { dispatch({ type: 'INPUT_CHANGE', value: value, isValid: isValid, inputId: id }); }, []); return ( <form className='place-form'> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={inputHandler} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (at least 5 characters).' onInput={inputHandler} /> <Button type='submit' disabled={!formState.isValid}> ADD PLACE </Button> </form> ); }; export default NewPlace; Input.js // src/shared/components/FormElements/Input.js import React, { useCallback, useReducer } from 'react'; import Input from '../../shared/components/FormElements/Input'; import Button from '../../shared/components/FormElements/Button'; import { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; import './NewPlace.css'; const formReducer = (state, action) => { switch (action.type) { case 'INPUT_CHANGE': let formIsValid = true; for (const inputId in state.inputs) { if (inputId === action.inputId) { formIsValid = formIsValid && action.isValid; } else { formIsValid = formIsValid && state.inputs[inputId].isValid; } } return { ...state, inputs: { ...state.inputs, [action.inputId]: { value: action.value, isValid: action.isValid } }, isValid: formIsValid }; default: return state; } }; const NewPlace = () => { const [formState, dispatch] = useReducer(formReducer, { inputs: { title: { value: '', isValid: false }, description: { value: '', isValid: false } }, isValid: false }); const inputHandler = useCallback((id, value, isValid) => { dispatch({ type: 'INPUT_CHANGE', value: value, isValid: isValid, inputId: id }); }, []); return ( <form className='place-form'> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={inputHandler} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (at least 5 characters).' onInput={inputHandler} /> <Button type='submit' disabled={!formState.isValid}> ADD PLACE </Button> </form> ); }; export default NewPlace; Finishing the \"Add Place\" Form In NewPlace.js, add address input field & submit handler: // src/places/pages/NewPlace.js // in NewPlace: const placeSubmitHandler = event => { event.preventDefault(); console.log(formState.inputs); }; return ( <form className='place-form' onSubmit={placeSubmitHandler}> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={inputHandler} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (at least 5 characters).' onInput={inputHandler} /> <Input id='address' element='input' label='Address' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid address.' onInput={inputHandler} /> <Button type='submit' disabled={!formState.isValid}> ADD PLACE </Button> </form> ); Starting Work on the \"Update Place\" Page UpdatePlace.js import React from 'react'; import { useParams } from 'react-router-dom'; import Input from '../../shared/components/FormElements/Input'; import Button from '../../shared/components/FormElements/Button'; import { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; const DUMMY_PLACES = [ // ... ]; const UpdatePlace = () => { const placeId = useParams().placeId; const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId); if (!identifiedPlace) { return ( <div className='center'> <h2>Could not find place!</h2> </div> ); } return ( <form> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE]} errorText='Please enter a valid title.' onInput={() => {}} value={identifiedPlace.title} valid={true} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (min. 5 characters).' onInput={() => {}} value={identifiedPlace.title} valid={true} /> <Button type='submit' disabled={true}> UPDATE PLACE </Button> </form> ); }; export default UpdatePlace; Also add new route in App.js: <Route path='/places/:placeId'> <UpdatePlace /> </Route> Adjusting the Input Component Update useReducer() in Input.js: const [inputState, dispatch] = useReducer(inputReducer, { value: props.value || '', isTouched: false, isValid: props.valid || false }); Rename NewPlace.css to PlaceForm.css, update imports and add class name (place-form) to form in UpdatePlace.js Creating a Custom Form Hook (useForm) Function that can share stateful logic. Starts with 'use' by convention (useEffect) Can use default hooks inside a custom hook Will re-render component if you change something that effects the state First, restructure NewPlace.js into form-hook.js, fix UpdatePlace.js NewPlace.js // src/places/pages/NewPlace.js import React from 'react'; import Input from '../../shared/components/FormElements/Input'; import Button from '../../shared/components/FormElements/Button'; import { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; import './PlaceForm.css'; import { useForm } from '../../shared/hooks/form-hook'; const NewPlace = () => { const [formState, inputHandler] = useForm( { title: { value: '', isValid: false }, description: { value: '', isValid: false }, address: { value: '', isValid: false } }, false ); const placeSubmitHandler = event => { event.preventDefault(); console.log(formState.inputs); }; return ( <form className='place-form' onSubmit={placeSubmitHandler}> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={inputHandler} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (at least 5 characters).' onInput={inputHandler} /> <Input id='address' element='input' label='Address' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid address.' onInput={inputHandler} /> <Button type='submit' disabled={!formState.isValid}> ADD PLACE </Button> </form> ); }; export default NewPlace; form-hook.js: // src/shared/hooks/form-hook.js import { useCallback, useReducer } from 'react'; const formReducer = (state, action) => { switch (action.type) { case 'INPUT_CHANGE': let formIsValid = true; for (const inputId in state.inputs) { if (inputId === action.inputId) { formIsValid = formIsValid && action.isValid; } else { formIsValid = formIsValid && state.inputs[inputId].isValid; } } return { ...state, inputs: { ...state.inputs, [action.inputId]: { value: action.value, isValid: action.isValid } }, isValid: formIsValid }; default: return state; } }; export const useForm = (initialInputs, initialFormValidity) => { const [formState, dispatch] = useReducer(formReducer, { inputs: initialInputs, isValid: initialFormValidity }); const inputHandler = useCallback((id, value, isValid) => { dispatch({ type: 'INPUT_CHANGE', value: value, isValid: isValid, inputId: id }); }, []); return [formState, inputHandler]; }; Also UpdatePlace.js: // src/places/pages/UpdatePlace.js import React from 'react'; import { useParams } from 'react-router-dom'; import Input from '../../shared/components/FormElements/Input'; import Button from '../../shared/components/FormElements/Button'; import { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; import { useForm } from '../../shared/hooks/form-hook'; import './PlaceForm.css'; const DUMMY_PLACES = [ { id: 'p1', title: 'Empire State Building', description: 'One of the most famous sky scrapers in the world!', imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/1/10/Empire_State_Building_%28aerial_view%29.jpg', address: '20 West 34th Street, New York City, NY 10118-0114', location: { lat: 40.7484405, lng: -73.9878584 }, creator: 'u1' }, { id: 'p2', title: 'Empire State Building', description: 'One of the most famous sky scrapers in the world!', imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/1/10/Empire_State_Building_%28aerial_view%29.jpg', address: '20 West 34th Street, New York City, NY 10118-0114', location: { lat: 40.7484405, lng: -73.9878584 }, creator: 'u2' } ]; const UpdatePlace = () => { const placeId = useParams().placeId; const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId); const [formState, inputHandler] = useForm({ title: { value: identifiedPlace.title, isValid: true }, description: { value: identifiedPlace.description, isValid: true } }, true); const placeUpdateSubmitHandler = event => { event.preventDefault(); console.log(formState.inputs); }; if (!identifiedPlace) { return ( <div className='center'> <h2>Could not find place!</h2> </div> ); } return ( <form className='place-form' onSubmit={placeUpdateSubmitHandler}> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={inputHandler} initialValue={formState.inputs.title.value} initialValid={formState.inputs.title.isValid} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (min. 5 characters).' onInput={inputHandler} initialValue={formState.inputs.description.value} initialValid={formState.inputs.description.isValid} /> <Button type='submit' disabled={!formState.isValid}> UPDATE PLACE </Button> </form> ); }; export default UpdatePlace; Adjusting the Form Hook In useForm() // src/shared/hooks/form-hook.js // ... const setFormData = useCallback((inputData, formValidity) => { dispatch({ type: 'SET_DATA', inputs: inputData, formIsValid: formValidity }); }, []); return [formState, inputHandler, setFormData]; Use temporary fix in UpdatePlace.js: // src/places/pages/UpdatePlace.js // imports... const DUMMY_PLACES = [/* ... */]; const UpdatePlace = () => { const [isLoading, setIsLoading] = useState(true); const placeId = useParams().placeId; const [formState, inputHandler, setFormData] = useForm({ title: { value: '', isValid: false }, description: { value: '', isValid: false } }, true); const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId); useEffect(() => { setFormData({ title: { value: identifiedPlace.title, isValid: true }, description: { value: identifiedPlace.description, isValid: true } }, true); setIsLoading(false); }, [setFormData, identifiedPlace]); const placeUpdateSubmitHandler = event => { event.preventDefault(); console.log(formState.inputs); }; if (!identifiedPlace) { return ( <div className='center'> <h2>Could not find place!</h2> </div> ); } if (isLoading) { return ( <div className='center'> <h2>Loading...</h2> </div> ); } return (/* unchanged form */); }; export default UpdatePlace; Fixing Minor Issues Fix up Share Button on PlaceList.js: // src/places/components/PlaceList.js <Button to='/places/new'>Share Place</Button> Error on attempted navigate to place that doesn't exist // src/places/components/PlaceList.js // putting setFormData in if check: if (identifiedPlace) { setFormData({ title: { value: identifiedPlace.title, isValid: true }, description: { value: identifiedPlace.description, isValid: true } }, true); } Wrap \"Could not find place!\" in Card for better styling: // src/places/pages/UpdatePlace.js if (!identifiedPlace) { return ( <div className='center'> <Card> <h2>Could not find place!</h2> </Card> </div> ); } Showing a Deletion Warning PlaceItem.js: // src/places/components/PlaceItem.js import React, { useState } from 'react'; import Card from '../../shared/components/UIElements/Card'; import Button from '../../shared/components/FormElements/Button'; import Modal from '../../shared/components/UIElements/Modal'; import Map from '../../shared/components/UIElements/Map'; import './PlaceItem.css'; const PlaceItem = props => { const [showMap, setShowMap] = useState(false); const [showConfirmModal, setShowConfirmModal] = useState(false); const openMapHandler = () => setShowMap(true); const closeMapHandler = () => setShowMap(false); const showDeleteWarningHandler = () => { setShowConfirmModal(true); }; const cancelDeleteHandler = () => { setShowConfirmModal(false); }; const confirmDeleteHandler = () => { setShowConfirmModal(false); console.log('DELETING...'); }; return ( <React.Fragment> <Modal show={showMap} onCancel={closeMapHandler} header={props.address} contentClass='place-item__modal-content' footerClass='place-item__modal-actions' footer={<Button onClick={closeMapHandler}>CLOSE</Button>} > <div className='map-container'> <Map center={props.coordinates} zoom={16} /> </div> </Modal> <Modal show={showConfirmModal} onCancel={cancelDeleteHandler} header='Are you sure?' footerClass='place-item__modal-actions' footer={ <React.Fragment> <Button inverse onClick={cancelDeleteHandler}>CANCEL</Button> <Button danger onClick={confirmDeleteHandler}>DELETE</Button> </React.Fragment> } > <p> Do you want to proceed and delete this place? Please note this action cannnot be undone. </p> </Modal> <li className='place-item'> <Card className='place-item__content'> <div className='place-item__image'> <img src={props.image} alt={props.title} /> </div> <div className='place-item__info'> <h2>{props.title}</h2> <h3>{props.address}</h3> <p>{props.description}</p> </div> <div className='place-item__actions'> <Button inverse onClick={openMapHandler}> VIEW ON MAP </Button> <Button to={`/places/${props.id}`}>EDIT</Button> <Button danger onClick={showDeleteWarningHandler}>DELETE</Button> </div> </Card> </li> </React.Fragment> ); }; export default PlaceItem; Adding an \"Auth\" Page & Login Form Auth.js: import React from 'react'; import Button from '../../shared/components/FormElements/Button'; import Input from '../../shared/components/FormElements/Input'; import Card from '../../shared/components/UIElements/Card'; import { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; import { useForm } from '../../shared/hooks/form-hook'; import './Auth.css'; const Auth = () => { const [formState, inputHandler] = useForm( { email: { value: '', isValid: false }, password: { value: '', isValid: false } }, false ); const authSubmitHandler = event => { event.preventDefault(); console.log(formState.inputs); }; return ( <Card className='authentication'> <h2>Login Required</h2> <hr /> <form onSubmit={authSubmitHandler}> <Input element='input' id='email' type='email' label='E-Mail' validators={[VALIDATOR_EMAIL()]} errorText='Please enter a valid email address.' onInput={inputHandler} /> <Input element='input' id='password' type='password' label='Password' validators={[VALIDATOR_MINLENGTH(7)]} errorText='Please enter a valid password (min. 5 characters).' onInput={inputHandler} /> <Button type='submit' disabled={!formState.isValid}> LOGIN </Button> </form> </Card> ); }; export default Auth; Adding Signup + \"Switch Mode\" Button Auth.js updated with \"Switch Mode\" // src/user/pages/Auth.js // imports... const Auth = () => { const [isLoginMode, setIsLoginMode] = useState(true); // need setFormData now const [formState, inputHandler, setFormData] = useForm(/* ... */); const switchModeHandler = () => { if (!isLoginMode) { setFormData( { ...formState.inputs, name: undefined }, formState.inputs.email.isValid && formState.inputs.password.isValid ); } else { setFormData( { ...formState.inputs, name: { value: '', isValid: false } }, false ); } setIsLoginMode(prevMode => !prevMode); }; return ( <Card className='authentication'> <h2>Login Required</h2> <hr /> <form onSubmit={authSubmitHandler}> {!isLoginMode && ( <Input element='input' id='name' type='type' label='Your Name' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a name.' onInput={inputHandler} /> )} {/* email & password inputs*/} <Button type='submit' disabled={!formState.isValid}> {isLoginMode ? 'LOGIN' : 'SIGNUP'} </Button> </form> <Button inverse onClick={switchModeHandler}> SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'} </Button> </Card> } Add additional condition in form-hook.js for loop: // src/shared/hooks/form-hook.js/formReducer() if (!state.inputs[inputId]) { continue; } Adding Auth Context for App-wide State Management Context for passing data between components without having to use props // src/shared/context/auth-context.js import { createContext } from 'react'; export const AuthContext = createContext({ isLoggedIn: false, login: () => {}, logout: () => {} }); Wrap where context should be available, in this case, the entire App: // src/App.js // ...imports import { AuthContext } from './shared/context/auth-context'; const App = () => { const [isLoggedIn, setIsLoggedIn] = useState(false); const login = useCallback(() => { setIsLoggedIn(true); }, []); const logout = useCallback(() => { setIsLoggedIn(false); }, []); return ( <AuthContext.Provider value={{ isLoggedIn: isLoggedIn, login: login, logout: logout }} > <Router> <MainNavigation /> <main> <Switch> <Route path='/' exact> <Users /> </Route> <Route path='/auth' exact> <Auth /> </Route> <Route path='/:userId/places'> <UserPlaces /> </Route> <Route path='/places/new' exact> <NewPlace /> </Route> <Route path='/places/:placeId'> <UpdatePlace /> </Route> <Redirect to='/' /> </Switch> </main> </Router> </AuthContext.Provider> ); }; export default App; Listening to Context Changes Use in NavLinks.js: // src/shared/Navvigation/NavLinks.js import React, { useContext } from 'react'; import { NavLink } from 'react-router-dom'; import { AuthContext } from '../../context/auth-context'; import './NavLinks.css'; const NavLinks = props => { const auth = useContext(AuthContext); return ( <ul className='nav-links'> <li> <NavLink to='/' exact> ALL USERS </NavLink> </li> {auth.isLoggedIn && ( <li> <NavLink to='/u1/places'>MY PLACES</NavLink> </li> )} {auth.isLoggedIn && ( <li> <NavLink to='/places/new'>ADD PLACE</NavLink> </li> )} {!auth.isLoggedIn && ( <li> <NavLink to='/auth'>AUTHENTICATE</NavLink> </li> )} </ul> ); }; export default NavLinks; Adding Authenticated & Unauthenticated Routes In Auth.js: // src/user/pages/Auth.js // ...imports import { AuthContext } from '../../shared/context/auth-context'; const Auth = () => { const auth = useContext(AuthContext); // ... const authSubmitHandler = event => { event.preventDefault(); console.log(formState.inputs); auth.login(); }; }; Refactor App.js & Routes // src/App.js // ...imports const App = () => { // ... let routes; if (isLoggedIn) { routes = ( <Switch> <Route path='/' exact> <Users /> </Route> <Route path='/:userId/places'> <UserPlaces /> </Route> <Route path='/places/new' exact> <NewPlace /> </Route> <Route path='/places/:placeId'> <UpdatePlace /> </Route> <Redirect to='/' /> </Switch> ); } else { routes = ( <Switch> <Route path='/' exact> <Users /> </Route> <Route path='/:userId/places'> <UserPlaces /> </Route> <Route path='/auth' exact> <Auth /> </Route> <Redirect to='/auth' /> </Switch> ); } return ( <AuthContext.Provider value={{ isLoggedIn: isLoggedIn, login: login, logout: logout }} > <Router> <MainNavigation /> <main>{routes}</main> </Router> </AuthContext.Provider> ); }; More Auth Context Usage Hide Edit & Delete buttons on PlaceItem: // src/places/components/PlaceItem.js // after view on map place-item action {auth.isLoggedIn && ( <Button to={`/places/${props.id}`}>EDIT</Button> )} {auth.isLoggedIn && ( <Button danger onClick={showDeleteWarningHandler}> DELETE </Button> )} Add Logout button to NavLinks: // src/shared/components/Navigation/NavLinks.js // after auth button {auth.isLoggedIn && ( <li> <button onClick={auth.logout}>LOGOUT</button> </li> )} 7. Node.js and Express.js - Building our REST API Intro Set Up Node.js + Express App Add Routes Add Controllers & (Dummy) Logic Add User Input Validation Setting up our Project mkdir backend cd ./backend npm init npm i --save body-parser express npm i --save-dev nodemon touch app.js Implementing Basic Routing mkdir routes cd ./routes touch place-routes.js touch users-routes.js // backend/routes/places-routes.js const express = require('express'); const router = express.Router(); router.get('/', (req, res, next) => { console.log('GET Request in PLaces'); res.json({ message: 'It works!' }); }); module.exports = router; // backend/app.js const express = require('express'); const bodyParser = require('body-parser'); const placesRoutes = require('./routes/places-routes'); const app = express(); app.use(placesRoutes); app.listen(5000); Adding Place-Specific Routes Limit filter to placesRoutes app.use('/api/places', placesRoutes); // => /api/places/ ... Add in Dummy data to places-routes const DUMMY_PLACES + [ /*...*/] Modify GET in places-routes: // backend/routes/places-routes.js router.get('/:pid', (req, res, next) => { const placeId = req.params.pid // { pid: 'p1' } const place = DUMMY_PLACES.find(p => { return p.id === placeId; }); res.json({ place }); }); Getting a Place by User ID Order matters in these routes! // backend/routes/places-routes router.get('/user/:uid', (req, res, next) => { const userId = req.params.uid; const place = DUMMY_PLACES.find(p => { return p.creator === userId; }); res.json({ place }); }); Handling Errors Catching in place-routes.js: // backend/routes/places-routes.js router.get('/:pid', (req, res, next) => { const placeId = req.params.pid; // { pid: 'p1' } const place = DUMMY_PLACES.find(p => { return p.id === placeId; }); if (!place) { const error = new Error('Could not find a place for the provided id.'); error.code = 404; throw error; // throw in sync code } res.json({ place }); }); router.get('/user/:uid', (req, res, next) => { const userId = req.params.uid; const place = DUMMY_PLACES.find(p => { return p.creator === userId; }); if (!place) { const error = new Error('Could not find a place for the provided id.'); error.code = 404; return next(error); // next in async code. (its sync here, but as an example) } res.json({ place }); }); Modifying app.js: // backend/app.js // after /api/places route app.use((error, req, res, next) => { if (res.headerSent) { return next(error); } res .status(error.code || 500) .json({ message: error.message || 'An unknown error ocurred!' }); }); Adding our own Error Model HttpError class: // backend/models/http-error.js class HttpError extends Error { constructor(message, errorCode) { super(message); // Add a \"message\" property this.code = errorCode; // Adds a \"code\" property } } module.exports = HttpError; Modify places-routes.js: const error = new HttpError('Could not find a place for the provided id.', 404); Adding Controllers Model View Controller concept (without the views here) mkdir controllers Refactor: // backend/controllers/places-controller/js const HttpError = require('../models/http-error'); const DUMMY_PLACES = [ // ... ]; const getPlaceById = (req, res, next) => { // ... }; const getPlaceByUserId = (req, res, next) => { // .. }; exports.getPlaceById = getPlaceById; exports.getPlaceByUserId = getPlaceByUserId; // backend/routes/places-routes.js const express = require('express'); const placesControllers = require('../controllers/places-controllers'); const router = express.Router(); router.get('/:pid', placesControllers.getPlaceById); router.get('/user/:uid', placesControllers.getPlaceByUserId); module.exports = router; Adding a POST Route and Using Postman Add new route in places-routes.js: router.post('/', placesControllers.createPlace); Add in bodyParser to App.js: app.use(bodyParser.json()); createPlace route: const createPlace = (req, res, next) => { const { title, description, coordinates, address, creator } = req.body; const createdPlace = { title, description, location: coordinates, address, creator }; DUMMY_PLACES.push(createdPlace); // unshift (createdPlaced) res.status(201).json({ place: createdPlace }); }; exports.createPlace = createPlace; Use Postman to test Use uuid package to generate unique ids npm i --save uuid import into controller const uuid = require('uuid/v4'); use in id field on createPlace id: uuid(), Handling Errors for Unsupported Routes Add a catch-all route after other routes to handle unwanted routes app.use((req, res, next) => { const error = new HttpError('Could not find this route.', 404); throw error; }); Adding Patch Routes to Update Places Add the new route for updating places: router.patch('/:pid', placesControllers.updatePlace); Create the route in controllers: const updatePlace = (req, res, next) => { const { title, description } = req.body; const placeId = req.params.pid; const updatedPlace = { ...DUMMY_PLACES.find(p => p.id === placeId) }; const placeIndex = DUMMY_PLACES.findIndex(p => p.id === placeId); updatedPlace.title = title; updatedPlace.description = description; DUMMY_PLACES[placeIndex] = updatedPlace; res.status(200).json({ place: updatedPlace }); }; exports.updatePlace = updatePlace; Deleting Places Add the new route for deleting places: router.delete('/:pid', placesControllers.deletePlace); Create the route in controllers: const deletePlace = (req, res, next) => { const placeId = req.params.pid; // need to declare DUMMY_PLACES with let instead of const! DUMMY_PLACES = DUMMY_PLACES.filter(p => p.id !== placeId); res.status(200).json({message: 'Deleted place.'}); }; exports.deletePlace = deletePlace; Finalizing the \"Get Places by User ID\" Resource Fix getPlaceByUserId to get multiple places for user Change to use filter instead of find Setting Up the User Routes (Signup, Login, Get Users) User Controllers: // backend/controllers/users-controllers.js const uuid = require('uuid/v4'); const HttpError = require('../models/http-error'); const DUMMY_USERS = [ { id: 'u1', name: 'John', email: 'john@test.com', password: 'password' } ]; const getUsers = (req, res, next) => { res.json({ users: DUMMY_USERS }); }; const signup = (req, res, next) => { const { name, email, password } = req.body; const hasUser = DUMMY_USERS.find(u => u.email === email); if (hasUser) { throw new HttpError('Could not create user, email already exists!', 422); } const createdUser = { id: uuid(), name, email, password }; DUMMY_USERS.push(createdUser); res.status(201).json({ user: createdUser }); }; const login = (req, res, next) => { const { email, password } = req.body; const identifiedUser = DUMMY_USERS.find(u => u.email === email); if (!identifiedUser || identifiedUser.password !== password) { throw new HttpError( 'Could not identify user, credentials seem to be wrong.', 401 ); } res.json({ message: 'Logged In!' }); }; exports.getUsers = getUsers; exports.signup = signup; exports.login = login; Users Routes: // backend/routes/users-routes.js const express = require('express'); const usersControllers = require('../controllers/users-controllers'); const router = express.Router(); router.get('/', usersControllers.getUsers); router.post('/signup', usersControllers.signup); router.post('/login', usersControllers.login); module.exports = router; Add to app.js: app.use('/api/users', usersRoutes); // => /api/users/ ... Validating API Input (Request Bodies) Install validator package: npm i --save express-validator Can use multiple middlewares on routes For Create Place route : // ...imports const { check } = require('express-validator'); // ... router.post( '/', [ check('title') .not() .isEmpty(), check('description').isLength({ min: 5 }), check('address') .not() .isEmpty() ], placesControllers.createPlace ); // ... For Create Place controller : // ...imports const { validationResult } = require('express-validator'); // ... const createPlace = (req, res, next) => { const errors = validationResult(req); if (!errors.isEmpty()) { console.log(errors); throw new HttpError('Invalid inputs passed, please check your data.', 422); } // ... } // ... Validating Patch Requests and User Routes For Update Place route : router.patch( '/:pid', [ check('title') .not() .isEmpty(), check('description').isLength({ min: 5 }) ], placesControllers.updatePlace ); For Update Place controller , can use same logic as in createPlace above For User Signup route // ...imports const { check } = require('express-validator'); // ... router.post( '/signup', [ check('name') .not() .isEmpty(), check('email') .normalizeEmail() // Test@test.com => test@test.com .isEmail(), check('password').isLength({ min: 6 }) ], usersControllers.signup ); // ... For User Signup controller , use similar logic as update and create place Using Google's Geocoding API to Convert an Address Into Coordinates Use third party package to send request to google npm i --save axios location.js: // backend/util/location.js const axios = require('axios'); const HttpError = require('../models/http-error'); const API_KEY = 'AIzaSyC7ap01wqRWATA7guCbFBvIgpbYZwKQIEo'; const getCoordsforAddress = async address => { const response = await axios.get( `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent( address )}&key=${API_KEY}` ); const data = response.data; if (!data || data.status === 'ZERO_RESULTS') { const error = new HttpError( 'Could not find location for the specified address.', 422 ); throw error; } const coordinates = data.results[0].geometry.location; return coordinates; }; module.exports = getCoordsforAddress; Modify create Place in controller: // backend/controllers/places-controllers.js // ... const createPlace = async (req, res, next) => { const errors = validationResult(req); if (!errors.isEmpty()) { return next( new HttpError('Invalid inputs passed, please check your data.', 422) ); } const { title, description, address, creator } = req.body; let coordinates; try { coordinates = await getCoordsForAddress(address); } catch (error) { return next(error); } // ... } // ... 9. Connecting the Backend to the Database MongoDB and Mongoose Defining our Mongoose Models CRUD Operations for Place and User Connecting Places and Users Installing Mongoose and Connecting our Backend to MongoDB npm i --save mongoose // backend/app.js // ... mongoose .connect('mongodb://localhost:27017/react-training') .then(() => { console.log('Connected to database!'); app.listen(5000); }) .catch(err => { console.log(err); }); Creating the Place Schema and Model place.js: // backend/models/place.js const mongoose = require('mongoose'); const Schema = mongoose.Schema; const placeSchema = new Schema({ title: { type: String, required: true }, description: { type: String, required: true }, image: { type: String, required: true }, address: { type: String, required: true }, location: { lat: { type: Number, required: true }, lng: { type: Number, required: true }, }, creator: { type: String, required: true }, }); module.exports = mongoose.model('Place', placeSchema); Creating and Storing Documents in the Database Modifying create place controller // backend/controllers/places-controllers const createPlace = async (req, res, next) => { const errors = validationResult(req); if (!errors.isEmpty()) { return next( new HttpError('Invalid inputs passed, please check your data.', 422) ); } const { title, description, address, creator } = req.body; let coordinates; try { coordinates = await getCoordsForAddress(address); } catch (error) { return next(error); } const createdPlace = new Place({ title, description, address, location: coordinates, image: 'https://upload.wikimedia.org/wikipedia/commons/1/10/Empire_State_Building_%28aerial_view%29.jpg', creator }); try { await createdPlace.save(); } catch (err) { const error = new HttpError( 'Creating Place failed, please try again.', 500 ); return next(error); } res.status(201).json({ place: createdPlace }); }; Getting Places by the PlaceID Get place by ID controller: // backend/controllers/places-controllers.js // ... const getPlaceById = async (req, res, next) => { const placeId = req.params.pid; // { pid: 'p1' } let place; try { place = await Place.findById(placeId); } catch (err) { const error = new HttpError( 'Something went wrong, could not find a place', 500 ); return next(error); } if (!place) { const error = new HttpError( 'Could not find a place for the provided id.', 404 ); return next(error); } res.json({ place: place.toObject({ getters: true }) }); }; // ... Getting Places by the UserID Get place by User ID controller: // backend/controllers/places-controllers.js // ... const getPlacesByUserId = async (req, res, next) => { const userId = req.params.uid; let places; try { places = await Place.find({ creator: userId }); } catch (err) { const error = new HttpError( 'Fetching places failed, please try again later.', 500 ); return next(error); } if (!places || places.length === 0) { const error = new HttpError( 'Could not find a places for the provided user id.', 404 ); return next(error); } res.json({ places: places.map(place => place.toObject({ getters: true })) }); }; // ... Updating Places Update place controller: // backend/controllers/places-controllers.js // ... const updatePlace = async (req, res, next) => { const errors = validationResult(req); if (!errors.isEmpty()) { throw new HttpError('Invalid inputs passed, please check your data.', 422); } const { title, description } = req.body; const placeId = req.params.pid; let place; try { place = await Place.findById(placeId); } catch (err) { const error = new HttpError( 'Something went wrong, could not update place', 500 ); return next(error); } place.title = title; place.description = description; try { await place.save(); } catch (err) { const error = new HttpError( 'Something went wrong, could not update place.', 500 ); return next(error); } res.status(200).json({ place: place.toObject({ getters: true }) }); }; // ... Deleting Places Delete Places controller: // backend/controllers/places-controllers // ... const deletePlace = async (req, res, next) => { const placeId = req.params.pid; let place; try { place = await Place.findById(placeId); } catch (err) { const error = new HttpError( 'Something went wrong, could not delete place.', 500 ); return next(error); } try { place.remove(); } catch (err) { const error = new HttpError( 'Something went wrong, could not delete place.', 500 ); return next(error); } res.status(200).json({ message: 'Deleted place.' }); }; // ... How Users and Places are Related One place belongs to exactly one user One user can create multiple places Creating the User Model Will need mongoose unique validator: npm i --save mongoose-unique-validator Since unique property doesn't make sure another already exists, instead just makes easily to reference with an index // backend/models/user.js const mongoose = require('mongoose'); const uniqueValidator = require('mongoose-unique-validator'); const Schema = mongoose.Schema; const userSchema = new Schema({ name: { type: String, required: true }, email: { type: String, required: true, unique: true }, password: { type: String, required: true, minlength: 6 }, image: { type: String, required: true }, places: { type: String, required: true } }); userSchema.plugin(uniqueValidator); module.exports = mongoose.model('User', userSchema); Using the User Model for Signup Modifying user controllers: const signup = async (req, res, next) => { const errors = validationResult(req); if (!errors.isEmpty()) { return next( new HttpError('Invalid inputs passed, please check your data.', 422) ); } const { name, email, password, places } = req.body; let existingUser; try { existingUser = await User.findOne({ email: email }); } catch (err) { const error = new HttpError( 'Signing up failed, please try again later.', 500 ); return next(error); } if (existingUser) { const error = new HttpError( 'User exists already, please login instead.', 422 ); return next(error); } const createdUser = new User({ name, email, image: 'https://www.publicdomainpictures.net/pictures/10000/velka/brown-eyed-susan-flower-closeup-23441281369772mHdG.jpg', password, places }); try { await createdUser.save(); } catch (err) { console.log(err.message); const error = new HttpError( 'Saving User failed, please try again.', 500 ); return next(error); } res.status(201).json({ user: createdUser.toObject({ getters: true }) }); }; Adding the User Login Modifying users controller const login = async (req, res, next) => { const { email, password } = req.body; let existingUser; try { existingUser = await User.findOne({ email }); } catch (err) { const error = new HttpError( 'Logging in failed, please try again later.', 500 ); return next(error); } // dummy logic currently for authentication: if (!existingUser || existingUser.password !== password) { const error = new HttpError( 'Invalid credentials, could not log you in.', 401 ); return next(error); } res.json({ message: 'Logged In!' }); }; Getting Users Modifying users controller const getUsers = async (req, res, next) => { let users; try { users = await User.find({}, '-password'); } catch (err) { const error = new HttpError( 'Fetching users failed, please try again later.', 500 ); return next(error); } res.json({ users: users.map(user => user.toObject({ getters: true })) }); }; Adding the Relation between Places and Users One user can create multiple places AND One place belongs to exactly one user. Modify Place Schema: { type: mongoose.Types.ObjectId, required: true, ref: 'User' } Modify User schema: places: [{ type: mongoose.Types.ObjectId, required: true, ref: 'Place' }] Modify users controller // ... const signup = async (req, res, next) => { // ... const { name, email, password } = req.body; // ... const createdUser = new User({ name, email, image: 'https://www.publicdomainpictures.net/pictures/10000/velka/brown-eyed-susan-flower-closeup-23441281369772mHdG.jpg', password, places: [] }); // ... } // ... Creating Places and Adding it to a User Using session and transaction Modifying Places controller: const createPlace = async (req, res, next) => { const errors = validationResult(req); if (!errors.isEmpty()) { return next( new HttpError('Invalid inputs passed, please check your data.', 422) ); } const { title, description, address, creator } = req.body; let coordinates; try { coordinates = await getCoordsForAddress(address); } catch (error) { return next(error); } const createdPlace = new Place({ title, description, address, location: coordinates, image: 'https://upload.wikimedia.org/wikipedia/commons/1/10/Empire_State_Building_%28aerial_view%29.jpg', creator }); let user; try { user = await User.findById(creator); } catch (err) { const error = new HttpError( // 'Creating place failed, please try again.', 'Could not find user for provided id', 500 ); return next(error); } if (!user) { const error = new HttpError('Could not find user for provided id', 404); return next(error); } console.log(user); try { // const sess = await mongoose.startSession(); // sess.startTransaction(); await createdPlace.save(/* { sessions: sess } */); user.places.push(createdPlace); await user.save(/* { sessions: sess } */); // await sess.commitTransaction(); } catch (err) { console.log(err.message); const error = new HttpError( 'Creating place failed, please try again.', 500 ); return next(error); } res.status(201).json({ place: createdPlace }); }; Deleting Places & Removing it from the User Modifying delete place in places controllers: Using populate() const deletePlace = async (req, res, next) => { const placeId = req.params.pid; let place; try { place = await Place.findById(placeId).populate('creator'); } catch (err) { const error = new HttpError( 'Something went wrong, could not delete place.', 500 ); return next(error); } if (!place) { const error = new HttpError('Could not find place for this id.', 404); return next(error); } try { // const session = await mongoose.startSession(); // session.startTransaction(); await place.remove(/* { session: session } */); place.creator.places.pull(place); await place.creator.save(/* { session: session } */); // await session.commitTransaction(); } catch (err) { const error = new HttpError( 'Something went wrong, could not delete place.', 500 ); return next(error); } res.status(200).json({ message: 'Deleted place.' }); }; Getting Places - An Alternative Modifying get place by user id in places controllers: const getPlacesByUserId = async (req, res, next) => { const userId = req.params.uid; // let places; let userWithPlaces; try { userWithPlaces = await User.findById(userId).populate('places'); } catch (err) { console.log(err.message) const error = new HttpError( 'Fetching places failed, please try again later.', 500 ); return next(error); } if (!userWithPlaces || userWithPlaces.length === 0) { const error = new HttpError( 'Could not find places for the provided user id.', 404 ); return next(error); } res.json({ places: userWithPlaces.places.map(place => place.toObject({ getters: true })) }); }; 10. Connecting the React.js Frontend to the Backend Introduction Send HTTP Requests & Use Response Data Handle Errors & Loading State Update User Interface Sending a POST Request to the Backend Modifying Auth.js on Frontend // src/user/pages/Auth.js // ... const Auth = () => { // ... const authSubmitHandler = async event => { event.preventDefault(); if (isLoginMode) { } else { try { const response = await fetch('http://localhost:5000/api/users/signup', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ name: formState.inputs.name.value, email: formState.inputs.email.value, password: formState.inputs.password.value }) }); const responseData = await response.json(); console.log(responseData); } catch (err) { console.log(err); } } auth.login(); }; // ... } // ... Handling CORS Errors Cross Origin Resource Sharing (CORS) Enforced by browser Issue here because we are trying to send request to localhost:3000 from localhost:5000 Need to attach certain headers Modifying app.js in backend: // backend/app.js // ... app.use(bodyParser.json()); app.use((req, res, next) => { res.setHeader('Access-Control-Allow-Origin', '*'); res.setHeader( 'Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization' ); res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PATCH, DELETE'); next(); }); // ... Getting Started with Error Handling Modify Auth.js: // src/user/pages/Auth.js // ... // these components are provided in the course import ErrorModal from '../../shared/components/UIElements/ErrorModal'; import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'; // ... const Auth = () => { // ... const [isLoading, setIsLoading] = useState(false); const [error, setError] = useState(); // ... const authSubmitHandler = async event => { event.preventDefault(); if (isLoginMode) { } else { try { setIsLoading(true); const response = await fetch('http://localhost:5000/api/users/signup', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ name: formState.inputs.name.value, email: formState.inputs.email.value, password: formState.inputs.password.value }) }); const responseData = await response.json(); console.log(responseData); setIsLoading(false); auth.login(); } catch (err) { console.log(err); setIsLoading(false); setError(err.message || 'Something went wrong, please try again.'); } } setIsLoading(false); }; return ( <Card className='authentication'> {isLoading && <LoadingSpinner asOverlay />} { /* ... */ } </Card> ); }; export default Auth; Proper Error Handling in the Frontend Technically no error in fetch() when getting back a 400ish or 500ish error code. Modifying Auth.js // src/user/pages/Auth.js // ... const Auth = () => { // ... const authSubmitHandler = async event => { event.preventDefault(); if (isLoginMode) { } else { try { setIsLoading(true); const response = await fetch('http://localhost:5000/api/users/signup', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ name: formState.inputs.name.value, email: formState.inputs.email.value, password: formState.inputs.password.value }) }); const responseData = await response.json(); if (!response.ok) { throw new Error(responseData.message); } console.log(responseData); setIsLoading(false); auth.login(); } catch (err) { console.log(err); setIsLoading(false); setError(err.message || 'Something went wrong, please try again.'); } } setIsLoading(false); }; const errorHandler = () => { setError(null); }; return ( <React.Fragment> <ErrorModal error={error} onClear={errorHandler} /> <Card className='authentication'> {isLoading && <LoadingSpinner asOverlay />} { /* ... */ } </Card> </React.Fragment> ); }; export default Auth; Sending a Login Request Duplicating signup but with small changes, in Auth.js: // src/user/pages/Auth.js // ... const Auth = () => { // ... const authSubmitHandler = async event => { event.preventDefault(); setIsLoading(true); if (isLoginMode) { try { const response = await fetch('http://localhost:5000/api/users/login', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email: formState.inputs.email.value, password: formState.inputs.password.value }) }); const responseData = await response.json(); if (!response.ok) { throw new Error(responseData.message); } setIsLoading(false); auth.login(); } catch (err) { console.log(err); setIsLoading(false); setError(err.message || 'Something went wrong, please try again.'); } } else { // ... } // ... }; export default Auth; Gettig Users with a GET Request Modify Users.js: // src/user/pages/User.js import React, { useEffect, useState } from 'react'; import UsersList from '../components/UsersList'; import ErrorModal from '../../shared/components/UIElements/ErrorModal'; import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'; const Users = () => { const [isLoading, setIsLoading] = useState(false); const [error, setError] = useState(); const [loadedUsers, setLoadedUsers] = useState(); useEffect(() => { const sendRequest = async () => { setIsLoading(true); try { const response = await fetch('http://localhost:5000/api/users'); // defaults to get const responseData = await response.json(); if (!response.ok) { throw new Error(responseData.message); } setLoadedUsers(responseData.users); } catch (err) { setError(err.message); } setIsLoading(false); }; sendRequest(); }, []); const errorHandler = () => { setError(null); }; return ( <React.Fragment> <ErrorModal error={error} onClear={errorHandler} /> {isLoading && ( <div className='center'> <LoadingSpinner /> </div> )} {!isLoading && loadedUsers && <UsersList items={loadedUsers} />} </React.Fragment> ); }; export default Users; And line in UsersList.js placeCount={user.places.length} Creating a Custom HTTP Hook http-hook.js so far: // src/shared/hooks/http-hook.js import { useState, useCallback, useRef, useEffect } from 'react'; export const useHttpClient = () => { const [isLoading, setIsLoading] = useState(false); const [error, setError] = useState(); const activeHttpRequests = useRef([]); const sendRequest = useCallback( async (url, method = 'GET', body = null, headers = {}) => { setIsLoading(true); const httpAbortCtrll = new AbortController(); activeHttpRequests.current.push(httpAbortCtrll); try { const response = await fetch(url, { method, body, headers, signal: httpAbortCtrll.signal }); const responseData = await response.json(); if (!response.ok) { throw new Error(responseData.message); } return responseData; } catch (err) { setError(err.message); } setIsLoading(false); }, [] ); const clearError = () => { setError(null); }; useEffect(() => { return () => { activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort()); }; }, []); return { isLoading, error, sendRequest, clearError }; }; Improving the Custom HTTP Hook Use in Auth.js: // ... import { useHttpClient } from '../../shared/hooks/http-hook'; // ... const Auth = () => { const authSubmitHandler = async event => { event.preventDefault(); if (isLoginMode) { try { await sendRequest( 'http://localhost:5000/api/users/login', 'POST', JSON.stringify({ email: formState.inputs.email.value, password: formState.inputs.password.value }), { 'Content-Type': 'application/json' } ); auth.login(); } catch (err) {} } else { try { await sendRequest( 'http://localhost:5000/api/users/signup', 'POST', JSON.stringify({ name: formState.inputs.name.value, email: formState.inputs.email.value, password: formState.inputs.password.value }), { 'Content-Type': 'application/json' } ); auth.login(); } catch (err) {} } }; }; export default Auth; Also small changes to http-hook.js: // end of try block: setIsLoading(false); return responseData; } catch (err) { setError(err.message); setIsLoading(false); throw err; } Using the HTTP Hook to GET Users Modify Users.js useCallback in custom hook very important here, preventing infinite loops // src/user/pages/Users.js import React, { useEffect, useState } from 'react'; import UsersList from '../components/UsersList'; import ErrorModal from '../../shared/components/UIElements/ErrorModal'; import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'; import { useHttpClient } from '../../shared/hooks/http-hook'; const Users = () => { const { isLoading, error, sendRequest, clearError } = useHttpClient(); const [loadedUsers, setLoadedUsers] = useState(); useEffect(() => { const fetchUsers = async () => { try { const responseData = await sendRequest( 'http://localhost:5000/api/users' ); // defaults to get setLoadedUsers(responseData.users); } catch (err) {} }; fetchUsers(); }, [sendRequest]); return ( <React.Fragment> <ErrorModal error={error} onClear={clearError} /> {isLoading && ( <div className='center'> <LoadingSpinner /> </div> )} {!isLoading && loadedUsers && <UsersList items={loadedUsers} />} </React.Fragment> ); }; export default Users; Adding Places (POST) Modifying NewPlace.js // src/places/pages/NewPlace.js import React, { useContext } from 'react'; import { useHistory } from 'react-router-dom'; // ... import { useHttpClient } from '../../shared/hooks/http-hook'; import { AuthContext } from '../../shared/context/auth-context'; // ... const NewPlace = () => { const auth = useContext(AuthContext); const { isLoading, error, sendRequest, clearError } = useHttpClient(); const [formState, inputHandler] = useForm( { title: { value: '', isValid: false }, description: { value: '', isValid: false }, address: { value: '', isValid: false } }, false ); const history = useHistory(); const placeSubmitHandler = async event => { event.preventDefault(); try { await sendRequest( 'http://192.168.2.2:5000/api/places', 'POST', JSON.stringify({ title: formState.inputs.title.value, description: formState.inputs.description.value, address: formState.inputs.address.value, creator: auth.userId }), { 'Content-Type': 'application/json' } ); history.push('/'); // Redirect the user to a different page } catch (err) {} }; return ( <React.Fragment> <ErrorModal error={error} onClear={clearError} /> <form className='place-form' onSubmit={placeSubmitHandler}> {isLoading && <LoadingSpinner asOverlay />} <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={inputHandler} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (at least 5 characters).' onInput={inputHandler} /> <Input id='address' element='input' label='Address' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid address.' onInput={inputHandler} /> <Button type='submit' disabled={!formState.isValid}> ADD PLACE </Button> </form> </React.Fragment> ); }; export default NewPlace; Modifying users-controllers.js, auth-context.js, Auth.js, and App.js to supply a userId // backend/controllers/users-controllers.js // ... const login = async (req, res, next) => { // ... res.json({ message: 'Logged In!', user: existingUser.toObject({ getters: true }) }); }; // src/shared/context/auth-content.js export const AuthContext = createContext({ isLoggedIn: false, userId: null, login: () => {}, logout: () => {} }); // src/user/pages/Auth.js // ... import { AuthContext } from '../../shared/context/auth-context'; // ... const Auth = () => { const auth = useContext(AuthContext); // ... const authSubmitHandler = async event => { event.preventDefault(); if (isLoginMode) { try { // ... auth.login(responseData.user.id); } catch (err) { } } else { try { // ... auth.login(responseData.user.id); } catch (err) { } } }; // ... }; // src/App.js // ... const App = () => { // ... const [userId, setUserId] = useState(false); const login = useCallback(uid => { setIsLoggedIn(true); setUserId(uid); }, []); const logout = useCallback(() => { setIsLoggedIn(false); setUserId(null); }, []); // ... return ( <AuthContext.Provider value={{ isLoggedIn: isLoggedIn, userId: userId, login: login, logout: logout }} > {/* ... */} </AuthContext.Provider> ); }; // ... Loading Places by User ID Modify UserPlaces.js // src/places/pages/UserPlaces.js import React, { useEffect, useState } from 'react'; import { useParams } from 'react-router-dom'; import PlaceList from '../components/PlaceList'; import ErrorModal from '../../shared/components/UIElements/ErrorModal'; import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'; import { useHttpClient } from '../../shared/hooks/http-hook'; const UserPlaces = () => { const [loadedPlaces, setLoadedPlaces] = useState(); const { isLoading, error, sendRequest, clearError } = useHttpClient(); const userId = useParams().userId; useEffect(() => { const fetchPlaces = async () => { try { const responseData = await sendRequest( `http://192.168.2.2:5000/api/places/user/${userId}` ); setLoadedPlaces(responseData.places); } catch (err) {} }; fetchPlaces(); }, [sendRequest, userId]); return ( <React.Fragment> <ErrorModal error={error} onClear={clearError} /> {isLoading && ( <div className='center'> <LoadingSpinner />{' '} </div> )} {!isLoading && loadedPlaces && <PlaceList items={loadedPlaces} />} </React.Fragment> ); }; export default UserPlaces; Modify PlaceList.js // src/places/components/PlaceList.js // ... <PlaceItem image={place.image} // ... /> // ... Updating Places Modifying UpdatePlace.js // src/places/pages/UpdatePlace.js import React, { useEffect, useState, useContext } from 'react'; import { useParams, useHistory } from 'react-router-dom'; import Input from '../../shared/components/FormElements/Input'; import Button from '../../shared/components/FormElements/Button'; import Card from '../../shared/components/UIElements/Card'; import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'; import ErrorModal from '../../shared/components/UIElements/ErrorModal'; import { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; import { useForm } from '../../shared/hooks/form-hook'; import { useHttpClient } from '../../shared/hooks/http-hook'; import { AuthContext } from '../../shared/context/auth-context'; import './PlaceForm.css'; const UpdatePlace = () => { const { isLoading, error, sendRequest, clearError } = useHttpClient(); const [loadedPlace, setLoadedPlace] = useState(); const placeId = useParams().placeId; const history = useHistory(); const auth = useContext(AuthContext); const [formState, inputHandler, setFormData] = useForm( { title: { value: '', isValid: false }, description: { value: '', isValid: false } }, false ); useEffect(() => { const fetchPlace = async () => { try { const responseData = await sendRequest( `http://192.168.2.2:5000/api/places/${placeId}` ); setLoadedPlace(responseData.place); setFormData( { title: { value: responseData.place.title, isValid: true }, description: { value: responseData.place.description, isValid: true } }, true ); } catch (err) {} }; fetchPlace(); }, [sendRequest, placeId, setFormData]); const placeUpdateSubmitHandler = async event => { event.preventDefault(); try { await sendRequest( `http://192.168.2.2:5000/api/places/${placeId}`, 'PATCH', JSON.stringify({ title: formState.inputs.title.value, description: formState.inputs.description.value }), { 'Content-Type': 'application/json' } ); history.push('/' + auth.userId + '/places'); } catch (err) {} }; if (isLoading) { return ( <div className='center'> <LoadingSpinner /> </div> ); } if (!loadedPlace && !error) { return ( <div className='center'> <Card> <h2>Could not find place!</h2> </Card> </div> ); } return ( <React.Fragment> <ErrorModal error={error} onClear={clearError} /> {!isLoading && loadedPlace && ( <form className='place-form' onSubmit={placeUpdateSubmitHandler}> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={inputHandler} initialValue={loadedPlace.title} initialValid={true} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (min. 5 characters).' onInput={inputHandler} initialValue={loadedPlace.description} initialValid={true} /> <Button type='submit' disabled={!formState.isValid}> UPDATE PLACE </Button> </form> )} </React.Fragment> ); }; export default UpdatePlace; Deleting Places Modifying PlaceList.js, PlaceItem.js & UserPlaces.js // src/places/components/PlaceList.js // ... <PlaceItem // ... onDelete={props.onDeletePlace} /> // src/places/components/PlaceItem.js // ... import { useHttpClient } from '../../shared/hooks/http-hook'; import './PlaceItem.css'; const PlaceItem = props => { const { isLoading, error, sendRequest, clearError } = useHttpClient(); // ... const confirmDeleteHandler = async () => { setShowConfirmModal(false); try { await sendRequest( `http://192.168.2.2:5000/api/places/${props.id}`, 'DELETE' ); props.onDelete(props.id); } catch (err) {} }; return ( <React.Fragment> <ErrorModal error={error} onClear={clearError} /> { /* ... */ } <li className='place-item'> <Card className='place-item__content'> {isLoading && <LoadingSpinner asOverlay />} </Card> </li> </React.Fragment> ); }; // ... // src/places/pages/UserPlaces.js // ... const placeDeletedHandler = deletedPlaceId => { setLoadedPlaces(prevPlaces => prevPlaces.filter(place => place.id !== deletedPlaceId) ); }; // ... <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler} /> // ... Fixing NavLinks and \"My Places\" Modify NavLinks.js <NavLink to={`/${auth.userId}/places`}>MY PLACES</NavLink> Final Adjustments Modify Auth.js minimum password length to 6 to be consistent with backend Modify PlaceItem.js to not show buttons for places not belonging to that user. auth.userId === props.creatorId // as opposed to auth.isLoggedIn 11. Adding File Upload Introduction Accept & Handle Files (Images) on Backend Add File Picker on Frontend + Send File to Backend Building an ImageUpload Component ImageUpload.js so far: import React, { useRef } from 'react'; import './ImageUpload.css'; import Button from './Button'; const ImageUpload = props => { const filePickerRef = useRef(); const pickedHandler = event => { console.log(event.target); }; const pickImageHandler = () => { filePickerRef.current.click(); }; return ( <div className='form-control'> <input id={props.id} ref={filePickerRef} style={{ display: 'none' }} type='file' accept='.jpg,.png,.jpeg' onChange={pickedHandler} /> <div className={`image-upload ${props.center && 'center'}`}> <div className='image-upload__preview'> <img src='' alt='Preview' /> </div> <Button type='button' onClick={pickImageHandler}> PICK IMAGE </Button> </div> </div> ); }; export default ImageUpload; Add field to Auth.js, just after name: {!isLoginMode && <ImageUpload center id='image' />} Finishing an Using the ImageUpload Component (in a Form) Modifying Auth.js // ... if (!isLoginMode) { setFormData( { ...formState.inputs, name: undefined, image: undefined }, formState.inputs.email.isValid && formState.inputs.password.isValid ); } else { setFormData( { ...formState.inputs, name: { value: '', isValid: false }, image: { value: null, isValid: false } }, false ); } // ... {!isLoginMode && ( <ImageUpload center id='image' onInput={inputHandler} /> )} // ... On the Backend: Using Multer to Save Files npm i --save multer Starting on file-upload middleware Modifying users routes: // backend/routes/users-routes.js '/signup', fileUpload.single('image'), Filtering Files on the Backend (Images Only!) Can't rely exclusively on frontend validations! Can be changed by users! File Upload middleware final // backend/middleware/file-upload.js const multer = require('multer'); const uuid = require('uuid'); const MIME_TYPE_MAP = { 'image/png': 'png', 'image/jpeg': 'jpeg', 'image/jpg': 'jpg' }; const fileUpload = multer({ limits: 500000, storage: multer.diskStorage({ destination: (req, file, cb) => { cb(null, 'uploads/images'); }, filename: (req, file, cb) => { const ext = MIME_TYPE_MAP[file.mimetype]; cb(null, uuid() + '.' + ext); } }), fileFilter: (req, file, cb) => { const isValid = !!MIME_TYPE_MAP[file.mimetype]; let error = isValid ? null : new Error('Invalid mime type!'); cb(error, isValid); } }); module.exports = fileUpload; Wiring Frontend and Backend up Modify Auth.js // src/user/pages/Auth.js const authSubmitHandler = async event => { event.preventDefault(); if (isLoginMode) { // ... doesnt apply here } else { try { const formData = new FormData(); formData.append('email', formState.inputs.email.value); formData.append('name', formState.inputs.name.value); formData.append('password', formState.inputs.password.value); formData.append('image', formState.inputs.image.value) const responseData = await sendRequest( 'http://192.168.2.2:5000/api/users/signup', 'POST', formData // headers set automatically when using form data ); auth.login(responseData.user.id); } catch (err) {} } }; Connecting Users to Images Modifying app.js for rollback of image upload on error // backend/app.js app.use((error, req, res, next) => { if (req.file) { fs.unlink(req.file.path, err => { console.log(err); }); } // ... }); Link to User // backend/controllers/users-controllers.js // ... const createdUser = new User({ name, email, image: // old static url to external image, req.file.path, password, places: [] }); // ... Serving Images Statically Modifying app.js in backend // backend/app.js // ... app.use(bodyParser.json()); app.use('/uploads/images', express.static(path.join('uploads', 'images'))); // ... Uploading Images for New Places Modify NewPlace.js // ... import ImageUpload from '../../shared/components/FormElements/ImageUpload'; // ... const NewPlace = () => { // ... // add image to useForm data: const [formState, inputHandler] = useForm( { // ... image: { value: null, isValid: false } }, false ); // ... const placeSubmitHandler = async event => { event.preventDefault(); try { const formData = new FormData(); formData.append('title', formState.inputs.title.value); formData.append('description', formState.inputs.description.value); formData.append('address', formState.inputs.address.value); formData.append('creator', auth.userId); formData.append('image', formState.inputs.image.value); await sendRequest('http://192.168.2.2:5000/api/places', 'POST', formData); history.push('/'); // Redirect the user to a different page } catch (err) {} }; return ( <React.Fragment> {/* ... */} <ImageUpload id='image' onInput={inputHandler} errorText='Please provide an image.' /> <Button type='submit' disabled={!formState.isValid}> ADD PLACE </Button> </form> </React.Fragment> ); }; Modifying places routes // backend/routes/places-routes.js // ... const fileUpload = require('../middleware/file-upload'); // ... router.post( '/', fileUpload.single('image'), // ... ) Modify places controllers // backend/controllers/places-controllers.js const createdPlace = new Place({ title, description, address, location: coordinates, image: // 'https://upload.wikimedia.org/wikipedia/commons/1/10/Empire_State_Building_%28aerial_view%29.jpg', req.file.path, creator }); Modify PlaceItem.js: <div className='place-item__image'> <img src={`http://192.168.2.2:5000/${props.image}`} alt={props.title} /> </div> Deleting Images When Places Get Deleted Modifying places controllers // backend/controllers/places.controllers.js const fs = require('fs') // ... const deletePlace = async (req, res, next) => { // ... const imagePath = place.image; try { // ... } fs.unlink(imagePath, err => { console.log(err); }); }; 12. Adding Authentication Introduction Add Authentication Logic on both Ends How Authentication Works (in aa MERN App) Hashing the User Password Never store passwords in plain text! Using bcrypt.js npm i --save bcrypt.js Utilize in signup user controller // backend/controllers/users-controllers/signup() const bcrypt = require('bcryptjs'); // ... let hashedPassword; try { hashedPassword = await bcrypt.hash(password, 12); } catch (err) { const error = new HttpError( 'Could not create user, please try again.', 500 ); return next(error); } const createdUser = new User({ // ... password: hashedPassword, // ... }); Logging Users In (with Hashed Passwords) Utilize in login user controller // backend/controllers/users-controllers/login() let isValidPassword = false; try { isValidPassword = await bcrypt.compare(password, existingUser.password); } catch (err) { const error = new HttpError( 'Could not log you in, please check your credentials and try again.', 500 ); return next(error); } if (!isValidPassword) { const error = new HttpError( 'Invalid credentials, could not log you in.', 401 ); return next(error); } res.json({ /* ... */}) Generating Tokens (JWT) on the Backend With jsonwebtoken npm i --save jsonwebtoken Utilize in login user controller // backend/controllers/users-controllers.js const jwt = require('jsonwebtoken'); // ... const signup = async (req, res, next) => { let token; try { token = jwt.sign( { userId: createdUser.id, email: createdUser.email }, 'supersecret_dont_share', { expiresIn: '1h' } ); } catch (err) { console.log(err.message); const error = new HttpError( 'Signing up failed, please try again later.', 500 ); return next(error); } res .status(201) .json({ userId: createdUser.id, email: createdUser.email, token: token }); }; const login = async (req, res, next) => { // ... let token; try { token = jwt.sign( { userId: existingUser.id, email: existingUser.email }, 'supersecret_dont_share', { expiresIn: '1h' } ); } catch (err) { console.log(err.message); const error = new HttpError('Login failed, please try again later.', 500); return next(error); } res.json({ userId: existingUser.id, email: existingUser.email, token: token }); }; Backend Route Protection with Auth Middleware Use in header, through middleware: // backend/middleware/check-auth.js const jwt = require('jsonwebtoken'); const HttpError = require('../models/http-error'); module.exports = (req, res, next) => { try { const token = req.headers.authorization.split(' ')[1]; // Authorization: 'Bearer TOKEN' if (!token) { throw new Error('Authentication failed!'); } const decodedToken = jwt.verify(token, 'supersecret_dont_share'); req.userData = { userId: decodedToken.userId }; next(); } catch (err) { const error = new HttpError('Authentication failed!', 401); return next(error); } }; Remember, order is important with routes, top to bottom! // backend/routes/places-routes.js // ... const checkAuth = require('../middleware/check-auth'); // ... router.get('/user/:uid', placesControllers.getPlacesByUserId); router.use(checkAuth); Using and Attaching JWT (Tokens) in React Modify auth login in Auth.js // src/user/pages/Auth.js // in BOTH login & signup modes: auth.login(responseData.userId, responseData.token); Modify in App.js // src/App.js const App = () => { const [token, setToken] = useState(false); // ... const login = useCallback((uid, token) => { setToken(token); setUserId(uid); }, []); const logout = useCallback(() => { setToken(null); setUserId(null); }, []); let routes; if (token) { /**/ } // ... return( <AuthContext.Provider value={{ isLoggedIn: !!token, token: token, // ... }} > { /**/ } </ AuthContext.Provider> ); Also modify the auth context // src/shared/context/auth-context.js import { createContext } from 'react'; export const AuthContext = createContext({ isLoggedIn: false, userId: null, token: null, login: () => {}, logout: () => {} }); Add token to header on new place request // src/places/pages/NewPlace.js await sendRequest('http://192.168.2.2:5000/api/places', 'POST', formData, { Authorization: 'Bearer ' + auth.token }); Handling OPTIONS Request // backend/middleware/check-auth.js module.exports = (req, res, next) => { if (req.method === 'OPTIONS') { return next(); } // ... }; Using Tokens to Update and Delete Places Modifying UpdatePlace.js // src/places/pages/UpdatePlace.js // add auth header to update(patch) request: { 'Content-Type': 'application/json', Authorization: 'Bearer ' + auth.token } Set up for delete in PlaceItem.js: // src/places/pages/UpdatePlace.js // in confirm delete handler: 'DELETE', null, { Authorization: 'Bearer ' + auth.token } Adding Authorization On the backend, updating places: // backend/controllers/places-controllers.js // in updatePlace(): if (place.creator.toString() !== req.userData.userId) { const error = new HttpError('You are not allowed to edit this place.', 401); return next(error); } place.title = title; // ... Authorization on \"Delete Places\" On the backend, deleting places: // backend/controllers/places-controllers.js // in deletePlace(): if (place.creator.id !== req.userData.userId) { const error = new HttpError('You are not allowed to edit this place.', 401); return next(error); } const imagePath = place.image; Storing the Token in the Browser Storage Have Token survive page reloads by storing in browser's local storage Modify App.js on frontend: // src/App.js const login = useCallback((uid, token) => { setToken(token); localStorage.setItem( 'userData', JSON.stringify({ userId: uid, token: token }) ); setUserId(uid); }, []); Adding Auto-Login (Basic Version) By utilizing useEffect in App.js: // src/App.js const logout = useCallback(() => { setToken(null); setUserId(null); localStorage.removeItem('userData'); }, []); useEffect(() => { const storedData = JSON.parse(localStorage.getItem('userData')); if (storedData && storedData.token) { login(storedData.userId, storedData.token); } }, [login]); Managing the Token Expiration Date Modify App.js: const login = useCallback((uid, token, expirationDate) => { setToken(token); setUserId(uid); const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60); localStorage.setItem( 'userData', JSON.stringify({ userId: uid, token: token, expiration: tokenExpirationDate.toISOString() }) ); }, []); // ... // also make sure to pass in useEffect: useEffect(() => { const storedData = JSON.parse(localStorage.getItem('userData')); if ( storedData && storedData.token && new Date(storedData.expiration) > new Date() ) { login( storedData.userId, storedData.token, new Date(storedData.expiration) ); } }, [login]); Finished Auto-Login & Auto Logout Set up logout timer in App.js with another useEffect // src/App.js // ... let logoutTimer; const App = () => { const [tokenExpirationDate, setTokenExpirationDate] = useState(); // ... const logout = useCallback(() => { setToken(null); setTokenExpirationDate(null); setUserId(null); localStorage.removeItem('userData'); }, []); useEffect(() => { if (token && tokenExpirationDate) { const remainingTime = tokenExpirationDate.getTime() - new Date().getTime(); logoutTimer = setTimeout(logout, remainingTime); } else { clearTimeout(logoutTimer); } }, [token, logout, tokenExpirationDate]); }; Creating a Custom Authentication Hook Move auth logic from App.js to custom hook // src/shared/hooks/auth-hook.js import { useState, useCallback, useEffect } from 'react'; let logoutTimer; export const useAuth = () => { const [token, setToken] = useState(false); const [tokenExpirationDate, setTokenExpirationDate] = useState(); const [userId, setUserId] = useState(false); const login = useCallback((uid, token, expirationDate) => { setToken(token); setUserId(uid); const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60); setTokenExpirationDate(tokenExpirationDate); localStorage.setItem( 'userData', JSON.stringify({ userId: uid, token: token, expiration: tokenExpirationDate.toISOString() }) ); }, []); const logout = useCallback(() => { setToken(null); setTokenExpirationDate(null); setUserId(null); localStorage.removeItem('userData'); }, []); useEffect(() => { if (token && tokenExpirationDate) { const remainingTime = tokenExpirationDate.getTime() - new Date().getTime(); const minutesLeft = remainingTime / 60000; console.log(minutesLeft + ' minutes left.'); logoutTimer = setTimeout(logout, remainingTime); } else { clearTimeout(logoutTimer); } }, [token, logout, tokenExpirationDate]); useEffect(() => { const storedData = JSON.parse(localStorage.getItem('userData')); if ( storedData && storedData.token && new Date(storedData.expiration) > new Date() ) { login( storedData.userId, storedData.token, new Date(storedData.expiration) ); } }, [login]); return { token, login, logout, userId }; }; App.js final import React from 'react'; import { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'; import Users from './user/pages/Users'; import NewPlace from './places/pages/NewPlace'; import UserPlaces from './places/pages/UserPlaces'; import UpdatePlace from './places/pages/UpdatePlace'; import Auth from './user/pages/Auth'; import MainNavigation from './shared/components/Navigation/MainNavigation'; import { AuthContext } from './shared/context/auth-context'; import { useAuth } from './shared/hooks/auth-hook'; const App = () => { const { token, login, logout, userId } = useAuth(); let routes; if (token) { routes = ( <Switch> <Route path='/' exact> <Users /> </Route> <Route path='/:userId/places'> <UserPlaces /> </Route> <Route path='/places/new' exact> <NewPlace /> </Route> <Route path='/places/:placeId'> <UpdatePlace /> </Route> <Redirect to='/' /> </Switch> ); } else { routes = ( <Switch> <Route path='/' exact> <Users /> </Route> <Route path='/:userId/places'> <UserPlaces /> </Route> <Route path='/auth' exact> <Auth /> </Route> <Redirect to='/auth' /> </Switch> ); } return ( <AuthContext.Provider value={{ isLoggedIn: !!token, token: token, userId: userId, login: login, logout: logout }} > <Router> <MainNavigation /> <main>{routes}</main> </Router> </AuthContext.Provider> ); }; export default App; General App Improvements Modify places controllers to get creator from userData instead of req body const createdPlace = new Place({ // ... creator: req.userData.userId }); 13. Application Deployment Introduction Deployment Preparation Different Ways of Deploying MERN Apps Deployment Steps Overview Develop & Test Your Code Swap URLs & Credentials for Production-ready Ones Consider using Environment Variables Build & Deploy Test Deployed Application, Monitor & Adjust Using Environment Variables Utilizing nodemon // backend/nodemon.json { \"env\": { \"DB_URL\": \"mongodb://localhost:27017/react-training\", \"PORT\": 5000, \"GOOGLE_API_KEY\": \"AIzaSyC7ap01wqRWATA7guCbFBvIgpbYZwKQIEo\", \"JWT_KEY\": \"supersecret_dont_share\" } } Environment Variables in React Apps Achieved with .env file in root folder Everyone can see because it is running in browser!! REACT_APP_GOOGLE_API_KEY=AIzaSyC7ap01wqRWATA7guCbFBvIgpbYZwKQIEo REACT_APP_BACKEND_URL=http://192.168.2.2:5000/api REACT_APP_ASSET_URL=http://192.168.2.2:5000 <!-- how to replace in index.html for google api key: --> <script src=\"https://maps.googleapis.com/maps/api/js?key=%REACT_APP_GOOGLE_API_KEY%\" async defer ></script> Replace all instances of localhost, 192.168.2.2, etc with React env variables ${process.env.REACT_APP_BACKEND_URL} Preparing API Keys and Credentials Application & Key restrictions on Google API keys Configuring whitelist for (cloud) mongodb database Building the React App To build: npm run build Using production environment variables: Using .env.production file Automatically picked up by npm run build Swap API keys, etc Will revisit URLs (i.e. localhost) Adding Code Splitting to React Prevent loading code that is not needed yet (lazy loading) Modify App.js // src/App.js import React, { Suspense } from 'react'; // import Users from './user/pages/Users'; // import NewPlace from './places/pages/NewPlace'; // import UserPlaces from './places/pages/UserPlaces'; // import UpdatePlace from './places/pages/UpdatePlace'; // import Auth from './user/pages/Auth'; const Users = React.lazy(() => import('./user/pages/Users')); const NewPlace = React.lazy(() => import('./places/pages/NewPlace')); const UserPlaces = React.lazy(() => import('./places/pages/UserPlaces')); const UpdatePlace = React.lazy(() => import('./places/pages/UpdatePlace')); const Auth = React.lazy(() => import('./user/pages/Auth')); // also need to wrap routes with Suspense <Router> <MainNavigation /> <main> <Suspense fallback={ <div className='center'> <LoadingSpinner /> </div> } > {routes} </Suspense> </main> </Router> Understanding Possible Deployment Alternatives Two main options Deploy Two Separated Apps React App Static Host (only serve HTML, JS, and CSS) AWS S3, Firebase Hosting, etc... Node REST API Node.js Host AWS EC2 / EB, Heroku, etc... CORS Headers absolutely required! Deploy One Combined App Node REST API which renders the React App, too Node.js Host AWS EC2 / EB, Heroku, etc... CORS Headers are NOT required! Deploying a Standalone REST API (Example: Heroku) Hosting the NodeJS application Use Heroku Create account Initialize git on project Install and setup heroku CLI Setup deployment Settings > Config Vars (for environment variables) Make sure to set up port (heroku gives with process.env.PORT ) Whitelist network connection for MongoDB <--> Heroku Push code to Heroku Deploying a Standalone React SPA (Example: Firebase Hosting) Replace React production environment variables for backend/asset URLs Can use npm i -g serve to serve static content to test the React web app build before deployment Use Firebase Hosting for hosting static React app Install firebase tools firebase login firebase init (in project folder) Public directory? build Single-page-app? yes Don't overwrite index.html firebase deploy Fixing Style Issues Styling issue related to ordering of styles use !important or specify with .card.user-item__content Deploying a Combined App Grab build folder and copy to backend React environment variables may change (urls) Copy build folder into a backend/public/ folder After routes in app.js, serve public folder statically (comment out error for not found routes) // ... app.use('/api/users', usersRoutes); // => /api/users/ ... app.use(express.static(path.join('public'))); // app.use((req, res, next) => { // const error = new HttpError('Could not find this route.', 404); // throw error; // }); // ... Then move to top and create catch-all route: app.use('/uploads/images', express.static(path.join('uploads', 'images'))); app.use(express.static(path.join('public'))); // ... app.use('/api/users', usersRoutes); // => /api/users/ ... app.use((req, res, next) => { res.sendFile(path.resolve(__dirname, 'public', 'index.html')); }); Now we can deploy it (heroku) Storing Files/Uploads Files aren't persistently stored and are lost when server restarts Host statically elsewhere? (Heroku specific solutions) The End","title":"MERN"},{"location":"mern/#mern-stack","text":"Notes based on Udemy Course React, NodeJS, Express & MongoDB - The MERN Fullstack Guide","title":"MERN Stack"},{"location":"mern/#1-introduction","text":"","title":"1. Introduction"},{"location":"mern/#what-is-the-mern-stack","text":"M ongoDB E xpress R eact N ode.js","title":"What is the \"MERN Stack\""},{"location":"mern/#what-is-react","text":"A Client-Side (Browser) Library which allows you to build highly reactive user interfaces Render UI with Dynamic Data Handle User Input Communicate with Backend Services Provides a \"Mobile App\"-like User Experience","title":"What is React?"},{"location":"mern/#what-is-node","text":"A Server-side Runtime: Javascript on the Server-side Listen to Requests and Send Responses Execute Server-side Logic Interact with Databases and Files An Alternative to PHP, Ruby on Rails, Java etc. Is rarely used Standalone!","title":"What is Node?"},{"location":"mern/#what-is-express","text":"A Node Framework which simplifies writing Server-side Code and Logic. Based on Node, offers same Functionalities Middleware-based: Funnel Requests through Functions Includes Routing, View-rendering & More Simplifies the Usage of Node. Express is for Node what Laravel would be for PHP.","title":"What is Express?"},{"location":"mern/#what-is-mongodb","text":"A NoSQL Database which stores \"Documents\" in \"Collections\" (instead of \"Records\" in \"Tables\" as in SQL). Store Application Data (Users, Products, ...) Enforces no Data Schema or Relations Easily connected to Node/Express (NOT to React!) A powerful Database which can easily be integrated into a Node/Express Environment","title":"What is MongoDB?"},{"location":"mern/#mern-a-first-overview","text":"","title":"MERN - A First Overview"},{"location":"mern/#course-outline","text":"Getting Started MERN in Theory React Frontend Components, Hooks, Routing Frontend User Input Validation Node + Express + MongoDB Backend REST API, ROutes, Controllers, Models Backend User Input Connecting Both Ends File Upload Authentication Deployment","title":"Course Outline"},{"location":"mern/#2-the-mern-stack-theory","text":"","title":"2. The MERN Stack - Theory"},{"location":"mern/#understanding-the-big-picture","text":"","title":"Understanding the Big Picture"},{"location":"mern/#diving-into-the-frontend","text":"React SPA (Single Page Application)","title":"Diving into the Frontend"},{"location":"mern/#understanding-the-backend","text":"","title":"Understanding the Backend"},{"location":"mern/#rest-vs-graphql","text":"","title":"REST vs GraphQL"},{"location":"mern/#connecting-node-react","text":"","title":"Connecting Node &amp; React"},{"location":"mern/#diving-deeper-into-the-code","text":"","title":"Diving Deeper into the Code"},{"location":"mern/#using-simple-mern-project","text":"","title":"Using simple-mern-project"},{"location":"mern/#backend","text":"Basic backend server setup // backend/server.js const express = require('express'); const bodyParser = require('body-parser'); const uuid = require('uuid/v4'); const app = express(); const DUMMY_PRODUCTS = []; // not a database, just some in-memory storage for now app.use(bodyParser.json()); // CORS Headers => Required for cross-origin/ cross-server communication app.use((req, res, next) => { res.setHeader('Access-Control-Allow-Origin', '*'); res.setHeader( 'Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization' ); res.setHeader( 'Access-Control-Allow-Methods', 'GET, POST, PATCH, DELETE, OPTIONS' ); next(); }); app.get('/products', (req, res, next) => { res.status(200).json({ products: DUMMY_PRODUCTS }); }); app.post('/product', (req, res, next) => { const { title, price } = req.body; if (!title || title.trim().length === 0 || !price || price <= 0) { return res.status(422).json({ message: 'Invalid input, please enter a valid title and price.' }); } const createdProduct = { id: uuid(), title, price }; DUMMY_PRODUCTS.push(createdProduct); res .status(201) .json({ message: 'Created new product.', product: createdProduct }); }); app.listen(5000); // start Node + Express server on port 5000","title":"Backend"},{"location":"mern/#frontend","text":"Components Functions or classes index.js Entry point to frontend Application App.js HTML in javascript Use React Hooks Help with managing state useState, useEffect","title":"Frontend"},{"location":"mern/#3-planning-the-app","text":"","title":"3. Planning the App"},{"location":"mern/#module-introduction","text":"","title":"Module Introduction"},{"location":"mern/#general-planning-steps","text":"Come up with an idea / solve a problem Create a design / sketch Plan your data models (the data you'll work with) Plan your endpoints (API, backend) and pages (SPA, frontend)","title":"General Planning Steps"},{"location":"mern/#understanding-the-general-app-idea","text":"","title":"Understanding the General App Idea"},{"location":"mern/#data-api-endpoints-used-in-our-app","text":"","title":"Data &amp; API Endpoints used in our App"},{"location":"mern/#required-spa-pages-for-the-frontend","text":"","title":"Required SPA Pages for the Frontend"},{"location":"mern/#4-reactjs-a-refresher","text":"","title":"4. React.js - A Refresher"},{"location":"mern/#what-is-react_1","text":"A Javascript Library* for Building User Interfaces *started a huge eco-system, effectively forming a \"pseudo-framework\" Declarative Approach You define the result, not the steps that lead to the result Imperative Approach (\"normal JS\") You define all the steps to achieve the result You define components and build your UI with these components","title":"What is React?"},{"location":"mern/#setting-up-a-starting-project","text":"create-react-app","title":"Setting Up a Starting Project"},{"location":"mern/#understanding-jsx","text":"Syntax in React HTML-like code in Javascript files Translates to instructions React understands Example: import React from 'react'; const App = () => { return <h1>A React App!</h1>; // similar to React.createElement('h1', {}, 'Hello!'); }; export default App; Similar example: const App = () => { return <h1 title=\"it works!\">Hello!</h1>; // similar to React.createElement('h1', {title: 'it works!'}, \"Hello!\"); };","title":"Understanding JSX"},{"location":"mern/#understanding-components","text":"All about Components Can be a function which returns JSC or returns React.createElement() calls. Can be a javascript class with a render method some technical differences to function in modern React, you can only use functional components ** Previous example as a class: class App extends React.Component { render() { return <h1 title=\"it works!\">Hello! This is ReactJS!</h1>; } } We'll only be using functional in this course Just a regular javascript function in the end What makes it a React component is that it returns JSX or React.createElement() logic Capitalize components in tags, otherwise will be treated as built-in HTML tag: <App />","title":"Understanding Components"},{"location":"mern/#working-with-multiple-components","text":"Must use className and not class in JSX code <div className=\"name\"> Styles all applied globally (in App.css here, at least) Styles are not automatically scoped to a component, normal CSS rules are applied, because all CSS files, no matter where you import them, are applied globally to entire page. GoalList component example: // src/components/GoalList.js import React from 'react'; import './GoalList.css'; const GoalList = () => { return ( <ul className='goal-list'> <li>Finish the Course</li> <li>Learn all about Course main topics</li> <li>Help others!</li> </ul> ); }; export default GoalList; // src/App.js import React from 'react'; import GoalList from './components/GoalList'; import './App.css'; const App = () => { return <div className=\"course-goals\"> <h2>Course Goals</h2> <GoalList /> </div>; }; export default App;","title":"Working with Multiple Components"},{"location":"mern/#using-props-to-pass-data-between-components","text":"Pass data from component to component with a concept called props Changing GoalList to dynamic props as GoalList parameter, object passed to React functional component automatically, object that is bundle of all the props you passed to component","title":"Using Props to pass Data between Components"},{"location":"mern/#rendering-lists-of-data","text":"Can use hardcoded data, but need to map every object into a list item in the end. Will need to use map() JS function. Must also use unique key GoalList Example: // src/App.js const App = () => { const courseGoals = [ {id: 'cg1', text: 'Finish the course!'}, {id: 'cg2', text: 'Learn all about Course main topics'}, {id: 'cg3', text: 'Help others!'}, ]; return <div className=\"course-goals\"> <h2>Course Goals</h2> <GoalList goals={courseGoals} /> </div>; }; export default App; // src/components/GoalList.js import React from 'react'; import './GoalList.css'; const GoalList = props => { return ( <ul className='goal-list'> {props.goals.map(goal => { return <li key={goal.id}>{goal.text}</li>; })} </ul> ); }; export default GoalList;","title":"Rendering Lists of Data"},{"location":"mern/#handling-events","text":"React component must return JSX Can add event listeners to any element Will use onSubmit with form here, must point to a function (don't give parentheses) Can use onClick and others Function will get an event object as parameter passed in automatically by React Can prevent default behavior (form submission) Now pass data from NewGoal to the parent (App component)","title":"Handling Events"},{"location":"mern/#efficient-childparent-communication","text":"Pass a callback function from the parent to the child Technically in form, used all props. No difference between class name where a string is passed and on submit where a pointer to function is passed. Can use this to pass a prop onto NewGoal in App.js, which holds pointer to a function. Example so far: // src/components/NewGoal/NewGoal.js import React from 'react'; import './NewGoal.css'; const NewGoal = props => { const addGoalHandler = event => { event.preventDefault(); const newGoal = { id: Math.random().toString(), text: 'my new goal!!' }; props.onAddGoal(newGoal); }; return <form className=\"new-goal\" onSubmit={addGoalHandler}> <input type=\"text\" /> <button type=\"submit\">Add Goal</button> </form> }; export default NewGoal; // src/App.js import React from 'react'; import GoalList from './components/GoalList/GoalList'; import NewGoal from './components/NewGoal/NewGoal'; import './App.css'; const App = () => { const courseGoals = [ {id: 'cg1', text: 'Finish the course!'}, {id: 'cg2', text: 'Learn all about Course main topics'}, {id: 'cg3', text: 'Help others!'}, ]; const addNewGoalHandler = (newGoal) => { courseGoals.push(newGoal); console.log(courseGoals); } return <div className=\"course-goals\"> <h2>Course Goals</h2> <NewGoal onAddGoal={addNewGoalHandler} /> <GoalList goals={courseGoals} /> </div>; }; export default App;","title":"Efficient Child&lt;=&gt;Parent Communication"},{"location":"mern/#working-with-state","text":"Need to explicitly tell React when to update UI Do this using state Use hook function useState useState() returns array of exactly 2 elements Latest state snapshot Function that allows us to update that state and tell React it should re-render Pass courseGoals array into useState() Updated App.js: // src/App.js import React, { useState } from 'react'; import GoalList from './components/GoalList/GoalList'; import NewGoal from './components/NewGoal/NewGoal'; import './App.css'; const App = () => { const [courseGoals, setCourseGoals] = useState([ {id: 'cg1', text: 'Finish the course!'}, {id: 'cg2', text: 'Learn all about Course main topics'}, {id: 'cg3', text: 'Help others!'}, ]); const addNewGoalHandler = (newGoal) => { setCourseGoals(courseGoals.concat(newGoal)); } return <div className=\"course-goals\"> <h2>Course Goals</h2> <NewGoal onAddGoal={addNewGoalHandler} /> <GoalList goals={courseGoals} /> </div>; }; export default App;","title":"Working with \"State\""},{"location":"mern/#more-on-state","text":"State is a crucial concept in React Whenever you update the state snapshot, React does 2 things Update internally stored state data. Will then can the component function again Re-evaluates entire component, not necessarily the entire DOM useState() ignores initial and previous snapshots on update, replaces it. This is why we passed courseGoals.concat(newGoal) to setCourseGoals() This is actually not the best possible way to update state, due to deferring state updates. Better method: setCourseGoals((prevCourseGoals) => { return prevCourseGoals.concat(newGoal); }); Shorthand version: setCourseGoals(prevCourseGoals => prevCourseGoals.concat(newGoal)); Only need if state update depends on previous state data.","title":"More on State"},{"location":"mern/#fetching-user-input-two-way-binding","text":"Store user input in some variable, the pass to new goal. Using onChange event Flawed on its own here, even when giving value of variable to input tag Must use state Manipulate and reset input field Updated NewGoal.js: // src/components/NewGoal/NewGoal.js import React, { useState } from 'react'; import './NewGoal.css'; const NewGoal = props => { const [enteredText, setEnteredText] = useState(''); const addGoalHandler = event => { event.preventDefault(); const newGoal = { id: Math.random().toString(), text: enteredText }; setEnteredText(''); props.onAddGoal(newGoal); }; const textChangeHandler = event => { setEnteredText(event.target.value); }; return <form className=\"new-goal\" onSubmit={addGoalHandler}> <input type=\"text\" value={enteredText} onChange={textChangeHandler} /> <button type=\"submit\">Add Goal</button> </form> }; export default NewGoal;","title":"Fetching User Input (Two-way Binding)"},{"location":"mern/#5-reactjs-building-the-frontend","text":"","title":"5. React.js - Building the Frontend"},{"location":"mern/#introduction","text":"Create React (Single Page) App Add Routing & Core Pages Split Into Core Components UI Components + CSS Styling","title":"Introduction"},{"location":"mern/#starting-setup-paes-routes","text":"Two ways to organize Pages & Components folders Separate by Feature Will use this method here: places/-| |- pages/ |- components/ shared/-| |- components/ user/-| |- pages/ |- components/ Install third party routing package npm i --save react-router-dom App component will be starting point for router Route path treated as filter, use exact property. Use Redirect for others as well Use Switch to not redirect if able to find a path App.js so far: import React from 'react'; import { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'; import Users from './user/pages/Users'; import NewPlace from './places/pages/NewPlace'; const App = () => { return ( <Router> <Switch> <Route path=\"/\" exact> <Users /> </Route> <Route path=\"/places/new\" exact> <NewPlace /> </Route> <Redirect to=\"/\" /> </Switch> </Router> ); } export default App;","title":"Starting Setup, Paes &amp; Routes"},{"location":"mern/#adding-a-userslist-page-component","text":"","title":"Adding a UsersList Page / Component"},{"location":"mern/#wiring-up-user-components","text":"User.js so far: // src/user/pages/User.js import React from 'react'; import UsersList from '../components/UsersList'; const Users = () => { const USERS = [ { id: 'u1', name: 'John', image: 'https://images.heb.com/is/image/HEBGrocery/cat-medium/flowers-2868.jpg', places: 3 } ]; return <UsersList items={USERS} />; }; export default Users; UsersList.js so far: import React from 'react'; import UserItem from './UserItem'; import './UsersList.css'; const UsersList = props => { if (props.items.length === 0) { return ( <div className='center'> <h2>No users found.</h2> </div> ); } return ( <ul> {props.items.map(user => ( <UserItem key={user.id} id={user.id} image={user.image} name={user.name} placeCount={user.places} /> ))} </ul> ); }; export default UsersList; UserItem.js so far: import React from 'react'; import './UserItem.css'; const UserItem = props => {}; export default UserItem;","title":"Wiring up User components"},{"location":"mern/#adding-a-useritem-component","text":"Added className=\"users-list\" to <ul> tag in UsersList.js UserItem.js so far: // src/user/components/UserItem.js import React from 'react'; import './UserItem.css'; const UserItem = props => { return ( <li className=\"user-item\"> <div className=\"user-item__content\"> <div className=\"user-item__image\"> <img src={props.image} alt={props.name}/> </div> <div className=\"user-item__info\"> <h2>{props.name}</h2> <h3>{props.placeCount} {props.placeCount === 1 ? 'Place' : 'Places'}</h3> </div> </div> </li> ); }; export default UserItem;","title":"Adding a UserItem Component"},{"location":"mern/#styling-our-app-more-components","text":"Use Avatar.js & Avatar.css and Card.js & Card.css provided for styling. Updated UserItem.js: import React from 'react'; import { Link } from 'react-router-dom'; import Avatar from '../../shared/components/UIElements/Avatar'; import Card from '../../shared/components/UIElements/Card'; import './UserItem.css'; const UserItem = props => { return ( <li className='user-item'> <Card className='user-item__content'> <Link to={`/${props.id}/places`}> <div className='user-item__image'> <Avatar image={props.image} alt={props.name} /> </div> <div className='user-item__info'> <h2>{props.name}</h2> <h3> {props.placeCount} {props.placeCount === 1 ? 'Place' : 'Places'} </h3> </div> </Link> </Card> </li> ); }; export default UserItem;","title":"Styling our App &amp; More Components"},{"location":"mern/#presentational-vs-stateful-components","text":"Presentational Just output content, structure, styling Card/Avatar components are good examples of this. UserItem also. Stateful Smarter, manage some state, orchestrate that child components receive new data, etc.","title":"Presentational vs Stateful Components"},{"location":"mern/#adding-a-main-header","text":"Add Card component to UsersList in event of no users. props.children special prop that React knows. Will always refer to the things you pass between your opening and closing tags of component. Placeholder for the content you enter between the opening and closing tag of your own component. // src/share/components/Navigation/MainHeader.js import React from 'react'; import './MainHeader.css'; const MainHeader = props => { return <header className='main-header'>{props.children}</header>; }; export default MainHeader; // src/share/components/Navigation/MainNavigation.js import React from 'react'; import { Link } from 'react-router-dom'; import MainHeader from './MainHeader'; import './MainNavigation.css'; const MainNavigation = props => { return ( <MainHeader> <button className='main-navigation__menu-btn'> <span /> <span /> <span /> </button> <h1 className='main-navigation__title'> <Link to='/'>YourPlaces</Link> </h1> <nav>...</nav> </MainHeader> ); }; export default MainNavigation;","title":"Adding a Main Header"},{"location":"mern/#adding-navlinks","text":"// src/shared/components/Navigation/NavLinks.js import React from 'react'; import { NavLink } from 'react-router-dom'; import './NavLinks.css'; const NavLinks = props => { return <ul className=\"nav-links\"> <li> <NavLink to=\"/\" exact>ALL USERS</NavLink> </li> <li> <NavLink to=\"/u1/places\">MY PLACES</NavLink> </li> <li> <NavLink to=\"/places/new\">ADD PLACE</NavLink> </li> <li> <NavLink to=\"/auth\">AUTHENTICATE</NavLink> </li> </ul> }; export default NavLinks; Then insert in MainNavigation <nav><NavLinks /></nav>","title":"Adding Navlinks"},{"location":"mern/#implementing-a-basic-desktop-mobile-navigation","text":"","title":"Implementing a Basic Desktop &amp; Mobile Navigation"},{"location":"mern/#two-main-changes","text":"Add CSS class to nav in MainNavigation.js ` Develop SideDrawer.js Note: Can only have one root jsx element per component Can use React.Fragment to fulfill this requirement. SideDrawer.js so far: import React from 'react'; import { Link } from 'react-router-dom'; import MainHeader from './MainHeader'; import NavLinks from './NavLinks'; import SideDrawer from './SideDrawer'; import './MainNavigation.css'; const MainNavigation = props => { return ( <React.Fragment> <SideDrawer> <nav className='main-navigation__drawer-nav'> <NavLinks /> </nav> </SideDrawer> <MainHeader> <button className='main-navigation__menu-btn'> <span /> <span /> <span /> </button> <h1 className='main-navigation__title'> <Link to='/'>YourPlaces</Link> </h1> <nav className='main-navigation__header-nav'> <NavLinks /> </nav> </MainHeader> </React.Fragment> ); }; export default MainNavigation;","title":"Two Main Changes"},{"location":"mern/#understanding-portals","text":"Portals in React allows us to project/render a component in a different place than it would normally be rendered. Add <div id=\"drawer-hook\"></div> into index.html, in body just after no script. This is where SideDrawer will be rendered. SideDrawer.js so far: import React from 'react'; import ReactDOM from 'react-dom'; import './SideDrawer.css'; const SideDrawer = props => { const content = <aside className=\"side-drawer\">{props.children}</aside>; return ReactDOM.createPortal(content, document.getElementById('drawer-hook')); }; export default SideDrawer; Drawer still always visible, no animation.","title":"Understanding Portals"},{"location":"mern/#handling-the-drawer-state","text":"Add <div id=\"backdrop-hook\"></div> into index.html, just before drawer hook. Backdrop.js import React from 'react'; import ReactDOM from 'react-dom'; import './Backdrop.css'; const Backdrop = props => { return ReactDOM.createPortal( <div className=\"backdrop\" onClick={props.onClick}></div>, document.getElementById('backdrop-hook') ); }; export default Backdrop; SideDrawer.js so far: import React from 'react'; import ReactDOM from 'react-dom'; import './SideDrawer.css'; const SideDrawer = props => { const content = <aside className=\"side-drawer\">{props.children}</aside>; return ReactDOM.createPortal(content, document.getElementById('drawer-hook')); }; export default SideDrawer;","title":"Handling the Drawer State"},{"location":"mern/#animating-the-sidedrawer","text":"Install third party library npm i --save react-transition-group SideDrawer.js: import React from 'react'; import ReactDOM from 'react-dom'; import { CSSTransition } from 'react-transition-group'; import './SideDrawer.css'; const SideDrawer = props => { const content = ( <CSSTransition in={props.show} timeout={200} classNames='slide-in-left' mountOnEnter unmountOnExit > <aside className='side-drawer' onClick={props.onClick}>{props.children}</aside> </CSSTransition> ); return ReactDOM.createPortal(content, document.getElementById('drawer-hook')); }; export default SideDrawer; MainNavigation.js import React, { useState } from 'react'; import { Link } from 'react-router-dom'; import MainHeader from './MainHeader'; import NavLinks from './NavLinks'; import SideDrawer from './SideDrawer'; import BackDrop from '../UIElements/Backdrop'; import './MainNavigation.css'; const MainNavigation = props => { const [drawerIsOpen, setDrawerIsOpen] = useState(false); const openDrawer = () => { setDrawerIsOpen(true); }; const closeDrawerHandler = () => { setDrawerIsOpen(false); }; return ( <React.Fragment> {drawerIsOpen && <BackDrop onClick={closeDrawerHandler} />} <SideDrawer show={drawerIsOpen} onClick={closeDrawerHandler}> <nav className='main-navigation__drawer-nav'> <NavLinks /> </nav> </SideDrawer> <MainHeader> <button className='main-navigation__menu-btn' onClick={openDrawer}> <span /> <span /> <span /> </button> <h1 className='main-navigation__title'> <Link to='/'>YourPlaces</Link> </h1> <nav className='main-navigation__header-nav'> <NavLinks /> </nav> </MainHeader> </React.Fragment> ); }; export default MainNavigation;","title":"Animating the Sidedrawer"},{"location":"mern/#rendering-user-places-using-dynamic-route-segments","text":"PlaceItem.js so far: // src/places/components/PlaceItem.js import React from 'react'; import Card from '../../shared/components/UIElements/Card'; import './PlaceItem.css'; const PlaceItem = props => { return ( <li className='place-item'> <Card className='place-item__content'> <div className='place-item__image'> <img src={props.image} alt={props.title} /> </div> <div className='place-item__info'> <h2>{props.title}</h2> <h3>{props.address}</h3> <p>{props.description}</p> </div> <div className='place-item__actions'> <button>VIEW ON MAP</button> <button>EDIT</button> <button>DELETE</button> </div> </Card> </li> ); }; export default PlaceItem; PlaceList.js so far: // src/places/components/PlaceList.js import React from 'react'; import Card from '../../shared/components/UIElements/Card'; import PlaceItem from './PlaceItem'; import './PlaceList.css'; const PlaceList = props => { if (props.items.length === 0) { return ( <div className='place-list center'> <Card> <h2>No places found. Maybe create one?</h2> <button>Share Place</button> </Card> </div> ); } return ( <ul className='place-list'> {props.items.map(place => ( <PlaceItem key={place.id} id={place.id} image={place.imageUrl} title={place.title} description={place.description} address={place.address} creatorId={place.creator} coordinates={place.location} /> ))} </ul> ); }; export default PlaceList; import React from 'react'; import Card from '../../shared/components/UIElements/Card'; import PlaceItem from './PlaceItem'; import './PlaceList.css'; const PlaceList = props => { if (props.items.length === 0) { return ( <div className='place-list center'> <Card> <h2>No places found. Maybe create one?</h2> <button>Share Place</button> </Card> </div> ); } return ( <ul className='place-list'> {props.items.map(place => ( <PlaceItem key={place.id} id={place.id} image={place.imageUrl} title={place.title} description={place.description} address={place.address} creatorId={place.creator} coordinates={place.location} /> ))} </ul> ); }; export default PlaceList; UserPlaces.js so far: // src/places/pages/UserPlaces.js import React from 'react'; import PlaceList from '../components/PlaceList'; const UserPlaces = () => { const DUMMY_PLACES = [ { id: 'p1', title: 'Empire State Building', description: 'One of the most famous sky scrapers in the world!', imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/1/10/Empire_State_Building_%28aerial_view%29.jpg', address: '20 West 34th Street, New York City, NY 10118-0114', location: { lat: 40.7484405, lng: -73.9878584 }, creator: 'u1' }, { id: 1, title: 'Empire State Building', description: 'One of the most famous sky scrapers in the world!', imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/1/10/Empire_State_Building_%28aerial_view%29.jpg', address: '20 West 34th Street, New York City, NY 10118-0114', location: { lat: 40.7484405, lng: -73.9878584 }, creator: 'u2' } ]; return <PlaceList items={DUMMY_PLACES} />; }; export default UserPlaces; In App.js: // src/App.js import UserPlaces from './places/pages/UserPlaces'; // in MainNavigation: <Route path=\"/:userId/places\"> <UserPlaces /> </Route>","title":"Rendering User Places &amp; Using Dynamic Route Segments"},{"location":"mern/#getting-route-params","text":"Using useParams() // src/places/pages/UserPlaces.js import { useParams } from 'react-router-dom'; // ... const UserPlaces = () => { const userId = useParams().userId; const loadedPlaces = DUMMY_PLACES.filter(place => place.creator === userId); return <PlaceList items={loadedPlaces} />; };","title":"Getting Route Params"},{"location":"mern/#adding-custom-buttons","text":"Using provided Button.js: // src/shared/components/FormElements/Button.js import React from 'react'; import { Link } from 'react-router-dom'; import './Button.css'; const Button = props => { if (props.href) { return ( <a className={`button button--${props.size || 'default'} ${props.inverse && 'button--inverse'} ${props.danger && 'button--danger'}`} href={props.href} > {props.children} </a> ); } if (props.to) { return ( <Link to={props.to} exact={props.exact} className={`button button--${props.size || 'default'} ${props.inverse && 'button--inverse'} ${props.danger && 'button--danger'}`} > {props.children} </Link> ); } return ( <button className={`button button--${props.size || 'default'} ${props.inverse && 'button--inverse'} ${props.danger && 'button--danger'}`} type={props.type} onClick={props.onClick} disabled={props.disabled} > {props.children} </button> ); }; export default Button; Use in PlaceItem.js: // src/places/components/PlaceItem.js <div className='place-item__actions'> <Button inverse>VIEW ON MAP</Button> <Button to={`/places/${props.id}`}>EDIT</Button> <Button danger>DELETE</Button> </div>","title":"Adding Custom Buttons"},{"location":"mern/#adding-a-modal","text":"Modal.js: // src/shared/components/UIElements/Modal.js import React from 'react'; import ReactDOM from 'react-dom'; import { CSSTransition } from 'react-transition-group'; import Backdrop from './Backdrop'; import './Modal.css'; const ModalOverlay = props => { const content = ( <div className={`modal ${props.className}`} style={props.style}> <header className={`modal__header ${props.headerClass}`}> <h2>{props.header}</h2> <form onSubmit={ props.onSubmit ? props.onSubmit : event => event.preventDefault() } > <div className={`modal__conent ${props.contentClass}`}> {props.children} </div> <footer className={`modal__footer ${props.footerClass}`}> {props.footer} </footer> </form> </header> </div> ); return ReactDOM.createPortal(content, document.getElementById('modal-hook')); }; const Modal = props => { return ( <React.Fragment> {props.show && <Backdrop onClick={props.onCancel} />} <CSSTransition in={props.show} mountOnEnter unmountOnExit timeout={200} classNames='modal' > <ModalOverlay {...props} /> </CSSTransition> </React.Fragment> ); }; export default Modal; In PlaceItem.js src/places/components/PlaceItem.js import React, { useState } from 'react'; import Card from '../../shared/components/UIElements/Card'; import Button from '../../shared/components/FormElements/Button'; import Modal from '../../shared/components/UIElements/Modal'; import './PlaceItem.css'; const PlaceItem = props => { const [showMap, setShowMap] = useState(false); const openMapHandler = () => setShowMap(true); const closeMapHandler = () => setShowMap(false); return ( <React.Fragment> <Modal show={showMap} onCancel={closeMapHandler} header={props.address} contentClass='place-item__modal-content' footerClass='place-item__modal-actions' footer={<Button onClick={closeMapHandler}>CLOSE</Button>} > <div className=\"map-container\"> <h2>THE MAP!</h2> </div> </Modal> <li className='place-item'> <Card className='place-item__content'> <div className='place-item__image'> <img src={props.image} alt={props.title} /> </div> <div className='place-item__info'> <h2>{props.title}</h2> <h3>{props.address}</h3> <p>{props.description}</p> </div> <div className='place-item__actions'> <Button inverse onClick={openMapHandler}>VIEW ON MAP</Button> <Button to={`/places/${props.id}`}>EDIT</Button> <Button danger>DELETE</Button> </div> </Card> </li> </React.Fragment> ); }; export default PlaceItem;","title":"Adding a Modal"},{"location":"mern/#rendering-a-map-with-google-maps","text":"Will need Google Maps SDK Script in index.html: <script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyC7ap01wqRWATA7guCbFBvIgpbYZwKQIEo\" async defer></script> Also utilize useRef & useEffect // src/shared/components/UIElements/Map.js import React, { useRef, useEffect } from 'react'; import './Map.css'; const Map = props => { const mapRef = useRef(); const { center, zoom } = props; useEffect(() => { const map = new window.google.maps.Map(mapRef.current, { center: center, zoom: zoom }); new window.google.maps.Marker({ position: center, map: map }); }, [center, zoom]); return ( <div ref={mapRef} className={`map ${props.className}`} style={props.style} ></div> ); }; export default Map;","title":"Rendering a Map with Google Maps"},{"location":"mern/#adding-a-custom-form-input-component","text":"NewPlace.js: // src/places/pages/NewPlace.js import React from 'react'; import Input from '../../shared/components/FormElements/Input'; import './NewPlace.css'; const NewPlace = () => { return ( <form className='place-form'> <Input element='input' type='text' label='Title' validators={[]} errorText='Please enter a valid title.' /> </form> ); }; export default NewPlace; Input.js: // src/shared/components/FormElements/Input.js import React from 'react'; import './Input.css'; const Input = props => { const element = props.element === 'input' ? ( <input id={props.id} type={props.type} placeholder={props.placeholder} /> ) : ( <textarea id={props.id} rows={props.rows || 3} /> ); return ( <div className={`form-control`}> <label htmlFor={props.id}>{props.label}</label> {element} </div> ); }; export default Input;","title":"Adding a Custom Form Input Component"},{"location":"mern/#managing-state-in-the-input-component","text":"Utilizing useReducer Input.js: // src/shared/components/FormElements/Input.js import React, { useReducer } from 'react'; import './Input.css'; const inputReducer = (state, action) => { switch (action.type) { case 'CHANGE': return { ...state, value: action.val, isValid: true }; default: return state; } }; const Input = props => { const [inputState, dispatch] = useReducer(inputReducer, { value: '', isValid: false }); const changeHandler = event => { dispatch({ type: 'CHANGE', val: event.target.value }); }; const element = props.element === 'input' ? ( <input id={props.id} type={props.type} placeholder={props.placeholder} onChange={changeHandler} value={inputState.value} /> ) : ( <textarea id={props.id} rows={props.rows || 3} onChange={changeHandler} value={inputState.value} /> ); return ( <div className={`form-control ${!inputState.isValid && 'form-control--invalid'}`} > <label htmlFor={props.id}>{props.label}</label> {element} {!inputState.isValid && <p>{props.errorText}</p>} </div> ); }; export default Input; NewPlace.js: // src/places/pages/NewPlace.js import React from 'react'; import Input from '../../shared/components/FormElements/Input'; import './NewPlace.css'; const NewPlace = () => { return ( <form className='place-form'> <Input element='input' type='text' label='Title' validators={[]} errorText='Please enter a valid title.' /> </form> ); }; export default NewPlace;","title":"Managing State in the Input Component"},{"location":"mern/#adding-input-validation","text":"Use provided validators in NewPlace.js: <Input // ... validators={[VALIDATOR_REQUIRE()]} > in Input.js: import React, { useReducer } from 'react'; import { validate } from '../../util/validators'; import './Input.css'; const inputReducer = (state, action) => { switch (action.type) { case 'CHANGE': return { ...state, value: action.val, isValid: validate(action.val, action.validators) }; case 'TOUCH': { // keep from erroring immediately on visiting page return { ...state, isTouched: true } } default: return state; } }; const Input = props => { const [inputState, dispatch] = useReducer(inputReducer, { value: '', isTouched: false, isValid: false }); const changeHandler = event => { dispatch({ type: 'CHANGE', val: event.target.value, validators: props.validators }); }; const touchHandler = () => { dispatch({ type: 'TOUCH' }); }; const element = props.element === 'input' ? ( <input id={props.id} type={props.type} placeholder={props.placeholder} onChange={changeHandler} onBlur={touchHandler} value={inputState.value} /> ) : ( <textarea id={props.id} rows={props.rows || 3} onChange={changeHandler} onBlur={touchHandler} value={inputState.value} /> ); return ( <div className={`form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`} > <label htmlFor={props.id}>{props.label}</label> {element} {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>} </div> ); }; export default Input;","title":"Adding Input Validation"},{"location":"mern/#sharing-input-values-adding-multiple-inputs","text":"Utilizing useEffect in Input.js: // in Input component: const { id, onInput } = props; const { value, isValid } = inputState; useEffect(() => { onInput(id, value, isValid); }, [id, value, isValid, onInput]); And Utilizing useCallback , to avoid infinite loop, in NewPlace.js: import React, { useCallback } from 'react'; import Input from '../../shared/components/FormElements/Input'; import { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; import './NewPlace.css'; const NewPlace = () => { const titleInputHandler = useCallback((id, value, isValid) => {}, []); const descriptionInputHandler = useCallback((id, value, isValid) => {}, []); return ( <form className='place-form'> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={titleInputHandler} /> <Input id='description' element='input' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (at least 5 characters).' onInput={descriptionInputHandler} /> </form> ); }; export default NewPlace;","title":"Sharing Input Values &amp; Adding Multiple Inputs"},{"location":"mern/#managing-form-wide-state","text":"NewPlace.js: // src/places/pages/NewPlace.js import React, { useCallback, useReducer } from 'react'; import Input from '../../shared/components/FormElements/Input'; import Button from '../../shared/components/FormElements/Button'; import { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; import './NewPlace.css'; const formReducer = (state, action) => { switch (action.type) { case 'INPUT_CHANGE': let formIsValid = true; for (const inputId in state.inputs) { if (inputId === action.inputId) { formIsValid = formIsValid && action.isValid; } else { formIsValid = formIsValid && state.inputs[inputId].isValid; } } return { ...state, inputs: { ...state.inputs, [action.inputId]: { value: action.value, isValid: action.isValid } }, isValid: formIsValid }; default: return state; } }; const NewPlace = () => { const [formState, dispatch] = useReducer(formReducer, { inputs: { title: { value: '', isValid: false }, description: { value: '', isValid: false } }, isValid: false }); const inputHandler = useCallback((id, value, isValid) => { dispatch({ type: 'INPUT_CHANGE', value: value, isValid: isValid, inputId: id }); }, []); return ( <form className='place-form'> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={inputHandler} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (at least 5 characters).' onInput={inputHandler} /> <Button type='submit' disabled={!formState.isValid}> ADD PLACE </Button> </form> ); }; export default NewPlace; Input.js // src/shared/components/FormElements/Input.js import React, { useCallback, useReducer } from 'react'; import Input from '../../shared/components/FormElements/Input'; import Button from '../../shared/components/FormElements/Button'; import { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; import './NewPlace.css'; const formReducer = (state, action) => { switch (action.type) { case 'INPUT_CHANGE': let formIsValid = true; for (const inputId in state.inputs) { if (inputId === action.inputId) { formIsValid = formIsValid && action.isValid; } else { formIsValid = formIsValid && state.inputs[inputId].isValid; } } return { ...state, inputs: { ...state.inputs, [action.inputId]: { value: action.value, isValid: action.isValid } }, isValid: formIsValid }; default: return state; } }; const NewPlace = () => { const [formState, dispatch] = useReducer(formReducer, { inputs: { title: { value: '', isValid: false }, description: { value: '', isValid: false } }, isValid: false }); const inputHandler = useCallback((id, value, isValid) => { dispatch({ type: 'INPUT_CHANGE', value: value, isValid: isValid, inputId: id }); }, []); return ( <form className='place-form'> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={inputHandler} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (at least 5 characters).' onInput={inputHandler} /> <Button type='submit' disabled={!formState.isValid}> ADD PLACE </Button> </form> ); }; export default NewPlace;","title":"Managing Form-wide State"},{"location":"mern/#finishing-the-add-place-form","text":"In NewPlace.js, add address input field & submit handler: // src/places/pages/NewPlace.js // in NewPlace: const placeSubmitHandler = event => { event.preventDefault(); console.log(formState.inputs); }; return ( <form className='place-form' onSubmit={placeSubmitHandler}> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={inputHandler} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (at least 5 characters).' onInput={inputHandler} /> <Input id='address' element='input' label='Address' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid address.' onInput={inputHandler} /> <Button type='submit' disabled={!formState.isValid}> ADD PLACE </Button> </form> );","title":"Finishing the \"Add Place\" Form"},{"location":"mern/#starting-work-on-the-update-place-page","text":"UpdatePlace.js import React from 'react'; import { useParams } from 'react-router-dom'; import Input from '../../shared/components/FormElements/Input'; import Button from '../../shared/components/FormElements/Button'; import { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; const DUMMY_PLACES = [ // ... ]; const UpdatePlace = () => { const placeId = useParams().placeId; const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId); if (!identifiedPlace) { return ( <div className='center'> <h2>Could not find place!</h2> </div> ); } return ( <form> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE]} errorText='Please enter a valid title.' onInput={() => {}} value={identifiedPlace.title} valid={true} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (min. 5 characters).' onInput={() => {}} value={identifiedPlace.title} valid={true} /> <Button type='submit' disabled={true}> UPDATE PLACE </Button> </form> ); }; export default UpdatePlace; Also add new route in App.js: <Route path='/places/:placeId'> <UpdatePlace /> </Route>","title":"Starting Work on the \"Update Place\" Page"},{"location":"mern/#adjusting-the-input-component","text":"Update useReducer() in Input.js: const [inputState, dispatch] = useReducer(inputReducer, { value: props.value || '', isTouched: false, isValid: props.valid || false }); Rename NewPlace.css to PlaceForm.css, update imports and add class name (place-form) to form in UpdatePlace.js","title":"Adjusting the Input Component"},{"location":"mern/#creating-a-custom-form-hook-useform","text":"Function that can share stateful logic. Starts with 'use' by convention (useEffect) Can use default hooks inside a custom hook Will re-render component if you change something that effects the state First, restructure NewPlace.js into form-hook.js, fix UpdatePlace.js NewPlace.js // src/places/pages/NewPlace.js import React from 'react'; import Input from '../../shared/components/FormElements/Input'; import Button from '../../shared/components/FormElements/Button'; import { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; import './PlaceForm.css'; import { useForm } from '../../shared/hooks/form-hook'; const NewPlace = () => { const [formState, inputHandler] = useForm( { title: { value: '', isValid: false }, description: { value: '', isValid: false }, address: { value: '', isValid: false } }, false ); const placeSubmitHandler = event => { event.preventDefault(); console.log(formState.inputs); }; return ( <form className='place-form' onSubmit={placeSubmitHandler}> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={inputHandler} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (at least 5 characters).' onInput={inputHandler} /> <Input id='address' element='input' label='Address' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid address.' onInput={inputHandler} /> <Button type='submit' disabled={!formState.isValid}> ADD PLACE </Button> </form> ); }; export default NewPlace; form-hook.js: // src/shared/hooks/form-hook.js import { useCallback, useReducer } from 'react'; const formReducer = (state, action) => { switch (action.type) { case 'INPUT_CHANGE': let formIsValid = true; for (const inputId in state.inputs) { if (inputId === action.inputId) { formIsValid = formIsValid && action.isValid; } else { formIsValid = formIsValid && state.inputs[inputId].isValid; } } return { ...state, inputs: { ...state.inputs, [action.inputId]: { value: action.value, isValid: action.isValid } }, isValid: formIsValid }; default: return state; } }; export const useForm = (initialInputs, initialFormValidity) => { const [formState, dispatch] = useReducer(formReducer, { inputs: initialInputs, isValid: initialFormValidity }); const inputHandler = useCallback((id, value, isValid) => { dispatch({ type: 'INPUT_CHANGE', value: value, isValid: isValid, inputId: id }); }, []); return [formState, inputHandler]; }; Also UpdatePlace.js: // src/places/pages/UpdatePlace.js import React from 'react'; import { useParams } from 'react-router-dom'; import Input from '../../shared/components/FormElements/Input'; import Button from '../../shared/components/FormElements/Button'; import { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; import { useForm } from '../../shared/hooks/form-hook'; import './PlaceForm.css'; const DUMMY_PLACES = [ { id: 'p1', title: 'Empire State Building', description: 'One of the most famous sky scrapers in the world!', imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/1/10/Empire_State_Building_%28aerial_view%29.jpg', address: '20 West 34th Street, New York City, NY 10118-0114', location: { lat: 40.7484405, lng: -73.9878584 }, creator: 'u1' }, { id: 'p2', title: 'Empire State Building', description: 'One of the most famous sky scrapers in the world!', imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/1/10/Empire_State_Building_%28aerial_view%29.jpg', address: '20 West 34th Street, New York City, NY 10118-0114', location: { lat: 40.7484405, lng: -73.9878584 }, creator: 'u2' } ]; const UpdatePlace = () => { const placeId = useParams().placeId; const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId); const [formState, inputHandler] = useForm({ title: { value: identifiedPlace.title, isValid: true }, description: { value: identifiedPlace.description, isValid: true } }, true); const placeUpdateSubmitHandler = event => { event.preventDefault(); console.log(formState.inputs); }; if (!identifiedPlace) { return ( <div className='center'> <h2>Could not find place!</h2> </div> ); } return ( <form className='place-form' onSubmit={placeUpdateSubmitHandler}> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={inputHandler} initialValue={formState.inputs.title.value} initialValid={formState.inputs.title.isValid} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (min. 5 characters).' onInput={inputHandler} initialValue={formState.inputs.description.value} initialValid={formState.inputs.description.isValid} /> <Button type='submit' disabled={!formState.isValid}> UPDATE PLACE </Button> </form> ); }; export default UpdatePlace;","title":"Creating a Custom Form Hook (useForm)"},{"location":"mern/#adjusting-the-form-hook","text":"In useForm() // src/shared/hooks/form-hook.js // ... const setFormData = useCallback((inputData, formValidity) => { dispatch({ type: 'SET_DATA', inputs: inputData, formIsValid: formValidity }); }, []); return [formState, inputHandler, setFormData]; Use temporary fix in UpdatePlace.js: // src/places/pages/UpdatePlace.js // imports... const DUMMY_PLACES = [/* ... */]; const UpdatePlace = () => { const [isLoading, setIsLoading] = useState(true); const placeId = useParams().placeId; const [formState, inputHandler, setFormData] = useForm({ title: { value: '', isValid: false }, description: { value: '', isValid: false } }, true); const identifiedPlace = DUMMY_PLACES.find(p => p.id === placeId); useEffect(() => { setFormData({ title: { value: identifiedPlace.title, isValid: true }, description: { value: identifiedPlace.description, isValid: true } }, true); setIsLoading(false); }, [setFormData, identifiedPlace]); const placeUpdateSubmitHandler = event => { event.preventDefault(); console.log(formState.inputs); }; if (!identifiedPlace) { return ( <div className='center'> <h2>Could not find place!</h2> </div> ); } if (isLoading) { return ( <div className='center'> <h2>Loading...</h2> </div> ); } return (/* unchanged form */); }; export default UpdatePlace;","title":"Adjusting the Form Hook"},{"location":"mern/#fixing-minor-issues","text":"Fix up Share Button on PlaceList.js: // src/places/components/PlaceList.js <Button to='/places/new'>Share Place</Button> Error on attempted navigate to place that doesn't exist // src/places/components/PlaceList.js // putting setFormData in if check: if (identifiedPlace) { setFormData({ title: { value: identifiedPlace.title, isValid: true }, description: { value: identifiedPlace.description, isValid: true } }, true); } Wrap \"Could not find place!\" in Card for better styling: // src/places/pages/UpdatePlace.js if (!identifiedPlace) { return ( <div className='center'> <Card> <h2>Could not find place!</h2> </Card> </div> ); }","title":"Fixing Minor Issues"},{"location":"mern/#showing-a-deletion-warning","text":"PlaceItem.js: // src/places/components/PlaceItem.js import React, { useState } from 'react'; import Card from '../../shared/components/UIElements/Card'; import Button from '../../shared/components/FormElements/Button'; import Modal from '../../shared/components/UIElements/Modal'; import Map from '../../shared/components/UIElements/Map'; import './PlaceItem.css'; const PlaceItem = props => { const [showMap, setShowMap] = useState(false); const [showConfirmModal, setShowConfirmModal] = useState(false); const openMapHandler = () => setShowMap(true); const closeMapHandler = () => setShowMap(false); const showDeleteWarningHandler = () => { setShowConfirmModal(true); }; const cancelDeleteHandler = () => { setShowConfirmModal(false); }; const confirmDeleteHandler = () => { setShowConfirmModal(false); console.log('DELETING...'); }; return ( <React.Fragment> <Modal show={showMap} onCancel={closeMapHandler} header={props.address} contentClass='place-item__modal-content' footerClass='place-item__modal-actions' footer={<Button onClick={closeMapHandler}>CLOSE</Button>} > <div className='map-container'> <Map center={props.coordinates} zoom={16} /> </div> </Modal> <Modal show={showConfirmModal} onCancel={cancelDeleteHandler} header='Are you sure?' footerClass='place-item__modal-actions' footer={ <React.Fragment> <Button inverse onClick={cancelDeleteHandler}>CANCEL</Button> <Button danger onClick={confirmDeleteHandler}>DELETE</Button> </React.Fragment> } > <p> Do you want to proceed and delete this place? Please note this action cannnot be undone. </p> </Modal> <li className='place-item'> <Card className='place-item__content'> <div className='place-item__image'> <img src={props.image} alt={props.title} /> </div> <div className='place-item__info'> <h2>{props.title}</h2> <h3>{props.address}</h3> <p>{props.description}</p> </div> <div className='place-item__actions'> <Button inverse onClick={openMapHandler}> VIEW ON MAP </Button> <Button to={`/places/${props.id}`}>EDIT</Button> <Button danger onClick={showDeleteWarningHandler}>DELETE</Button> </div> </Card> </li> </React.Fragment> ); }; export default PlaceItem;","title":"Showing a Deletion Warning"},{"location":"mern/#adding-an-auth-page-login-form","text":"Auth.js: import React from 'react'; import Button from '../../shared/components/FormElements/Button'; import Input from '../../shared/components/FormElements/Input'; import Card from '../../shared/components/UIElements/Card'; import { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; import { useForm } from '../../shared/hooks/form-hook'; import './Auth.css'; const Auth = () => { const [formState, inputHandler] = useForm( { email: { value: '', isValid: false }, password: { value: '', isValid: false } }, false ); const authSubmitHandler = event => { event.preventDefault(); console.log(formState.inputs); }; return ( <Card className='authentication'> <h2>Login Required</h2> <hr /> <form onSubmit={authSubmitHandler}> <Input element='input' id='email' type='email' label='E-Mail' validators={[VALIDATOR_EMAIL()]} errorText='Please enter a valid email address.' onInput={inputHandler} /> <Input element='input' id='password' type='password' label='Password' validators={[VALIDATOR_MINLENGTH(7)]} errorText='Please enter a valid password (min. 5 characters).' onInput={inputHandler} /> <Button type='submit' disabled={!formState.isValid}> LOGIN </Button> </form> </Card> ); }; export default Auth;","title":"Adding an \"Auth\" Page &amp; Login Form"},{"location":"mern/#adding-signup-switch-mode-button","text":"Auth.js updated with \"Switch Mode\" // src/user/pages/Auth.js // imports... const Auth = () => { const [isLoginMode, setIsLoginMode] = useState(true); // need setFormData now const [formState, inputHandler, setFormData] = useForm(/* ... */); const switchModeHandler = () => { if (!isLoginMode) { setFormData( { ...formState.inputs, name: undefined }, formState.inputs.email.isValid && formState.inputs.password.isValid ); } else { setFormData( { ...formState.inputs, name: { value: '', isValid: false } }, false ); } setIsLoginMode(prevMode => !prevMode); }; return ( <Card className='authentication'> <h2>Login Required</h2> <hr /> <form onSubmit={authSubmitHandler}> {!isLoginMode && ( <Input element='input' id='name' type='type' label='Your Name' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a name.' onInput={inputHandler} /> )} {/* email & password inputs*/} <Button type='submit' disabled={!formState.isValid}> {isLoginMode ? 'LOGIN' : 'SIGNUP'} </Button> </form> <Button inverse onClick={switchModeHandler}> SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'} </Button> </Card> } Add additional condition in form-hook.js for loop: // src/shared/hooks/form-hook.js/formReducer() if (!state.inputs[inputId]) { continue; }","title":"Adding Signup + \"Switch Mode\" Button"},{"location":"mern/#adding-auth-context-for-app-wide-state-management","text":"Context for passing data between components without having to use props // src/shared/context/auth-context.js import { createContext } from 'react'; export const AuthContext = createContext({ isLoggedIn: false, login: () => {}, logout: () => {} }); Wrap where context should be available, in this case, the entire App: // src/App.js // ...imports import { AuthContext } from './shared/context/auth-context'; const App = () => { const [isLoggedIn, setIsLoggedIn] = useState(false); const login = useCallback(() => { setIsLoggedIn(true); }, []); const logout = useCallback(() => { setIsLoggedIn(false); }, []); return ( <AuthContext.Provider value={{ isLoggedIn: isLoggedIn, login: login, logout: logout }} > <Router> <MainNavigation /> <main> <Switch> <Route path='/' exact> <Users /> </Route> <Route path='/auth' exact> <Auth /> </Route> <Route path='/:userId/places'> <UserPlaces /> </Route> <Route path='/places/new' exact> <NewPlace /> </Route> <Route path='/places/:placeId'> <UpdatePlace /> </Route> <Redirect to='/' /> </Switch> </main> </Router> </AuthContext.Provider> ); }; export default App;","title":"Adding Auth Context for App-wide State Management"},{"location":"mern/#listening-to-context-changes","text":"Use in NavLinks.js: // src/shared/Navvigation/NavLinks.js import React, { useContext } from 'react'; import { NavLink } from 'react-router-dom'; import { AuthContext } from '../../context/auth-context'; import './NavLinks.css'; const NavLinks = props => { const auth = useContext(AuthContext); return ( <ul className='nav-links'> <li> <NavLink to='/' exact> ALL USERS </NavLink> </li> {auth.isLoggedIn && ( <li> <NavLink to='/u1/places'>MY PLACES</NavLink> </li> )} {auth.isLoggedIn && ( <li> <NavLink to='/places/new'>ADD PLACE</NavLink> </li> )} {!auth.isLoggedIn && ( <li> <NavLink to='/auth'>AUTHENTICATE</NavLink> </li> )} </ul> ); }; export default NavLinks;","title":"Listening to Context Changes"},{"location":"mern/#adding-authenticated-unauthenticated-routes","text":"In Auth.js: // src/user/pages/Auth.js // ...imports import { AuthContext } from '../../shared/context/auth-context'; const Auth = () => { const auth = useContext(AuthContext); // ... const authSubmitHandler = event => { event.preventDefault(); console.log(formState.inputs); auth.login(); }; }; Refactor App.js & Routes // src/App.js // ...imports const App = () => { // ... let routes; if (isLoggedIn) { routes = ( <Switch> <Route path='/' exact> <Users /> </Route> <Route path='/:userId/places'> <UserPlaces /> </Route> <Route path='/places/new' exact> <NewPlace /> </Route> <Route path='/places/:placeId'> <UpdatePlace /> </Route> <Redirect to='/' /> </Switch> ); } else { routes = ( <Switch> <Route path='/' exact> <Users /> </Route> <Route path='/:userId/places'> <UserPlaces /> </Route> <Route path='/auth' exact> <Auth /> </Route> <Redirect to='/auth' /> </Switch> ); } return ( <AuthContext.Provider value={{ isLoggedIn: isLoggedIn, login: login, logout: logout }} > <Router> <MainNavigation /> <main>{routes}</main> </Router> </AuthContext.Provider> ); };","title":"Adding Authenticated &amp; Unauthenticated Routes"},{"location":"mern/#more-auth-context-usage","text":"Hide Edit & Delete buttons on PlaceItem: // src/places/components/PlaceItem.js // after view on map place-item action {auth.isLoggedIn && ( <Button to={`/places/${props.id}`}>EDIT</Button> )} {auth.isLoggedIn && ( <Button danger onClick={showDeleteWarningHandler}> DELETE </Button> )} Add Logout button to NavLinks: // src/shared/components/Navigation/NavLinks.js // after auth button {auth.isLoggedIn && ( <li> <button onClick={auth.logout}>LOGOUT</button> </li> )}","title":"More Auth Context Usage"},{"location":"mern/#7-nodejs-and-expressjs-building-our-rest-api","text":"","title":"7. Node.js and Express.js - Building our REST API"},{"location":"mern/#intro","text":"Set Up Node.js + Express App Add Routes Add Controllers & (Dummy) Logic Add User Input Validation","title":"Intro"},{"location":"mern/#setting-up-our-project","text":"mkdir backend cd ./backend npm init npm i --save body-parser express npm i --save-dev nodemon touch app.js","title":"Setting up our Project"},{"location":"mern/#implementing-basic-routing","text":"mkdir routes cd ./routes touch place-routes.js touch users-routes.js // backend/routes/places-routes.js const express = require('express'); const router = express.Router(); router.get('/', (req, res, next) => { console.log('GET Request in PLaces'); res.json({ message: 'It works!' }); }); module.exports = router; // backend/app.js const express = require('express'); const bodyParser = require('body-parser'); const placesRoutes = require('./routes/places-routes'); const app = express(); app.use(placesRoutes); app.listen(5000);","title":"Implementing Basic Routing"},{"location":"mern/#adding-place-specific-routes","text":"Limit filter to placesRoutes app.use('/api/places', placesRoutes); // => /api/places/ ... Add in Dummy data to places-routes const DUMMY_PLACES + [ /*...*/] Modify GET in places-routes: // backend/routes/places-routes.js router.get('/:pid', (req, res, next) => { const placeId = req.params.pid // { pid: 'p1' } const place = DUMMY_PLACES.find(p => { return p.id === placeId; }); res.json({ place }); });","title":"Adding Place-Specific Routes"},{"location":"mern/#getting-a-place-by-user-id","text":"Order matters in these routes! // backend/routes/places-routes router.get('/user/:uid', (req, res, next) => { const userId = req.params.uid; const place = DUMMY_PLACES.find(p => { return p.creator === userId; }); res.json({ place }); });","title":"Getting a Place by User ID"},{"location":"mern/#handling-errors","text":"Catching in place-routes.js: // backend/routes/places-routes.js router.get('/:pid', (req, res, next) => { const placeId = req.params.pid; // { pid: 'p1' } const place = DUMMY_PLACES.find(p => { return p.id === placeId; }); if (!place) { const error = new Error('Could not find a place for the provided id.'); error.code = 404; throw error; // throw in sync code } res.json({ place }); }); router.get('/user/:uid', (req, res, next) => { const userId = req.params.uid; const place = DUMMY_PLACES.find(p => { return p.creator === userId; }); if (!place) { const error = new Error('Could not find a place for the provided id.'); error.code = 404; return next(error); // next in async code. (its sync here, but as an example) } res.json({ place }); }); Modifying app.js: // backend/app.js // after /api/places route app.use((error, req, res, next) => { if (res.headerSent) { return next(error); } res .status(error.code || 500) .json({ message: error.message || 'An unknown error ocurred!' }); });","title":"Handling Errors"},{"location":"mern/#adding-our-own-error-model","text":"HttpError class: // backend/models/http-error.js class HttpError extends Error { constructor(message, errorCode) { super(message); // Add a \"message\" property this.code = errorCode; // Adds a \"code\" property } } module.exports = HttpError; Modify places-routes.js: const error = new HttpError('Could not find a place for the provided id.', 404);","title":"Adding our own Error Model"},{"location":"mern/#adding-controllers","text":"Model View Controller concept (without the views here) mkdir controllers Refactor: // backend/controllers/places-controller/js const HttpError = require('../models/http-error'); const DUMMY_PLACES = [ // ... ]; const getPlaceById = (req, res, next) => { // ... }; const getPlaceByUserId = (req, res, next) => { // .. }; exports.getPlaceById = getPlaceById; exports.getPlaceByUserId = getPlaceByUserId; // backend/routes/places-routes.js const express = require('express'); const placesControllers = require('../controllers/places-controllers'); const router = express.Router(); router.get('/:pid', placesControllers.getPlaceById); router.get('/user/:uid', placesControllers.getPlaceByUserId); module.exports = router;","title":"Adding Controllers"},{"location":"mern/#adding-a-post-route-and-using-postman","text":"Add new route in places-routes.js: router.post('/', placesControllers.createPlace); Add in bodyParser to App.js: app.use(bodyParser.json()); createPlace route: const createPlace = (req, res, next) => { const { title, description, coordinates, address, creator } = req.body; const createdPlace = { title, description, location: coordinates, address, creator }; DUMMY_PLACES.push(createdPlace); // unshift (createdPlaced) res.status(201).json({ place: createdPlace }); }; exports.createPlace = createPlace; Use Postman to test Use uuid package to generate unique ids npm i --save uuid import into controller const uuid = require('uuid/v4'); use in id field on createPlace id: uuid(),","title":"Adding a POST Route and Using Postman"},{"location":"mern/#handling-errors-for-unsupported-routes","text":"Add a catch-all route after other routes to handle unwanted routes app.use((req, res, next) => { const error = new HttpError('Could not find this route.', 404); throw error; });","title":"Handling Errors for Unsupported Routes"},{"location":"mern/#adding-patch-routes-to-update-places","text":"Add the new route for updating places: router.patch('/:pid', placesControllers.updatePlace); Create the route in controllers: const updatePlace = (req, res, next) => { const { title, description } = req.body; const placeId = req.params.pid; const updatedPlace = { ...DUMMY_PLACES.find(p => p.id === placeId) }; const placeIndex = DUMMY_PLACES.findIndex(p => p.id === placeId); updatedPlace.title = title; updatedPlace.description = description; DUMMY_PLACES[placeIndex] = updatedPlace; res.status(200).json({ place: updatedPlace }); }; exports.updatePlace = updatePlace;","title":"Adding Patch Routes to Update Places"},{"location":"mern/#deleting-places","text":"Add the new route for deleting places: router.delete('/:pid', placesControllers.deletePlace); Create the route in controllers: const deletePlace = (req, res, next) => { const placeId = req.params.pid; // need to declare DUMMY_PLACES with let instead of const! DUMMY_PLACES = DUMMY_PLACES.filter(p => p.id !== placeId); res.status(200).json({message: 'Deleted place.'}); }; exports.deletePlace = deletePlace;","title":"Deleting Places"},{"location":"mern/#finalizing-the-get-places-by-user-id-resource","text":"Fix getPlaceByUserId to get multiple places for user Change to use filter instead of find","title":"Finalizing the \"Get Places by User ID\" Resource"},{"location":"mern/#setting-up-the-user-routes-signup-login-get-users","text":"User Controllers: // backend/controllers/users-controllers.js const uuid = require('uuid/v4'); const HttpError = require('../models/http-error'); const DUMMY_USERS = [ { id: 'u1', name: 'John', email: 'john@test.com', password: 'password' } ]; const getUsers = (req, res, next) => { res.json({ users: DUMMY_USERS }); }; const signup = (req, res, next) => { const { name, email, password } = req.body; const hasUser = DUMMY_USERS.find(u => u.email === email); if (hasUser) { throw new HttpError('Could not create user, email already exists!', 422); } const createdUser = { id: uuid(), name, email, password }; DUMMY_USERS.push(createdUser); res.status(201).json({ user: createdUser }); }; const login = (req, res, next) => { const { email, password } = req.body; const identifiedUser = DUMMY_USERS.find(u => u.email === email); if (!identifiedUser || identifiedUser.password !== password) { throw new HttpError( 'Could not identify user, credentials seem to be wrong.', 401 ); } res.json({ message: 'Logged In!' }); }; exports.getUsers = getUsers; exports.signup = signup; exports.login = login; Users Routes: // backend/routes/users-routes.js const express = require('express'); const usersControllers = require('../controllers/users-controllers'); const router = express.Router(); router.get('/', usersControllers.getUsers); router.post('/signup', usersControllers.signup); router.post('/login', usersControllers.login); module.exports = router; Add to app.js: app.use('/api/users', usersRoutes); // => /api/users/ ...","title":"Setting Up the User Routes (Signup, Login, Get Users)"},{"location":"mern/#validating-api-input-request-bodies","text":"Install validator package: npm i --save express-validator Can use multiple middlewares on routes For Create Place route : // ...imports const { check } = require('express-validator'); // ... router.post( '/', [ check('title') .not() .isEmpty(), check('description').isLength({ min: 5 }), check('address') .not() .isEmpty() ], placesControllers.createPlace ); // ... For Create Place controller : // ...imports const { validationResult } = require('express-validator'); // ... const createPlace = (req, res, next) => { const errors = validationResult(req); if (!errors.isEmpty()) { console.log(errors); throw new HttpError('Invalid inputs passed, please check your data.', 422); } // ... } // ...","title":"Validating API Input (Request Bodies)"},{"location":"mern/#validating-patch-requests-and-user-routes","text":"For Update Place route : router.patch( '/:pid', [ check('title') .not() .isEmpty(), check('description').isLength({ min: 5 }) ], placesControllers.updatePlace ); For Update Place controller , can use same logic as in createPlace above For User Signup route // ...imports const { check } = require('express-validator'); // ... router.post( '/signup', [ check('name') .not() .isEmpty(), check('email') .normalizeEmail() // Test@test.com => test@test.com .isEmail(), check('password').isLength({ min: 6 }) ], usersControllers.signup ); // ... For User Signup controller , use similar logic as update and create place","title":"Validating Patch Requests and User Routes"},{"location":"mern/#using-googles-geocoding-api-to-convert-an-address-into-coordinates","text":"Use third party package to send request to google npm i --save axios location.js: // backend/util/location.js const axios = require('axios'); const HttpError = require('../models/http-error'); const API_KEY = 'AIzaSyC7ap01wqRWATA7guCbFBvIgpbYZwKQIEo'; const getCoordsforAddress = async address => { const response = await axios.get( `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent( address )}&key=${API_KEY}` ); const data = response.data; if (!data || data.status === 'ZERO_RESULTS') { const error = new HttpError( 'Could not find location for the specified address.', 422 ); throw error; } const coordinates = data.results[0].geometry.location; return coordinates; }; module.exports = getCoordsforAddress; Modify create Place in controller: // backend/controllers/places-controllers.js // ... const createPlace = async (req, res, next) => { const errors = validationResult(req); if (!errors.isEmpty()) { return next( new HttpError('Invalid inputs passed, please check your data.', 422) ); } const { title, description, address, creator } = req.body; let coordinates; try { coordinates = await getCoordsForAddress(address); } catch (error) { return next(error); } // ... } // ...","title":"Using Google's Geocoding API to Convert an Address Into Coordinates"},{"location":"mern/#9-connecting-the-backend-to-the-database-mongodb-and-mongoose","text":"Defining our Mongoose Models CRUD Operations for Place and User Connecting Places and Users","title":"9. Connecting the Backend to the Database MongoDB and Mongoose"},{"location":"mern/#installing-mongoose-and-connecting-our-backend-to-mongodb","text":"npm i --save mongoose // backend/app.js // ... mongoose .connect('mongodb://localhost:27017/react-training') .then(() => { console.log('Connected to database!'); app.listen(5000); }) .catch(err => { console.log(err); });","title":"Installing Mongoose and Connecting our Backend to MongoDB"},{"location":"mern/#creating-the-place-schema-and-model","text":"place.js: // backend/models/place.js const mongoose = require('mongoose'); const Schema = mongoose.Schema; const placeSchema = new Schema({ title: { type: String, required: true }, description: { type: String, required: true }, image: { type: String, required: true }, address: { type: String, required: true }, location: { lat: { type: Number, required: true }, lng: { type: Number, required: true }, }, creator: { type: String, required: true }, }); module.exports = mongoose.model('Place', placeSchema);","title":"Creating the Place Schema and Model"},{"location":"mern/#creating-and-storing-documents-in-the-database","text":"Modifying create place controller // backend/controllers/places-controllers const createPlace = async (req, res, next) => { const errors = validationResult(req); if (!errors.isEmpty()) { return next( new HttpError('Invalid inputs passed, please check your data.', 422) ); } const { title, description, address, creator } = req.body; let coordinates; try { coordinates = await getCoordsForAddress(address); } catch (error) { return next(error); } const createdPlace = new Place({ title, description, address, location: coordinates, image: 'https://upload.wikimedia.org/wikipedia/commons/1/10/Empire_State_Building_%28aerial_view%29.jpg', creator }); try { await createdPlace.save(); } catch (err) { const error = new HttpError( 'Creating Place failed, please try again.', 500 ); return next(error); } res.status(201).json({ place: createdPlace }); };","title":"Creating and Storing Documents in the Database"},{"location":"mern/#getting-places-by-the-placeid","text":"Get place by ID controller: // backend/controllers/places-controllers.js // ... const getPlaceById = async (req, res, next) => { const placeId = req.params.pid; // { pid: 'p1' } let place; try { place = await Place.findById(placeId); } catch (err) { const error = new HttpError( 'Something went wrong, could not find a place', 500 ); return next(error); } if (!place) { const error = new HttpError( 'Could not find a place for the provided id.', 404 ); return next(error); } res.json({ place: place.toObject({ getters: true }) }); }; // ...","title":"Getting Places by the PlaceID"},{"location":"mern/#getting-places-by-the-userid","text":"Get place by User ID controller: // backend/controllers/places-controllers.js // ... const getPlacesByUserId = async (req, res, next) => { const userId = req.params.uid; let places; try { places = await Place.find({ creator: userId }); } catch (err) { const error = new HttpError( 'Fetching places failed, please try again later.', 500 ); return next(error); } if (!places || places.length === 0) { const error = new HttpError( 'Could not find a places for the provided user id.', 404 ); return next(error); } res.json({ places: places.map(place => place.toObject({ getters: true })) }); }; // ...","title":"Getting Places by the UserID"},{"location":"mern/#updating-places","text":"Update place controller: // backend/controllers/places-controllers.js // ... const updatePlace = async (req, res, next) => { const errors = validationResult(req); if (!errors.isEmpty()) { throw new HttpError('Invalid inputs passed, please check your data.', 422); } const { title, description } = req.body; const placeId = req.params.pid; let place; try { place = await Place.findById(placeId); } catch (err) { const error = new HttpError( 'Something went wrong, could not update place', 500 ); return next(error); } place.title = title; place.description = description; try { await place.save(); } catch (err) { const error = new HttpError( 'Something went wrong, could not update place.', 500 ); return next(error); } res.status(200).json({ place: place.toObject({ getters: true }) }); }; // ...","title":"Updating Places"},{"location":"mern/#deleting-places_1","text":"Delete Places controller: // backend/controllers/places-controllers // ... const deletePlace = async (req, res, next) => { const placeId = req.params.pid; let place; try { place = await Place.findById(placeId); } catch (err) { const error = new HttpError( 'Something went wrong, could not delete place.', 500 ); return next(error); } try { place.remove(); } catch (err) { const error = new HttpError( 'Something went wrong, could not delete place.', 500 ); return next(error); } res.status(200).json({ message: 'Deleted place.' }); }; // ...","title":"Deleting Places"},{"location":"mern/#how-users-and-places-are-related","text":"One place belongs to exactly one user One user can create multiple places","title":"How Users and Places are Related"},{"location":"mern/#creating-the-user-model","text":"Will need mongoose unique validator: npm i --save mongoose-unique-validator Since unique property doesn't make sure another already exists, instead just makes easily to reference with an index // backend/models/user.js const mongoose = require('mongoose'); const uniqueValidator = require('mongoose-unique-validator'); const Schema = mongoose.Schema; const userSchema = new Schema({ name: { type: String, required: true }, email: { type: String, required: true, unique: true }, password: { type: String, required: true, minlength: 6 }, image: { type: String, required: true }, places: { type: String, required: true } }); userSchema.plugin(uniqueValidator); module.exports = mongoose.model('User', userSchema);","title":"Creating the User Model"},{"location":"mern/#using-the-user-model-for-signup","text":"Modifying user controllers: const signup = async (req, res, next) => { const errors = validationResult(req); if (!errors.isEmpty()) { return next( new HttpError('Invalid inputs passed, please check your data.', 422) ); } const { name, email, password, places } = req.body; let existingUser; try { existingUser = await User.findOne({ email: email }); } catch (err) { const error = new HttpError( 'Signing up failed, please try again later.', 500 ); return next(error); } if (existingUser) { const error = new HttpError( 'User exists already, please login instead.', 422 ); return next(error); } const createdUser = new User({ name, email, image: 'https://www.publicdomainpictures.net/pictures/10000/velka/brown-eyed-susan-flower-closeup-23441281369772mHdG.jpg', password, places }); try { await createdUser.save(); } catch (err) { console.log(err.message); const error = new HttpError( 'Saving User failed, please try again.', 500 ); return next(error); } res.status(201).json({ user: createdUser.toObject({ getters: true }) }); };","title":"Using the User Model for Signup"},{"location":"mern/#adding-the-user-login","text":"Modifying users controller const login = async (req, res, next) => { const { email, password } = req.body; let existingUser; try { existingUser = await User.findOne({ email }); } catch (err) { const error = new HttpError( 'Logging in failed, please try again later.', 500 ); return next(error); } // dummy logic currently for authentication: if (!existingUser || existingUser.password !== password) { const error = new HttpError( 'Invalid credentials, could not log you in.', 401 ); return next(error); } res.json({ message: 'Logged In!' }); };","title":"Adding the User Login"},{"location":"mern/#getting-users","text":"Modifying users controller const getUsers = async (req, res, next) => { let users; try { users = await User.find({}, '-password'); } catch (err) { const error = new HttpError( 'Fetching users failed, please try again later.', 500 ); return next(error); } res.json({ users: users.map(user => user.toObject({ getters: true })) }); };","title":"Getting Users"},{"location":"mern/#adding-the-relation-between-places-and-users","text":"One user can create multiple places AND One place belongs to exactly one user. Modify Place Schema: { type: mongoose.Types.ObjectId, required: true, ref: 'User' } Modify User schema: places: [{ type: mongoose.Types.ObjectId, required: true, ref: 'Place' }] Modify users controller // ... const signup = async (req, res, next) => { // ... const { name, email, password } = req.body; // ... const createdUser = new User({ name, email, image: 'https://www.publicdomainpictures.net/pictures/10000/velka/brown-eyed-susan-flower-closeup-23441281369772mHdG.jpg', password, places: [] }); // ... } // ...","title":"Adding the Relation between Places and Users"},{"location":"mern/#creating-places-and-adding-it-to-a-user","text":"Using session and transaction Modifying Places controller: const createPlace = async (req, res, next) => { const errors = validationResult(req); if (!errors.isEmpty()) { return next( new HttpError('Invalid inputs passed, please check your data.', 422) ); } const { title, description, address, creator } = req.body; let coordinates; try { coordinates = await getCoordsForAddress(address); } catch (error) { return next(error); } const createdPlace = new Place({ title, description, address, location: coordinates, image: 'https://upload.wikimedia.org/wikipedia/commons/1/10/Empire_State_Building_%28aerial_view%29.jpg', creator }); let user; try { user = await User.findById(creator); } catch (err) { const error = new HttpError( // 'Creating place failed, please try again.', 'Could not find user for provided id', 500 ); return next(error); } if (!user) { const error = new HttpError('Could not find user for provided id', 404); return next(error); } console.log(user); try { // const sess = await mongoose.startSession(); // sess.startTransaction(); await createdPlace.save(/* { sessions: sess } */); user.places.push(createdPlace); await user.save(/* { sessions: sess } */); // await sess.commitTransaction(); } catch (err) { console.log(err.message); const error = new HttpError( 'Creating place failed, please try again.', 500 ); return next(error); } res.status(201).json({ place: createdPlace }); };","title":"Creating Places and Adding it to a User"},{"location":"mern/#deleting-places-removing-it-from-the-user","text":"Modifying delete place in places controllers: Using populate() const deletePlace = async (req, res, next) => { const placeId = req.params.pid; let place; try { place = await Place.findById(placeId).populate('creator'); } catch (err) { const error = new HttpError( 'Something went wrong, could not delete place.', 500 ); return next(error); } if (!place) { const error = new HttpError('Could not find place for this id.', 404); return next(error); } try { // const session = await mongoose.startSession(); // session.startTransaction(); await place.remove(/* { session: session } */); place.creator.places.pull(place); await place.creator.save(/* { session: session } */); // await session.commitTransaction(); } catch (err) { const error = new HttpError( 'Something went wrong, could not delete place.', 500 ); return next(error); } res.status(200).json({ message: 'Deleted place.' }); };","title":"Deleting Places &amp; Removing it from the User"},{"location":"mern/#getting-places-an-alternative","text":"Modifying get place by user id in places controllers: const getPlacesByUserId = async (req, res, next) => { const userId = req.params.uid; // let places; let userWithPlaces; try { userWithPlaces = await User.findById(userId).populate('places'); } catch (err) { console.log(err.message) const error = new HttpError( 'Fetching places failed, please try again later.', 500 ); return next(error); } if (!userWithPlaces || userWithPlaces.length === 0) { const error = new HttpError( 'Could not find places for the provided user id.', 404 ); return next(error); } res.json({ places: userWithPlaces.places.map(place => place.toObject({ getters: true })) }); };","title":"Getting Places - An Alternative"},{"location":"mern/#10-connecting-the-reactjs-frontend-to-the-backend","text":"","title":"10. Connecting the React.js Frontend to the Backend"},{"location":"mern/#introduction_1","text":"Send HTTP Requests & Use Response Data Handle Errors & Loading State Update User Interface","title":"Introduction"},{"location":"mern/#sending-a-post-request-to-the-backend","text":"Modifying Auth.js on Frontend // src/user/pages/Auth.js // ... const Auth = () => { // ... const authSubmitHandler = async event => { event.preventDefault(); if (isLoginMode) { } else { try { const response = await fetch('http://localhost:5000/api/users/signup', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ name: formState.inputs.name.value, email: formState.inputs.email.value, password: formState.inputs.password.value }) }); const responseData = await response.json(); console.log(responseData); } catch (err) { console.log(err); } } auth.login(); }; // ... } // ...","title":"Sending a POST Request to the Backend"},{"location":"mern/#handling-cors-errors","text":"Cross Origin Resource Sharing (CORS) Enforced by browser Issue here because we are trying to send request to localhost:3000 from localhost:5000 Need to attach certain headers Modifying app.js in backend: // backend/app.js // ... app.use(bodyParser.json()); app.use((req, res, next) => { res.setHeader('Access-Control-Allow-Origin', '*'); res.setHeader( 'Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization' ); res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PATCH, DELETE'); next(); }); // ...","title":"Handling CORS Errors"},{"location":"mern/#getting-started-with-error-handling","text":"Modify Auth.js: // src/user/pages/Auth.js // ... // these components are provided in the course import ErrorModal from '../../shared/components/UIElements/ErrorModal'; import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'; // ... const Auth = () => { // ... const [isLoading, setIsLoading] = useState(false); const [error, setError] = useState(); // ... const authSubmitHandler = async event => { event.preventDefault(); if (isLoginMode) { } else { try { setIsLoading(true); const response = await fetch('http://localhost:5000/api/users/signup', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ name: formState.inputs.name.value, email: formState.inputs.email.value, password: formState.inputs.password.value }) }); const responseData = await response.json(); console.log(responseData); setIsLoading(false); auth.login(); } catch (err) { console.log(err); setIsLoading(false); setError(err.message || 'Something went wrong, please try again.'); } } setIsLoading(false); }; return ( <Card className='authentication'> {isLoading && <LoadingSpinner asOverlay />} { /* ... */ } </Card> ); }; export default Auth;","title":"Getting Started with Error Handling"},{"location":"mern/#proper-error-handling-in-the-frontend","text":"Technically no error in fetch() when getting back a 400ish or 500ish error code. Modifying Auth.js // src/user/pages/Auth.js // ... const Auth = () => { // ... const authSubmitHandler = async event => { event.preventDefault(); if (isLoginMode) { } else { try { setIsLoading(true); const response = await fetch('http://localhost:5000/api/users/signup', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ name: formState.inputs.name.value, email: formState.inputs.email.value, password: formState.inputs.password.value }) }); const responseData = await response.json(); if (!response.ok) { throw new Error(responseData.message); } console.log(responseData); setIsLoading(false); auth.login(); } catch (err) { console.log(err); setIsLoading(false); setError(err.message || 'Something went wrong, please try again.'); } } setIsLoading(false); }; const errorHandler = () => { setError(null); }; return ( <React.Fragment> <ErrorModal error={error} onClear={errorHandler} /> <Card className='authentication'> {isLoading && <LoadingSpinner asOverlay />} { /* ... */ } </Card> </React.Fragment> ); }; export default Auth;","title":"Proper Error Handling in the Frontend"},{"location":"mern/#sending-a-login-request","text":"Duplicating signup but with small changes, in Auth.js: // src/user/pages/Auth.js // ... const Auth = () => { // ... const authSubmitHandler = async event => { event.preventDefault(); setIsLoading(true); if (isLoginMode) { try { const response = await fetch('http://localhost:5000/api/users/login', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email: formState.inputs.email.value, password: formState.inputs.password.value }) }); const responseData = await response.json(); if (!response.ok) { throw new Error(responseData.message); } setIsLoading(false); auth.login(); } catch (err) { console.log(err); setIsLoading(false); setError(err.message || 'Something went wrong, please try again.'); } } else { // ... } // ... }; export default Auth;","title":"Sending a Login Request"},{"location":"mern/#gettig-users-with-a-get-request","text":"Modify Users.js: // src/user/pages/User.js import React, { useEffect, useState } from 'react'; import UsersList from '../components/UsersList'; import ErrorModal from '../../shared/components/UIElements/ErrorModal'; import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'; const Users = () => { const [isLoading, setIsLoading] = useState(false); const [error, setError] = useState(); const [loadedUsers, setLoadedUsers] = useState(); useEffect(() => { const sendRequest = async () => { setIsLoading(true); try { const response = await fetch('http://localhost:5000/api/users'); // defaults to get const responseData = await response.json(); if (!response.ok) { throw new Error(responseData.message); } setLoadedUsers(responseData.users); } catch (err) { setError(err.message); } setIsLoading(false); }; sendRequest(); }, []); const errorHandler = () => { setError(null); }; return ( <React.Fragment> <ErrorModal error={error} onClear={errorHandler} /> {isLoading && ( <div className='center'> <LoadingSpinner /> </div> )} {!isLoading && loadedUsers && <UsersList items={loadedUsers} />} </React.Fragment> ); }; export default Users; And line in UsersList.js placeCount={user.places.length}","title":"Gettig Users with a GET Request"},{"location":"mern/#creating-a-custom-http-hook","text":"http-hook.js so far: // src/shared/hooks/http-hook.js import { useState, useCallback, useRef, useEffect } from 'react'; export const useHttpClient = () => { const [isLoading, setIsLoading] = useState(false); const [error, setError] = useState(); const activeHttpRequests = useRef([]); const sendRequest = useCallback( async (url, method = 'GET', body = null, headers = {}) => { setIsLoading(true); const httpAbortCtrll = new AbortController(); activeHttpRequests.current.push(httpAbortCtrll); try { const response = await fetch(url, { method, body, headers, signal: httpAbortCtrll.signal }); const responseData = await response.json(); if (!response.ok) { throw new Error(responseData.message); } return responseData; } catch (err) { setError(err.message); } setIsLoading(false); }, [] ); const clearError = () => { setError(null); }; useEffect(() => { return () => { activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort()); }; }, []); return { isLoading, error, sendRequest, clearError }; };","title":"Creating a Custom HTTP Hook"},{"location":"mern/#improving-the-custom-http-hook","text":"Use in Auth.js: // ... import { useHttpClient } from '../../shared/hooks/http-hook'; // ... const Auth = () => { const authSubmitHandler = async event => { event.preventDefault(); if (isLoginMode) { try { await sendRequest( 'http://localhost:5000/api/users/login', 'POST', JSON.stringify({ email: formState.inputs.email.value, password: formState.inputs.password.value }), { 'Content-Type': 'application/json' } ); auth.login(); } catch (err) {} } else { try { await sendRequest( 'http://localhost:5000/api/users/signup', 'POST', JSON.stringify({ name: formState.inputs.name.value, email: formState.inputs.email.value, password: formState.inputs.password.value }), { 'Content-Type': 'application/json' } ); auth.login(); } catch (err) {} } }; }; export default Auth; Also small changes to http-hook.js: // end of try block: setIsLoading(false); return responseData; } catch (err) { setError(err.message); setIsLoading(false); throw err; }","title":"Improving the Custom HTTP Hook"},{"location":"mern/#using-the-http-hook-to-get-users","text":"Modify Users.js useCallback in custom hook very important here, preventing infinite loops // src/user/pages/Users.js import React, { useEffect, useState } from 'react'; import UsersList from '../components/UsersList'; import ErrorModal from '../../shared/components/UIElements/ErrorModal'; import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'; import { useHttpClient } from '../../shared/hooks/http-hook'; const Users = () => { const { isLoading, error, sendRequest, clearError } = useHttpClient(); const [loadedUsers, setLoadedUsers] = useState(); useEffect(() => { const fetchUsers = async () => { try { const responseData = await sendRequest( 'http://localhost:5000/api/users' ); // defaults to get setLoadedUsers(responseData.users); } catch (err) {} }; fetchUsers(); }, [sendRequest]); return ( <React.Fragment> <ErrorModal error={error} onClear={clearError} /> {isLoading && ( <div className='center'> <LoadingSpinner /> </div> )} {!isLoading && loadedUsers && <UsersList items={loadedUsers} />} </React.Fragment> ); }; export default Users;","title":"Using the HTTP Hook to GET Users"},{"location":"mern/#adding-places-post","text":"Modifying NewPlace.js // src/places/pages/NewPlace.js import React, { useContext } from 'react'; import { useHistory } from 'react-router-dom'; // ... import { useHttpClient } from '../../shared/hooks/http-hook'; import { AuthContext } from '../../shared/context/auth-context'; // ... const NewPlace = () => { const auth = useContext(AuthContext); const { isLoading, error, sendRequest, clearError } = useHttpClient(); const [formState, inputHandler] = useForm( { title: { value: '', isValid: false }, description: { value: '', isValid: false }, address: { value: '', isValid: false } }, false ); const history = useHistory(); const placeSubmitHandler = async event => { event.preventDefault(); try { await sendRequest( 'http://192.168.2.2:5000/api/places', 'POST', JSON.stringify({ title: formState.inputs.title.value, description: formState.inputs.description.value, address: formState.inputs.address.value, creator: auth.userId }), { 'Content-Type': 'application/json' } ); history.push('/'); // Redirect the user to a different page } catch (err) {} }; return ( <React.Fragment> <ErrorModal error={error} onClear={clearError} /> <form className='place-form' onSubmit={placeSubmitHandler}> {isLoading && <LoadingSpinner asOverlay />} <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={inputHandler} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (at least 5 characters).' onInput={inputHandler} /> <Input id='address' element='input' label='Address' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid address.' onInput={inputHandler} /> <Button type='submit' disabled={!formState.isValid}> ADD PLACE </Button> </form> </React.Fragment> ); }; export default NewPlace; Modifying users-controllers.js, auth-context.js, Auth.js, and App.js to supply a userId // backend/controllers/users-controllers.js // ... const login = async (req, res, next) => { // ... res.json({ message: 'Logged In!', user: existingUser.toObject({ getters: true }) }); }; // src/shared/context/auth-content.js export const AuthContext = createContext({ isLoggedIn: false, userId: null, login: () => {}, logout: () => {} }); // src/user/pages/Auth.js // ... import { AuthContext } from '../../shared/context/auth-context'; // ... const Auth = () => { const auth = useContext(AuthContext); // ... const authSubmitHandler = async event => { event.preventDefault(); if (isLoginMode) { try { // ... auth.login(responseData.user.id); } catch (err) { } } else { try { // ... auth.login(responseData.user.id); } catch (err) { } } }; // ... }; // src/App.js // ... const App = () => { // ... const [userId, setUserId] = useState(false); const login = useCallback(uid => { setIsLoggedIn(true); setUserId(uid); }, []); const logout = useCallback(() => { setIsLoggedIn(false); setUserId(null); }, []); // ... return ( <AuthContext.Provider value={{ isLoggedIn: isLoggedIn, userId: userId, login: login, logout: logout }} > {/* ... */} </AuthContext.Provider> ); }; // ...","title":"Adding Places (POST)"},{"location":"mern/#loading-places-by-user-id","text":"Modify UserPlaces.js // src/places/pages/UserPlaces.js import React, { useEffect, useState } from 'react'; import { useParams } from 'react-router-dom'; import PlaceList from '../components/PlaceList'; import ErrorModal from '../../shared/components/UIElements/ErrorModal'; import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'; import { useHttpClient } from '../../shared/hooks/http-hook'; const UserPlaces = () => { const [loadedPlaces, setLoadedPlaces] = useState(); const { isLoading, error, sendRequest, clearError } = useHttpClient(); const userId = useParams().userId; useEffect(() => { const fetchPlaces = async () => { try { const responseData = await sendRequest( `http://192.168.2.2:5000/api/places/user/${userId}` ); setLoadedPlaces(responseData.places); } catch (err) {} }; fetchPlaces(); }, [sendRequest, userId]); return ( <React.Fragment> <ErrorModal error={error} onClear={clearError} /> {isLoading && ( <div className='center'> <LoadingSpinner />{' '} </div> )} {!isLoading && loadedPlaces && <PlaceList items={loadedPlaces} />} </React.Fragment> ); }; export default UserPlaces; Modify PlaceList.js // src/places/components/PlaceList.js // ... <PlaceItem image={place.image} // ... /> // ...","title":"Loading Places by User ID"},{"location":"mern/#updating-places_1","text":"Modifying UpdatePlace.js // src/places/pages/UpdatePlace.js import React, { useEffect, useState, useContext } from 'react'; import { useParams, useHistory } from 'react-router-dom'; import Input from '../../shared/components/FormElements/Input'; import Button from '../../shared/components/FormElements/Button'; import Card from '../../shared/components/UIElements/Card'; import LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'; import ErrorModal from '../../shared/components/UIElements/ErrorModal'; import { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators'; import { useForm } from '../../shared/hooks/form-hook'; import { useHttpClient } from '../../shared/hooks/http-hook'; import { AuthContext } from '../../shared/context/auth-context'; import './PlaceForm.css'; const UpdatePlace = () => { const { isLoading, error, sendRequest, clearError } = useHttpClient(); const [loadedPlace, setLoadedPlace] = useState(); const placeId = useParams().placeId; const history = useHistory(); const auth = useContext(AuthContext); const [formState, inputHandler, setFormData] = useForm( { title: { value: '', isValid: false }, description: { value: '', isValid: false } }, false ); useEffect(() => { const fetchPlace = async () => { try { const responseData = await sendRequest( `http://192.168.2.2:5000/api/places/${placeId}` ); setLoadedPlace(responseData.place); setFormData( { title: { value: responseData.place.title, isValid: true }, description: { value: responseData.place.description, isValid: true } }, true ); } catch (err) {} }; fetchPlace(); }, [sendRequest, placeId, setFormData]); const placeUpdateSubmitHandler = async event => { event.preventDefault(); try { await sendRequest( `http://192.168.2.2:5000/api/places/${placeId}`, 'PATCH', JSON.stringify({ title: formState.inputs.title.value, description: formState.inputs.description.value }), { 'Content-Type': 'application/json' } ); history.push('/' + auth.userId + '/places'); } catch (err) {} }; if (isLoading) { return ( <div className='center'> <LoadingSpinner /> </div> ); } if (!loadedPlace && !error) { return ( <div className='center'> <Card> <h2>Could not find place!</h2> </Card> </div> ); } return ( <React.Fragment> <ErrorModal error={error} onClear={clearError} /> {!isLoading && loadedPlace && ( <form className='place-form' onSubmit={placeUpdateSubmitHandler}> <Input id='title' element='input' type='text' label='Title' validators={[VALIDATOR_REQUIRE()]} errorText='Please enter a valid title.' onInput={inputHandler} initialValue={loadedPlace.title} initialValid={true} /> <Input id='description' element='textarea' label='Description' validators={[VALIDATOR_MINLENGTH(5)]} errorText='Please enter a valid description (min. 5 characters).' onInput={inputHandler} initialValue={loadedPlace.description} initialValid={true} /> <Button type='submit' disabled={!formState.isValid}> UPDATE PLACE </Button> </form> )} </React.Fragment> ); }; export default UpdatePlace;","title":"Updating Places"},{"location":"mern/#deleting-places_2","text":"Modifying PlaceList.js, PlaceItem.js & UserPlaces.js // src/places/components/PlaceList.js // ... <PlaceItem // ... onDelete={props.onDeletePlace} /> // src/places/components/PlaceItem.js // ... import { useHttpClient } from '../../shared/hooks/http-hook'; import './PlaceItem.css'; const PlaceItem = props => { const { isLoading, error, sendRequest, clearError } = useHttpClient(); // ... const confirmDeleteHandler = async () => { setShowConfirmModal(false); try { await sendRequest( `http://192.168.2.2:5000/api/places/${props.id}`, 'DELETE' ); props.onDelete(props.id); } catch (err) {} }; return ( <React.Fragment> <ErrorModal error={error} onClear={clearError} /> { /* ... */ } <li className='place-item'> <Card className='place-item__content'> {isLoading && <LoadingSpinner asOverlay />} </Card> </li> </React.Fragment> ); }; // ... // src/places/pages/UserPlaces.js // ... const placeDeletedHandler = deletedPlaceId => { setLoadedPlaces(prevPlaces => prevPlaces.filter(place => place.id !== deletedPlaceId) ); }; // ... <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler} /> // ...","title":"Deleting Places"},{"location":"mern/#fixing-navlinks-and-my-places","text":"Modify NavLinks.js <NavLink to={`/${auth.userId}/places`}>MY PLACES</NavLink>","title":"Fixing NavLinks and \"My Places\""},{"location":"mern/#final-adjustments","text":"Modify Auth.js minimum password length to 6 to be consistent with backend Modify PlaceItem.js to not show buttons for places not belonging to that user. auth.userId === props.creatorId // as opposed to auth.isLoggedIn","title":"Final Adjustments"},{"location":"mern/#11-adding-file-upload","text":"","title":"11. Adding File Upload"},{"location":"mern/#introduction_2","text":"Accept & Handle Files (Images) on Backend Add File Picker on Frontend + Send File to Backend","title":"Introduction"},{"location":"mern/#building-an-imageupload-component","text":"ImageUpload.js so far: import React, { useRef } from 'react'; import './ImageUpload.css'; import Button from './Button'; const ImageUpload = props => { const filePickerRef = useRef(); const pickedHandler = event => { console.log(event.target); }; const pickImageHandler = () => { filePickerRef.current.click(); }; return ( <div className='form-control'> <input id={props.id} ref={filePickerRef} style={{ display: 'none' }} type='file' accept='.jpg,.png,.jpeg' onChange={pickedHandler} /> <div className={`image-upload ${props.center && 'center'}`}> <div className='image-upload__preview'> <img src='' alt='Preview' /> </div> <Button type='button' onClick={pickImageHandler}> PICK IMAGE </Button> </div> </div> ); }; export default ImageUpload; Add field to Auth.js, just after name: {!isLoginMode && <ImageUpload center id='image' />}","title":"Building an ImageUpload Component"},{"location":"mern/#finishing-an-using-the-imageupload-component-in-a-form","text":"Modifying Auth.js // ... if (!isLoginMode) { setFormData( { ...formState.inputs, name: undefined, image: undefined }, formState.inputs.email.isValid && formState.inputs.password.isValid ); } else { setFormData( { ...formState.inputs, name: { value: '', isValid: false }, image: { value: null, isValid: false } }, false ); } // ... {!isLoginMode && ( <ImageUpload center id='image' onInput={inputHandler} /> )} // ...","title":"Finishing an Using the ImageUpload Component (in a Form)"},{"location":"mern/#on-the-backend-using-multer-to-save-files","text":"npm i --save multer Starting on file-upload middleware Modifying users routes: // backend/routes/users-routes.js '/signup', fileUpload.single('image'),","title":"On the Backend: Using Multer to Save Files"},{"location":"mern/#filtering-files-on-the-backend-images-only","text":"Can't rely exclusively on frontend validations! Can be changed by users! File Upload middleware final // backend/middleware/file-upload.js const multer = require('multer'); const uuid = require('uuid'); const MIME_TYPE_MAP = { 'image/png': 'png', 'image/jpeg': 'jpeg', 'image/jpg': 'jpg' }; const fileUpload = multer({ limits: 500000, storage: multer.diskStorage({ destination: (req, file, cb) => { cb(null, 'uploads/images'); }, filename: (req, file, cb) => { const ext = MIME_TYPE_MAP[file.mimetype]; cb(null, uuid() + '.' + ext); } }), fileFilter: (req, file, cb) => { const isValid = !!MIME_TYPE_MAP[file.mimetype]; let error = isValid ? null : new Error('Invalid mime type!'); cb(error, isValid); } }); module.exports = fileUpload;","title":"Filtering Files on the Backend (Images Only!)"},{"location":"mern/#wiring-frontend-and-backend-up","text":"Modify Auth.js // src/user/pages/Auth.js const authSubmitHandler = async event => { event.preventDefault(); if (isLoginMode) { // ... doesnt apply here } else { try { const formData = new FormData(); formData.append('email', formState.inputs.email.value); formData.append('name', formState.inputs.name.value); formData.append('password', formState.inputs.password.value); formData.append('image', formState.inputs.image.value) const responseData = await sendRequest( 'http://192.168.2.2:5000/api/users/signup', 'POST', formData // headers set automatically when using form data ); auth.login(responseData.user.id); } catch (err) {} } };","title":"Wiring Frontend and Backend up"},{"location":"mern/#connecting-users-to-images","text":"Modifying app.js for rollback of image upload on error // backend/app.js app.use((error, req, res, next) => { if (req.file) { fs.unlink(req.file.path, err => { console.log(err); }); } // ... }); Link to User // backend/controllers/users-controllers.js // ... const createdUser = new User({ name, email, image: // old static url to external image, req.file.path, password, places: [] }); // ...","title":"Connecting Users to Images"},{"location":"mern/#serving-images-statically","text":"Modifying app.js in backend // backend/app.js // ... app.use(bodyParser.json()); app.use('/uploads/images', express.static(path.join('uploads', 'images'))); // ...","title":"Serving Images Statically"},{"location":"mern/#uploading-images-for-new-places","text":"Modify NewPlace.js // ... import ImageUpload from '../../shared/components/FormElements/ImageUpload'; // ... const NewPlace = () => { // ... // add image to useForm data: const [formState, inputHandler] = useForm( { // ... image: { value: null, isValid: false } }, false ); // ... const placeSubmitHandler = async event => { event.preventDefault(); try { const formData = new FormData(); formData.append('title', formState.inputs.title.value); formData.append('description', formState.inputs.description.value); formData.append('address', formState.inputs.address.value); formData.append('creator', auth.userId); formData.append('image', formState.inputs.image.value); await sendRequest('http://192.168.2.2:5000/api/places', 'POST', formData); history.push('/'); // Redirect the user to a different page } catch (err) {} }; return ( <React.Fragment> {/* ... */} <ImageUpload id='image' onInput={inputHandler} errorText='Please provide an image.' /> <Button type='submit' disabled={!formState.isValid}> ADD PLACE </Button> </form> </React.Fragment> ); }; Modifying places routes // backend/routes/places-routes.js // ... const fileUpload = require('../middleware/file-upload'); // ... router.post( '/', fileUpload.single('image'), // ... ) Modify places controllers // backend/controllers/places-controllers.js const createdPlace = new Place({ title, description, address, location: coordinates, image: // 'https://upload.wikimedia.org/wikipedia/commons/1/10/Empire_State_Building_%28aerial_view%29.jpg', req.file.path, creator }); Modify PlaceItem.js: <div className='place-item__image'> <img src={`http://192.168.2.2:5000/${props.image}`} alt={props.title} /> </div>","title":"Uploading Images for New Places"},{"location":"mern/#deleting-images-when-places-get-deleted","text":"Modifying places controllers // backend/controllers/places.controllers.js const fs = require('fs') // ... const deletePlace = async (req, res, next) => { // ... const imagePath = place.image; try { // ... } fs.unlink(imagePath, err => { console.log(err); }); };","title":"Deleting Images When Places Get Deleted"},{"location":"mern/#12-adding-authentication","text":"","title":"12. Adding Authentication"},{"location":"mern/#introduction_3","text":"Add Authentication Logic on both Ends","title":"Introduction"},{"location":"mern/#how-authentication-works-in-aa-mern-app","text":"","title":"How Authentication Works (in aa MERN App)"},{"location":"mern/#hashing-the-user-password","text":"Never store passwords in plain text! Using bcrypt.js npm i --save bcrypt.js Utilize in signup user controller // backend/controllers/users-controllers/signup() const bcrypt = require('bcryptjs'); // ... let hashedPassword; try { hashedPassword = await bcrypt.hash(password, 12); } catch (err) { const error = new HttpError( 'Could not create user, please try again.', 500 ); return next(error); } const createdUser = new User({ // ... password: hashedPassword, // ... });","title":"Hashing the User Password"},{"location":"mern/#logging-users-in-with-hashed-passwords","text":"Utilize in login user controller // backend/controllers/users-controllers/login() let isValidPassword = false; try { isValidPassword = await bcrypt.compare(password, existingUser.password); } catch (err) { const error = new HttpError( 'Could not log you in, please check your credentials and try again.', 500 ); return next(error); } if (!isValidPassword) { const error = new HttpError( 'Invalid credentials, could not log you in.', 401 ); return next(error); } res.json({ /* ... */})","title":"Logging Users In (with Hashed Passwords)"},{"location":"mern/#generating-tokens-jwt-on-the-backend","text":"With jsonwebtoken npm i --save jsonwebtoken Utilize in login user controller // backend/controllers/users-controllers.js const jwt = require('jsonwebtoken'); // ... const signup = async (req, res, next) => { let token; try { token = jwt.sign( { userId: createdUser.id, email: createdUser.email }, 'supersecret_dont_share', { expiresIn: '1h' } ); } catch (err) { console.log(err.message); const error = new HttpError( 'Signing up failed, please try again later.', 500 ); return next(error); } res .status(201) .json({ userId: createdUser.id, email: createdUser.email, token: token }); }; const login = async (req, res, next) => { // ... let token; try { token = jwt.sign( { userId: existingUser.id, email: existingUser.email }, 'supersecret_dont_share', { expiresIn: '1h' } ); } catch (err) { console.log(err.message); const error = new HttpError('Login failed, please try again later.', 500); return next(error); } res.json({ userId: existingUser.id, email: existingUser.email, token: token }); };","title":"Generating Tokens (JWT) on the Backend"},{"location":"mern/#backend-route-protection-with-auth-middleware","text":"Use in header, through middleware: // backend/middleware/check-auth.js const jwt = require('jsonwebtoken'); const HttpError = require('../models/http-error'); module.exports = (req, res, next) => { try { const token = req.headers.authorization.split(' ')[1]; // Authorization: 'Bearer TOKEN' if (!token) { throw new Error('Authentication failed!'); } const decodedToken = jwt.verify(token, 'supersecret_dont_share'); req.userData = { userId: decodedToken.userId }; next(); } catch (err) { const error = new HttpError('Authentication failed!', 401); return next(error); } }; Remember, order is important with routes, top to bottom! // backend/routes/places-routes.js // ... const checkAuth = require('../middleware/check-auth'); // ... router.get('/user/:uid', placesControllers.getPlacesByUserId); router.use(checkAuth);","title":"Backend Route Protection with Auth Middleware"},{"location":"mern/#using-and-attaching-jwt-tokens-in-react","text":"Modify auth login in Auth.js // src/user/pages/Auth.js // in BOTH login & signup modes: auth.login(responseData.userId, responseData.token); Modify in App.js // src/App.js const App = () => { const [token, setToken] = useState(false); // ... const login = useCallback((uid, token) => { setToken(token); setUserId(uid); }, []); const logout = useCallback(() => { setToken(null); setUserId(null); }, []); let routes; if (token) { /**/ } // ... return( <AuthContext.Provider value={{ isLoggedIn: !!token, token: token, // ... }} > { /**/ } </ AuthContext.Provider> ); Also modify the auth context // src/shared/context/auth-context.js import { createContext } from 'react'; export const AuthContext = createContext({ isLoggedIn: false, userId: null, token: null, login: () => {}, logout: () => {} }); Add token to header on new place request // src/places/pages/NewPlace.js await sendRequest('http://192.168.2.2:5000/api/places', 'POST', formData, { Authorization: 'Bearer ' + auth.token }); Handling OPTIONS Request // backend/middleware/check-auth.js module.exports = (req, res, next) => { if (req.method === 'OPTIONS') { return next(); } // ... };","title":"Using and Attaching JWT (Tokens) in React"},{"location":"mern/#using-tokens-to-update-and-delete-places","text":"Modifying UpdatePlace.js // src/places/pages/UpdatePlace.js // add auth header to update(patch) request: { 'Content-Type': 'application/json', Authorization: 'Bearer ' + auth.token } Set up for delete in PlaceItem.js: // src/places/pages/UpdatePlace.js // in confirm delete handler: 'DELETE', null, { Authorization: 'Bearer ' + auth.token }","title":"Using Tokens to Update and Delete Places"},{"location":"mern/#adding-authorization","text":"On the backend, updating places: // backend/controllers/places-controllers.js // in updatePlace(): if (place.creator.toString() !== req.userData.userId) { const error = new HttpError('You are not allowed to edit this place.', 401); return next(error); } place.title = title; // ...","title":"Adding Authorization"},{"location":"mern/#authorization-on-delete-places","text":"On the backend, deleting places: // backend/controllers/places-controllers.js // in deletePlace(): if (place.creator.id !== req.userData.userId) { const error = new HttpError('You are not allowed to edit this place.', 401); return next(error); } const imagePath = place.image;","title":"Authorization on \"Delete Places\""},{"location":"mern/#storing-the-token-in-the-browser-storage","text":"Have Token survive page reloads by storing in browser's local storage Modify App.js on frontend: // src/App.js const login = useCallback((uid, token) => { setToken(token); localStorage.setItem( 'userData', JSON.stringify({ userId: uid, token: token }) ); setUserId(uid); }, []);","title":"Storing the Token in the Browser Storage"},{"location":"mern/#adding-auto-login-basic-version","text":"By utilizing useEffect in App.js: // src/App.js const logout = useCallback(() => { setToken(null); setUserId(null); localStorage.removeItem('userData'); }, []); useEffect(() => { const storedData = JSON.parse(localStorage.getItem('userData')); if (storedData && storedData.token) { login(storedData.userId, storedData.token); } }, [login]);","title":"Adding Auto-Login (Basic Version)"},{"location":"mern/#managing-the-token-expiration-date","text":"Modify App.js: const login = useCallback((uid, token, expirationDate) => { setToken(token); setUserId(uid); const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60); localStorage.setItem( 'userData', JSON.stringify({ userId: uid, token: token, expiration: tokenExpirationDate.toISOString() }) ); }, []); // ... // also make sure to pass in useEffect: useEffect(() => { const storedData = JSON.parse(localStorage.getItem('userData')); if ( storedData && storedData.token && new Date(storedData.expiration) > new Date() ) { login( storedData.userId, storedData.token, new Date(storedData.expiration) ); } }, [login]);","title":"Managing the Token Expiration Date"},{"location":"mern/#finished-auto-login-auto-logout","text":"Set up logout timer in App.js with another useEffect // src/App.js // ... let logoutTimer; const App = () => { const [tokenExpirationDate, setTokenExpirationDate] = useState(); // ... const logout = useCallback(() => { setToken(null); setTokenExpirationDate(null); setUserId(null); localStorage.removeItem('userData'); }, []); useEffect(() => { if (token && tokenExpirationDate) { const remainingTime = tokenExpirationDate.getTime() - new Date().getTime(); logoutTimer = setTimeout(logout, remainingTime); } else { clearTimeout(logoutTimer); } }, [token, logout, tokenExpirationDate]); };","title":"Finished Auto-Login &amp; Auto Logout"},{"location":"mern/#creating-a-custom-authentication-hook","text":"Move auth logic from App.js to custom hook // src/shared/hooks/auth-hook.js import { useState, useCallback, useEffect } from 'react'; let logoutTimer; export const useAuth = () => { const [token, setToken] = useState(false); const [tokenExpirationDate, setTokenExpirationDate] = useState(); const [userId, setUserId] = useState(false); const login = useCallback((uid, token, expirationDate) => { setToken(token); setUserId(uid); const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60); setTokenExpirationDate(tokenExpirationDate); localStorage.setItem( 'userData', JSON.stringify({ userId: uid, token: token, expiration: tokenExpirationDate.toISOString() }) ); }, []); const logout = useCallback(() => { setToken(null); setTokenExpirationDate(null); setUserId(null); localStorage.removeItem('userData'); }, []); useEffect(() => { if (token && tokenExpirationDate) { const remainingTime = tokenExpirationDate.getTime() - new Date().getTime(); const minutesLeft = remainingTime / 60000; console.log(minutesLeft + ' minutes left.'); logoutTimer = setTimeout(logout, remainingTime); } else { clearTimeout(logoutTimer); } }, [token, logout, tokenExpirationDate]); useEffect(() => { const storedData = JSON.parse(localStorage.getItem('userData')); if ( storedData && storedData.token && new Date(storedData.expiration) > new Date() ) { login( storedData.userId, storedData.token, new Date(storedData.expiration) ); } }, [login]); return { token, login, logout, userId }; }; App.js final import React from 'react'; import { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom'; import Users from './user/pages/Users'; import NewPlace from './places/pages/NewPlace'; import UserPlaces from './places/pages/UserPlaces'; import UpdatePlace from './places/pages/UpdatePlace'; import Auth from './user/pages/Auth'; import MainNavigation from './shared/components/Navigation/MainNavigation'; import { AuthContext } from './shared/context/auth-context'; import { useAuth } from './shared/hooks/auth-hook'; const App = () => { const { token, login, logout, userId } = useAuth(); let routes; if (token) { routes = ( <Switch> <Route path='/' exact> <Users /> </Route> <Route path='/:userId/places'> <UserPlaces /> </Route> <Route path='/places/new' exact> <NewPlace /> </Route> <Route path='/places/:placeId'> <UpdatePlace /> </Route> <Redirect to='/' /> </Switch> ); } else { routes = ( <Switch> <Route path='/' exact> <Users /> </Route> <Route path='/:userId/places'> <UserPlaces /> </Route> <Route path='/auth' exact> <Auth /> </Route> <Redirect to='/auth' /> </Switch> ); } return ( <AuthContext.Provider value={{ isLoggedIn: !!token, token: token, userId: userId, login: login, logout: logout }} > <Router> <MainNavigation /> <main>{routes}</main> </Router> </AuthContext.Provider> ); }; export default App;","title":"Creating a Custom Authentication Hook"},{"location":"mern/#general-app-improvements","text":"Modify places controllers to get creator from userData instead of req body const createdPlace = new Place({ // ... creator: req.userData.userId });","title":"General App Improvements"},{"location":"mern/#13-application-deployment","text":"","title":"13. Application Deployment"},{"location":"mern/#introduction_4","text":"Deployment Preparation Different Ways of Deploying MERN Apps","title":"Introduction"},{"location":"mern/#deployment-steps-overview","text":"Develop & Test Your Code Swap URLs & Credentials for Production-ready Ones Consider using Environment Variables Build & Deploy Test Deployed Application, Monitor & Adjust","title":"Deployment Steps Overview"},{"location":"mern/#using-environment-variables","text":"Utilizing nodemon // backend/nodemon.json { \"env\": { \"DB_URL\": \"mongodb://localhost:27017/react-training\", \"PORT\": 5000, \"GOOGLE_API_KEY\": \"AIzaSyC7ap01wqRWATA7guCbFBvIgpbYZwKQIEo\", \"JWT_KEY\": \"supersecret_dont_share\" } }","title":"Using Environment Variables"},{"location":"mern/#environment-variables-in-react-apps","text":"Achieved with .env file in root folder Everyone can see because it is running in browser!! REACT_APP_GOOGLE_API_KEY=AIzaSyC7ap01wqRWATA7guCbFBvIgpbYZwKQIEo REACT_APP_BACKEND_URL=http://192.168.2.2:5000/api REACT_APP_ASSET_URL=http://192.168.2.2:5000 <!-- how to replace in index.html for google api key: --> <script src=\"https://maps.googleapis.com/maps/api/js?key=%REACT_APP_GOOGLE_API_KEY%\" async defer ></script> Replace all instances of localhost, 192.168.2.2, etc with React env variables ${process.env.REACT_APP_BACKEND_URL}","title":"Environment Variables in React Apps"},{"location":"mern/#preparing-api-keys-and-credentials","text":"Application & Key restrictions on Google API keys Configuring whitelist for (cloud) mongodb database","title":"Preparing API Keys and Credentials"},{"location":"mern/#building-the-react-app","text":"To build: npm run build Using production environment variables: Using .env.production file Automatically picked up by npm run build Swap API keys, etc Will revisit URLs (i.e. localhost)","title":"Building the React App"},{"location":"mern/#adding-code-splitting-to-react","text":"Prevent loading code that is not needed yet (lazy loading) Modify App.js // src/App.js import React, { Suspense } from 'react'; // import Users from './user/pages/Users'; // import NewPlace from './places/pages/NewPlace'; // import UserPlaces from './places/pages/UserPlaces'; // import UpdatePlace from './places/pages/UpdatePlace'; // import Auth from './user/pages/Auth'; const Users = React.lazy(() => import('./user/pages/Users')); const NewPlace = React.lazy(() => import('./places/pages/NewPlace')); const UserPlaces = React.lazy(() => import('./places/pages/UserPlaces')); const UpdatePlace = React.lazy(() => import('./places/pages/UpdatePlace')); const Auth = React.lazy(() => import('./user/pages/Auth')); // also need to wrap routes with Suspense <Router> <MainNavigation /> <main> <Suspense fallback={ <div className='center'> <LoadingSpinner /> </div> } > {routes} </Suspense> </main> </Router>","title":"Adding Code Splitting to React"},{"location":"mern/#understanding-possible-deployment-alternatives","text":"Two main options Deploy Two Separated Apps React App Static Host (only serve HTML, JS, and CSS) AWS S3, Firebase Hosting, etc... Node REST API Node.js Host AWS EC2 / EB, Heroku, etc... CORS Headers absolutely required! Deploy One Combined App Node REST API which renders the React App, too Node.js Host AWS EC2 / EB, Heroku, etc... CORS Headers are NOT required!","title":"Understanding Possible Deployment Alternatives"},{"location":"mern/#deploying-a-standalone-rest-api-example-heroku","text":"Hosting the NodeJS application Use Heroku Create account Initialize git on project Install and setup heroku CLI Setup deployment Settings > Config Vars (for environment variables) Make sure to set up port (heroku gives with process.env.PORT ) Whitelist network connection for MongoDB <--> Heroku Push code to Heroku","title":"Deploying a Standalone REST API (Example: Heroku)"},{"location":"mern/#deploying-a-standalone-react-spa-example-firebase-hosting","text":"Replace React production environment variables for backend/asset URLs Can use npm i -g serve to serve static content to test the React web app build before deployment Use Firebase Hosting for hosting static React app Install firebase tools firebase login firebase init (in project folder) Public directory? build Single-page-app? yes Don't overwrite index.html firebase deploy","title":"Deploying a Standalone React SPA (Example: Firebase Hosting)"},{"location":"mern/#fixing-style-issues","text":"Styling issue related to ordering of styles use !important or specify with .card.user-item__content","title":"Fixing Style Issues"},{"location":"mern/#deploying-a-combined-app","text":"Grab build folder and copy to backend React environment variables may change (urls) Copy build folder into a backend/public/ folder After routes in app.js, serve public folder statically (comment out error for not found routes) // ... app.use('/api/users', usersRoutes); // => /api/users/ ... app.use(express.static(path.join('public'))); // app.use((req, res, next) => { // const error = new HttpError('Could not find this route.', 404); // throw error; // }); // ... Then move to top and create catch-all route: app.use('/uploads/images', express.static(path.join('uploads', 'images'))); app.use(express.static(path.join('public'))); // ... app.use('/api/users', usersRoutes); // => /api/users/ ... app.use((req, res, next) => { res.sendFile(path.resolve(__dirname, 'public', 'index.html')); }); Now we can deploy it (heroku)","title":"Deploying a Combined App"},{"location":"mern/#storing-filesuploads","text":"Files aren't persistently stored and are lost when server restarts Host statically elsewhere? (Heroku specific solutions)","title":"Storing Files/Uploads"},{"location":"mern/#the-end","text":"","title":"The End"},{"location":"mkdocs/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Markdown Guide","title":"MkDocs"},{"location":"mkdocs/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"mkdocs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"mkdocs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Markdown Guide","title":"Project layout"},{"location":"ng/","text":"Angular Notes Based on Udemy Course Angular 8 The Complete Guide by Maximilian Schwarzm\u00fcller Introduction What is Angular Reactive Single-Page Applications Angular Versioning AngularJS (Angular 1) -old Angular (Angular 2) -rewrite of Angular 1 ... Angular 8 Big release every 6 months CLI ng new my-first-app Data-binding {{ title }} Selectors <app-root> ngModel Importing forms module Typescript More features than vanilla JS Strongly typed Compiled to JS Handled by CLI Bootstrap Styling npm install bootstrap angular.json The Basics app-root Root component main.ts First code executed Passes AppModule to method app.module.ts Bootstrap array main.ts > bootstrap angular application > pass module as arg > selector > html template > html Components Whole application is composed of different components, starting with app component / root component Create a new Component Selectors for other components added - app.component.html Folder for component in app folder Same name as component for good practice Example // server/server.component.ts @Component({ // decorators - all start with @ selector: 'app-server', templateUrl: './server.component.html' }) export class ServerComponent {} AppModule Components used to build webpages, bundled by modules into packages. Has NgModule decorator Need to declare component here, declarations array Imports array for other modules Can create components with CLI ng generate component servers OR ng g c servers Can nest components, a nd/or use multiple times Component templates Must be template property at all times Can use templateUrl, or insert HTML: template: '<app-server><app-server> Component Styles Can wrap bootstrap classes if used Can also add to component CSS file Reference multiple stylesheets in styleUrls array Component Selector Must be unique Can use HTML attribute or tags, class, etc Selecting by id not supported Databinding Communication TS Code --> HTML (template) Output data String interpolation Surround in double curly brace {{ data }} Any expression that can resolve to a string Or easily converted Property binding Surround in brackets [property]=\"data\" Directly binding to native html property Can update dynamically: [disabled]=\"!allowNewServer\" Can also bind to directives or components, other properties React to User Events Event-binding Surround in parentheses (event)=\"expression\" (click)=\"onCreateServer() On input event (input)=\"onUpdateServerName($event)\" In Method this.serverName = (<HTMLInputElement>event.target).value Combination Two-way binding Brackets & Parentheses [(ngModel)]=\"data\" [(ngModel)]=\"serverName\" Directives Instructions in the DOM <p appTurnGreen> @Directive Attribute Selector ngIf <p *ngIf=\"serverCreated\"> built in ' * ' -> structural directive (changes DOM) Attribute directors don't add or remove elements, changes element it's placed on ngStyle <p [ngStyle]=\"{backgroundColor: getColor()}\"> binding to property of directive ngClass [ngClass]=\"{online: serverStatus ==='online'}\" adds CSS class if condition is true ngFor <app-server *ngFor=\"let server of servers\"> Can use server in template {{ server }} get index let i = index Course Project, Planning Shopping List, Recipe Book Always Root component Header component for connecting List & Book Shopping List -> Features Shopping List, Edit components Recipe Book -> Features Recipe List, Recipe Ittem, Recipes Component, Recipes Detail Ingredient MModel Recipe Model Creating a Model export class Recipe { public name: string; public description: string; public imagePath: string; constructor(name: string, desc: string, imagePath: string) {} } Debugging Error Messages Console in browser Sourcemaps map JS bundles to TS code Webpack TS files Augury (browser extension) Components & Data-binding Deep Dive Splitting into separate Components Array in AppComponent -> Cockpit Component -> Server-Elements Component Can use Event & Property binding on directives and components Binding to custom properties By default component properties only accessible in that component Decorators @Input() // pass a new string for new name outside component ie: [element]=\"serverElement\" Alias bind to custom event Data up component hierarchy New event emitter @Output() serverCreated = new EventEmitter<{serverName: string, serverContent: string}>(); Optional alias -> arg passed to @Output View Encapsulation CSS between components Attributes applied by Angular Style encapsulation Same attribute to all elements in component \"Emulates shadow DOM\" in @Component: encapsulation: ViewEncapsulation.Emulated // None, Native (other options) Load references in Templates In input element: #serverNameInput On button: (click)=\"onAddServer(serverNameInput)\" @ViewChild @ViewChild('serverContentInput', {static: true}) serverControlInput: ElementRef; this.serverContentInput.nativeElement.value Projecting content into Components with ng-content Everything between open and close of tags on own component will be lost unless: <ng-content></ng-content> Component Lifecycle ngOnChanges Called after a bound input property changes ngOnInit Called once component is initialized ngDoCheck Called during every change detection run ngAfterContentInit Called after content ( ng-content ) has been projected into view ngAfterContentChecked Called every time the projected content has been checked ngAfterViewInit Called after the component's view (and child views) has been initialized ngAfterViewChecked Called every time the view (and child views) has been checked ngOnDestroy Called once the component is about to be destroyed Concept: CONTENT/VIEW ngOnChanges example ngOnChanges(changes: SimpleChanges) object, with bound property 'element' in this case @ContentChild @ContentChild('contentParagraph', { static: true }) paragraph: ElementRef Using projected content/content to be generated App component: <app-component> <!-- CONTENT --> </app-component> Access via ViewChild in app.component Access via ContentChild in server-element.component Directives Deep Dive Attribute Directives (ngClass, ngStyle) Change properties of element Structured Directives (ngIf, ngFor) Affects whole area in DOM Can't have more than one structural directive on an element Creating a Basic Attribute Directive Must import Directive from angular core Configure: - selector: '[myDirective]' // select as attribute Must inform angular directive exists via app module <p myDirective> ... </p> Renderer for better Basic Attribute Directive Renderer2 Better practice: ngOnInit(){ this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'blue'); } Better to use Renderer for DOM access and it's methods to access DOM Using HostListener to Listen to Host Events @HostListener('mouseenter')mouseover(eventData: event) { // ... } Using HostBinding to Bind to Host Properties @HostBinding('style.backgroundColor') backgroundColor: string Element must have a property this.backgroundColor = 'blue'; Can bind to any property of element directive is sitting on Binding to directive properties @Input() defaultColor: string = 'blue' this.backgroundColor = this.defaultColor <p appBetterHighlight [defaultColor]=\"'yellow'\"> CAN bind to properties of our own directives CAN omit square brackets, single quotes when passing down a string Make clear property binding is happening, NOT an attribute Creating a Structured Directive * indicates a structured directive Transformed into something else no * syntax There is only : Property binding Event binding Two-way binding String interpolation *ngIf example norm: <div *ngIf=\"!onlyOdd\"> transform: <ng-template [ngIf]=\"!onlyOdd\"> Building one @Input() set unless (value: boolean) Must store name! Understanding ngSwitch <div [ngSwitch]=\"value\"> <p *ngSwitchCase=\"5\">Value is 5</p> <p *ngSwitchDefault>Default</p> Using Services & Dependency Injection Services address duplicating code or data storage/access Centralize a certain task Creating a Service Decorator not needed Injecting service into components Dependency Injector Hierarchal Injector AppModule -> Some instance of service available application-wide App Component -> Available for all components (not for other services) Any other component -> Same service instance for component and add all child components Add constructor in component where service will be used: constructor(private loggingService: LoggingService) {} // must give type Must give providers in component decorator providers: [LoggingService] Different instances in this example, providers array dictates new instance if service included, otherwise, same instance. Declare Service in providers array overrides the instance next, up, creating it's own. Thus, can inject a service into a service Injecting requires 'meta-data', found in decorators Must use @Injectable for service -> service Into receiving service Cross-Component Communication with Services In service: statusUpdated = new EventEmitter<string>(); In account, onSetTo: this.accountService.statusUpdated.emit(status); In new account, constructor: this.accountService.statusUpdated.subscribe((statis: string) => alert('New status ' + status)); Provide at AppModule level Alternative syntax: @Injectable({ providedIn: 'root' }) For application-wide service Changing Pages with Routing Why Navigation, other pages Setting up, in AppModule const appRoutes: Routes = [ { path: 'user', component: UsersComponent }, // no slash { path: '', component: HomeComponent } // home page: '/' ]; In component.html: <router-outlet></router-outlet> Implement Navigation with a Directive Using href will reload the app, reseting state. Not ideal behavior in HTML: <a routerLink=\"/\">Home</a> OR (array): <a [routerLink]=\"['/users']\"> -> Property binding (non-string); For nested links ' / ' indicates absolute path Navigation will build on what component it's in /servers/servers example ' ./ ' for relative path, or ' ../ ' Setting selected nav tab as active dynamically: routerLinkActive=\"active\" Empty home path always there, always active To fix: [routerLinkActiveOptions]=\"{ exact: true }\" Exact path, instead of including Navigating Programmatically onLoadServer() { // calculations this.router.navigate(['/servers']); } Inject via constructor: constructor(private router: Router) -> Import from angular/router With relative Navigate method above does not know which route you're currently on, opposed to routerLink Pass second arg to inform: this.router.navigate(['servers'], { relativeTo: this.route }); Must inject! private route: ActivatedRoute Passing parameters to routes Add dynamic part to route: { path: 'users/:id', component: UserComponent } Fetch route parameters (inject ActivatedRoute) this.route.snapshot.params['id'] Snapshot works for first instance, won't re-render if already on component, need approach to get updated data this.route.params // Observable .subscribe( // update user object when params change (params: Params) => { // import this.user.id = params['id']; } ); Snapshot sufficient if component never reloads. For manual unsubscribe: ngOnDestroy(){ this.paramsSubscription.unsubscribe() } Component must implement ngOnDestroy Params imported Angular does this automatically! Good practice to do manually Passing query params and fragments [routerLink]=\"['/servers', 5, 'edit']\" [queryParams]=\"{ allowEdit: '1' }\" fragment=\"loading\" Dynamic: HTML: (click)=\"onLoadServer(1)\" TS: typescript onLoadServer(id: number) { // do stuff this.router.navigate( ['/servers', id, 'edit'] ) } Retrieve query params & fragments In constructor: private route: ActivatedRoute ngOnInit: this.route.snapshot.queryParams OR .fragment this.route.queryParams.subscribe() this.route.fragment.subscribe() Params come in as string, convert to number: const id = +this.route.snapshot.params['id'] Setting up Child (nested) Routes Add property to route: { path: 'servers', component: ServersComponent, children: [ { path: ':id', component: ServerComponent }, // servers will be pre-appended { // ... } ] } Must NEST a <router-outlet> onEdit button this.router.navigate( ['edit'], { relativeTo: this.route, queryParamsHandling: 'preserve' } // blank for new, keep old overwrite new, merge for no overwrite ); Redirecting & Wildcard routes { path: 'something', redirectTo: '/not-found' } ^ path: '**' Wildcard route, all routes that are not known Must be at bottom/last route! Outsourcing Route Config app-routing.module.ts `@NgModule Must export! Guards canActivate: { path: 'servers', canActivate: [AuthGuard], } // ... Protecting child (nested) routes: canActivateChild: canActivateChild: [AuthGuard] // fake or mimic read Auth Controlling navigation with canDeactivate Use for prompting discard of changes or navigate, component must implement Given as property in route Similar format to canActivate Passing Static Data to a Route Date property in route definition: { path: 'not-found', component: ErrorPageComponent, data: { message: 'Page not found!' }} Resolving Dynamic Data with the resolve Guard Resolver Service Resolve property on route (best for async) Takes an object { path: ':id', component: ServerComponent, resolve: { server: ServerResolver }} \"server\" is choice of name this.route.data.subscribe((data: Data) => { this.server = data['server']; // choice of name \"server\" here }); Location Strategies Add configs for old browsers RouterModule.forRoot(appRoutes, { useHash: true }) Hash mode routing Understanding Observables Observable - A data source (user input) events, http request, triggered in code. Observer Handle data, handle error, handle completion RxJs Unsubscribe if no longer using Avoid memory leaks Custom Observable Imports Handle next, complete, error Can use built-in operators in between Observer/Observable Pipe, operators Subject More active observable, event emitter For communicating between components with Services Handling Forms in Angular Apps Form as a JS object Value, metadata 2 Approaches Template-Driven Form object inferred from DOM Reactive Synced with DOM Template Driven: @ViewChild('f', { static: false }) signupForm: NgForm; <form (ngSubmit)=\"onSubmit(f)\" #f=\"ngForm\"> Validation Built-In Validators Required Email Form states ng-valid ng-invalid example: [disabled]=\"!f.valid\" , #email=\"ngModel\" <--> *ngIf=\"!email.valid\" Default value: [ngModel]=\"defaultQuestion\" Grouping data: ngModelGroup=\"userData\" // key #userData=\"ngModelGroup\" Radio buttons Similar to other inputs, add ngModel Setting & Fetching Form Values form.setValue form.patchValue Extract with ViewChild Reset Form signupForm.reset() Reactive Approach In component: signupForm: FormGroup; In Module: ReactiveFormsModule // in OnInit: this.signupForm = new FormGroup({ 'username': new FormControl(null), 'email': new FormControl(null), 'gender': new FormControl('male') }); Submit <form (ngSubmit)=\"onSubmit()\"> Validation Not using required Not configured at template new FormControl(null, Validators.required) Access to Controls *ngIf=\"!signupForm.get('email').valid\" Grouping FormGroup({ FormControl, Form Control }) In template: <div formGroupName=\"userData\"> <input formControlName=\"username\"> Access: *ngIf=\"!signupForm.get('userData.username').valid\" Arrays of Form Control Component: 'hobbies': new FormArray([]) // empty onAddHobby() { const control = new FormControl(null); (<FormArray>this.signupForm.get('hobbies')).push(control); } Template: <button (click)=\"onAddHobby()\"> <div *ngFor=\"let hobbyControl of signupForm.get('hobbies').controls; let i = index\" > <input [formControlName]=\"i\"> Custom Validators A function checked during validation forbiddenNames(control: FormControl): {[s: string]: boolean} { } Errors: signupForm.get('userData.email').errors['nameIsForbidden'] ASYNC Validator: forbiddenEmails(control: FormControl): Promise<any> | Observable<any> { const promise = new Promise<any>((resolve, reject) => { setTimeout(() => { if (control.value === 'test@test.com') { resolve({ 'emailIsForbidden': true }); } else { resolve(null); } }, 1500); }); return promise; } statusChanges & valueChanges this.signupForm.statusChanges.subscribe( (value) => console.log(value) ); Using Pipes to Transform Output For transforming values <p>{{ username | uppercase }}</p> Built-in & Custom Using {{ var | date }} Parameterizing Pipes {{ var | date: 'fullDate' }} // parameter -> fullDate For multiple: date:param:param Can combine {{ var | date:'fullDate' | uppercase }} Custom // shorten.pipe.ts @Pipe({ name: 'shorten' }) export class ShortenPipe implements PipeTransform { transform(value: any) { return value.substr(0, 10); } } Decorator, also in declarations in app.module.ts Parameterizing shorten: 10 Can use as filter of loop content Pure/Impure Pipes Recalculated pipe when data changes - Impure Pipe Async Pipe Works with Promises, Observables Making Http Requests How does Angular interact with backends? How to connect Angular to a database Not directly HTTP Requests/responses Server HTTP Request -> [Server/API (REST, GraphQL)] -> HTTP Response -> Angular -> Store and Fetch Data -> SQL/NoSQL HTTP Anatomy HTTP Verb URL (API Endpoint) Headers(metadata) Body Google Firebase - complete backend service (.json) POST Need HttpClientModuke in imports -> app.module Inject to component constructor(private http: HttpClient) { } http.post returns Observable, must subscribe or won't be sent Same with GET Transform with Pipe Example with Map Using Services for HttpRequests Service and Components Working together DELETE Handle Errors Second arg in subscribe Using a Subject All HTTP Methods have options to configure, such as headers HttpHeaders HttpParams HttpEventType Interceptors Service to run right before request HttpRequest, HttpHandler Structure! (see http-01-start) Doesn't need to be injected Manipulate Request object Request immutable, must create new one Response Interceptors Pipe handle in return of request Multiple Order matters! Authentication and Route Protection in Angular How it works Client -- Sends auth data --> Server Server -- Session --> Client For Angular, we use single page applications. Front-end decoupled from back-end. Will use a RESTful API since sessions can't be used. Communication done through HttpClient offered by Angular. Token sent to client which stores it, stored token is sent to authorize subsequent request. Adding Auth Page Sign up and login. Lock down recipes and manage dropdown to only be used by auth'd users. Switch between Auth Modes Use click listener, function to reverse a boolean Handling Form Input Similar to previous forms <div class=\"row\"> <div class=\"col-xs-12 col-md-6 col-md-offset-3\"> <div class=\"alert alert-danger\" *ngIf=\"error\"> <p>{{ error }}</p> </div> <div *ngIf=\"isLoading\" style=\"text-align: center\"> <app-loading-spinner></app-loading-spinner> </div> <form #authForm=\"ngForm\" (ngSubmit)=\"onSubmit(authForm)\" *ngIf=\"!isLoading\"> <div class=\"form-group\"> <label for=\"email\">E-Mail</label> <input type=\"email\" id=\"email\" class=\"form-control\" ngModel name=\"email\" required email > </div> <div class=\"form-group\"> <label for=\"password\">Password</label> <input type=\"password\" id=\"password\" class=\"form-control\" ngModel name=\"password\" required minlength=\"6\" > </div> <div> <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"!authForm.valid\"> {{ isLoginMode ? 'Login' : 'Sign Up' }} </button> | <button class=\"btn btn-primary\" (click)=\"onSwitchMode()\" type=\"button\"> Switch to {{ isLoginMode ? 'Sign Up' : 'Login' }} </button> </div> </form> </div> </div> Use service to communicate with backend and authenticate Interface of response data export interface AuthResponseData { kind: string; idToken: string; email: string; refreshToken: string; expiresIn: string; localId: string; registered?: boolean; // optional, is only in login res } Chaining observables onSubmit(form: NgForm) { if (!form.valid) { return; } const email = form.value.email; const password = form.value.password; let authObs: Observable<AuthResponseData>; this.isLoading = true; if (this.isLoginMode) { authObs = this.authService.login(email, password); } else { authObs = this.authService.signup(email, password); } authObs.subscribe(resData => { console.log(resData); this.isLoading = false; }, errorMessage => { console.log(errorMessage); this.error = errorMessage; this.isLoading = false; }); form.reset(); } Source error handling to private function in service. private handleError(errorRes: HttpErrorResponse) { let errorMessage = 'An unknown error occurred!'; if (!errorRes.error || !errorRes.error.error) { return throwError(errorMessage); } switch (errorRes.error.error.message) { case 'EMAIL_EXISTS': errorMessage = 'This email exists already.'; break; case 'EMAIL_NOT_FOUND': errorMessage = 'This email does not exist'; break; case 'INVALID_PASSWORD': errorMessage = 'This password is not correct'; break; } return throwError(errorMessage); } Creating and Storing the User Data Create a user model // src/app/auth/user.model.ts export class User { constructor( public email: string, public id: string, // underscore & private for validity private _token: string, private _tokenExpirationDate: Date ) {} /* getter using get keyword access like a property allows for logic in validity and checks */ get token() { if (!this._tokenExpirationDate || new Date() > this._tokenExpirationDate) { return null; } return this._token; } } Use in Auth Service // src/app/auth/auth.service.ts user = new Subject<User>(); // ... private handleAuthentication( email: string, userId: string, token: string, expiresIn: number ) { const expirationDate = new Date(new Date().getTime() + expiresIn * 1000); const user = new User(email, userId, token, expirationDate); this.user.next(user); } // integrate to login and signup, from pipe .pipe( catchError(this.handleError), tap(resData => { this.handleAuthentication( resData.email, resData.localId, resData.idToken, +resData.expiresIn ); }) ); Reflecting the Auth State in the UI Add this.router.navigate(['/recipes]); to successful auth subscriber in auth component. Reflect state in Header component Disable recipes link if not logged in Disable Authenticate link only if logged in. Disable dropdown if not logged in Show Logout button Get current auth status into header component (user with valid token or not) isAuthenticated = false; private userSub = Subscription; // inject auth service // implement ngOnInit and ngOnDestroy ngOnInit() { this.userSub = this.authService.user.subscribe(user => { this.isAuthenticated = !!user; console.log(!user); console.log(!!user); }); } // then use ngIf in template Adding the Token to Outgoing Requests Change user in auth service user = new BehaviorSubject<User>(null); Use this to pull one value from user object in data-storage service, using take, and refactoring fetchRecipes: fetchRecipes() { return this.authService.user.pipe( take(1), exhaustMap(user => { return this.http.get<Recipe[]>( 'https://ng-learn-practice.firebaseio.com/recipes.json' ); }), map(recipes => { return recipes.map(recipe => { return { ...recipe, ingredients: recipe.ingredients ? recipe.ingredients : [] }; }); }), tap(recipes => { this.recipeService.setRecipes(recipes); }) ); } Attaching the Token with an Interceptor Want to also add token to storeRecipes Use an interceptor to manipulate requests instead of handling it twice. // src/app/auth/auth-interceptor.service.ts import { Injectable } from '@angular/core'; import { HttpInterceptor, HttpRequest, HttpHandler, HttpParams } from '@angular/common/http'; import { AuthService } from './auth.service'; import { take, exhaustMap } from 'rxjs/operators'; @Injectable() export class AuthInterceptorService implements HttpInterceptor { constructor(private authService: AuthService) {} intercept(req: HttpRequest<any>, next: HttpHandler) { return this.authService.user.pipe( take(1), exhaustMap(user => { // must check, only add token if we have a user! otherwise send original req if (!user) { return next.handle(req); } const modifiedRequest = req.clone({ params: new HttpParams().set('auth', user.token) }); return next.handle(modifiedRequest); }) ); } } Adding Logout Add method to authService and link to header // src/app/auth/auth.service.ts logout() { this.user.next(null); this.router.navigate(['/auth']); } // src/app/header/header.component.ts onLogout() { this.authService.logout(); } Adding Auto-Login Use local storage via browser to store token to be persisted in app reload Add to end of handleAuthentication in auth service: localStorage.setItem('userData', JSON.stringify(user)); Implement autoLogin method autoLogin(){ const userData: { email: string, id: string, _token: string, _tokenExpirationDate: string; } = JSON.parse(localStorage.getItem('userData')); if (!userData) { return; } const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate)); if (loadedUser.token) { this.user.next(loadedUser); } } Add to App Component ( runs first ) ngOnInit() { this.authService.autoLogin(); } Adding Auto-Logout Need to manually clear the snapshot of the user At end of logout method in auth service localStorage.removeItem('userData'); Must set timer to know when to invalidate token. autoLogout method Must also clear token expiration timer. Store in property private tokenExpirationTimer: any; logout() { this.user.next(null); this.router.navigate(['/auth']); localStorage.removeItem('userData'); if (this.tokenExpirationTimer) { clearTimeout(this.tokenExpirationTimer); } this.tokenExpirationTimer = null; } autoLogout(expirationDuration: number) { this.tokenExpirationTimer = setTimeout(() => { this.logout(); }, expirationDuration); } Need to call autoLogout everyime we emit a new user to the app. So, in handleAuthentication and autoLogin methods // in handleAuthentication method this.user.next(user); this.autoLogout(expiresIn * 1000); Must calculate expiration date in autoLogin // in autoLogin method if (loadedUser.token) { this.user.next(loadedUser); const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime(); this.autoLogout(expirationDuration); } Adding an Auth Guard Run logic right before a route is loaded. // ./src/app/auth/auth.guard.ts import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router'; import { Injectable } from '@angular/core'; import { Observable } from 'rxjs'; import { map } from 'rxjs/operators'; import { AuthService } from './auth.service'; @Injectable({ providedIn: 'root' }) export class AuthGuard implements CanActivate { constructor(private authService: AuthService) {} canActivate( route: ActivatedRouteSnapshot, router: RouterStateSnapshot ): boolean | Promise<boolean> | Observable<boolean> { return this.authService.user.pipe( map(user => { return !!user; }) ); } } Add to Router Module // ./src/app/app-routing.module path: 'recipes', component: RecipesComponent, canActivate: [AuthGuard], children: [ // ... Add redirect on attempt to go to /recipes Used to have to add router and tap, redirect manually Can now use URL Tree import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router'; import { Injectable } from '@angular/core'; import { Observable } from 'rxjs'; import { map } from 'rxjs/operators'; import { AuthService } from './auth.service'; @Injectable({ providedIn: 'root' }) export class AuthGuard implements CanActivate { constructor(private authService: AuthService, private router: Router) {} canActivate( route: ActivatedRouteSnapshot, router: RouterStateSnapshot ): | boolean | UrlTree | Promise<boolean | UrlTree> | Observable<boolean | UrlTree> { return this.authService.user.pipe( take(1), map((user) => { const isAuth = !!user; if (isAuth) { return true; } return this.router.createUrlTree(['/auth']); }) ); } } Dynamic Components What are Dynamic Components(?) Components you create dynamically at runtime. Show an alert, some modal, some overlay, etc How to load it on demand, communicate, and get rid of it. Adding an Alert Modal Component Build simple alert box on invalid login credentials // ./src/app/shared/alert/alert.component.ts import { Component, Input } from '@angular/core'; @Component({ selector: 'app-alert', templateUrl: './alert.component.html', styleUrls: ['./alert.component.css'] }) export class AlertComponent { @Input() message: string; } <!-- ./src/app/shared/alert/alert.component.html --> <div class=\"backdrop\"></div> <div class=\"alert-box\"> <p>{{ message }}</p> <div class=\"alert-box-actions\"> <button class=\"btn btn-primary\">Close</button> </div> </div> /* ./src/app/shared/alert/alert.component.css */ .backdrop { position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0, 0, 0, 0.75); z-index: 50; } .alert-box { position: fixed; top: 30vh; left: 20vw; width: 60vw; padding: 16px; z-index: 100; background: white; box-shadow: 0 2px 8px rbga(0, 0, 0, 0.26); } .alert-box-actions { text-align: right; } <!-- ./src/app/auth/auth.component.html --> <!-- <div class=\"alert alert-danger\" *ngIf=\"error\"> <p>{{ error }}</p> </div> --> <app-alert [message]=\"error\" *ngIf=\"error\"></app-alert> Understanding the Different Approaches What are dynamic components? Loaded Programmatically *ngIf Component embedded via selector (declaratively) *ngIf controls whether component is added to DOM Dynamic Component Loader (doesn't exist anymore) Component created and added to DOM via code (imperatively) Component is managed & added by developer Using ngIf <!-- ./src/app/auth/auth.component.html --> <app-alert [message]=\"error\" *ngIf=\"error\" (close)=\"onHandleError()\"></app-alert> // ./src/app/auth/auth.component.ts onHandleError() { this.error = null; } // ./src/app/shared/alert/alert.component.ts @Input() message: string; @Output() close = new EventEmitter<void>(); onClose() { this.close.emit(); } <!-- ./src/app/shared/alert/alert.component.html --> <div class=\"backdrop\" (click)=\"onClose()\"></div> <div class=\"alert-box\"> <p>{{ message }}</p> <div class=\"alert-box-actions\"> <button class=\"btn btn-primary\" (click)=\"onClose()\">Close</button> </div> </div> Preparing Programmatic Creation Comment out app-alert in html Create method in auth component // ./src/app/auth/auth.component.ts // on error in authObs: this.error = errorMessage; this.showErrorAlert(errorMessage); this.isLoading = false; // Use component factory resolver, inject into constructor private showErrorAlert(message: string) { const alertCmpFactory = this.componentFactoryResolver.resolveComponentFactory( AlertComponent ); } Create a directive // ./src/app/shared/placeholder/placeholder.directive.ts import { Directive, ViewContainerRef } from '@angular/core'; @Directive({ selector: '[appPlaceholder]' }) export class PlaceholderDirective { constructor(public viewContainerRef: ViewContainerRef) {} } Creating a Component Programmatically Add ng-template to HTML <!-- ./src/app/auth/auth.component.html --> <!-- Get access to this place in the DOM --> <ng-template appPlaceholder></ng-template> // ./src/app/auth/auth.component.ts // Access directive with @ViewChild @ViewChild(PlaceholderDirective, { static: false }) alertHost: PlaceholderDirective; // ... private showErrorAlert(message: string) { const alertCmpFactory = this.componentFactoryResolver.resolveComponentFactory( AlertComponent ); const hostViewContainerRef = this.alertHost.viewContainerRef; hostViewContainerRef.clear(); hostViewContainerRef.createComponent(alertCmpFactory); } // ERROR: No component factory found for AlertComponent. Did you add it to @NgMOdule.entryComponents? Understanding entryComponents Angular does not automatically reach out to declarations array when creating component manually in code. To tell Angular to be prepared for creation of that component, need to add special property to the object passed to NgModule // ./src/app/app.module.ts // in NgModule declaration bootstrap: [AppComponent], entryComponents: [ AlertComponent ] Data Binding and Event Binding Create instance with component ref To close, manually have to listen to our close event // ./src/app/auth/auth.component.ts private showErrorAlert(message: string) { const alertCmpFactory = this.componentFactoryResolver.resolveComponentFactory( AlertComponent ); const hostViewContainerRef = this.alertHost.viewContainerRef; hostViewContainerRef.clear(); const componentRef = hostViewContainerRef.createComponent(alertCmpFactory); componentRef.instance.message = message; // Must create closeSub: Subscription this.closeSub = componentRef.instance.close.subscribe(() => { this.closeSub.unsubscribe(); hostViewContainerRef.clear(); }); } Angular Modules & Optimizing Angular Apps What are Modules Modules are ways to bundle Angular building blocks together Angular analyzes NgModules to understand your application and it's features. Defines all building blocks your app uses: Components, directives, services, pipes Application requires at least one module (AppModule) but may be split into multiple modules. Core Angular features are included in Angular modules (e.g. FormsModule) to load them only when needed. Can't use a feature/building block without including it in a module. Analyzing the AppModule Already using two modules in shop recipe project app.module.ts app-routing.module.ts AppModule Declarations Array of all components, directives, custom pipes being used in application Imports array Import other modules into this module. Split into multiple modules. Providers array Define all services we want to provide. Any service you plan on injecting, must add here. Bootstrap array Starting app, defines what component is available in index.html file. Typically one root component in bootstrap array Entry Components array For components created in code or programmatically AppRoutingModule Separation of concerns, leaner and more focused. Imports RouterModule Exported here. Made available in AppModule Every module works on its own Splitting modules help with performance Getting Started with Feature Modules Working with multiple modules, splitting into multiple feature modules. Products Module Orders Module In relation to course project 3 main feature areas: Recipes Shopping List Authentication Everything in a module stands alone Initial Recipes Module // ./src/app/recipes/recipes.module.ts import { NgModule } from '@angular/core'; import { CommonModule } from '@angular/common'; import { RouterModule } from '@angular/router'; import { ReactiveFormsModule } from '@angular/forms'; import { RecipesComponent } from './recipes.component'; import { RecipeListComponent } from './recipe-list/recipe-list.component'; import { RecipeDetailComponent } from './recipe-detail/recipe-detail.component'; import { RecipeItemComponent } from './recipe-list/recipe-item/recipe-item.component'; import { RecipeStartComponent } from './recipe-start/recipe-start.component'; import { RecipeEditComponent } from './recipe-edit/recipe-edit.component'; @NgModule({ declarations: [ RecipesComponent, RecipeListComponent, RecipeDetailComponent, RecipeItemComponent, RecipeStartComponent, RecipeEditComponent, ], exports: [ RecipesComponent, RecipeListComponent, RecipeDetailComponent, RecipeItemComponent, RecipeStartComponent, RecipeEditComponent, ] }) export class RecipesModule {} Splitting Modules Correctly Using something other than a service, only have access to what you import Import RouterModule Don't import BrowserModule CommonModule instead Import ReactiveFormsModule for recipe forms. Recipes module finished! Recipes Module // src/app/recipes/recipes.module.ts // imports @NgModule({ // ... imports: [RouterModule, CommonModule, ReactiveFormsModule], // ... }) export class RecipesModule {} Adding Routes to Feature Modules Move recipes segment of routing module to recipes module RecipesRoutingModule // ./src/app/recipes/recipes.module.ts import { NgModule } from '@angular/core'; import { Routes, RouterModule } from '@angular/router'; import { RecipesComponent } from './recipes.component'; import { AuthGuard } from '../auth/auth.guard'; import { RecipeStartComponent } from './recipe-start/recipe-start.component'; import { RecipeEditComponent } from './recipe-edit/recipe-edit.component'; import { RecipeDetailComponent } from './recipe-detail/recipe-detail.component'; import { RecipesResolverService } from './recipes-resolver.service'; const routes: Routes = [ { path: 'recipes', component: RecipesComponent, canActivate: [AuthGuard], children: [ { path: '', component: RecipeStartComponent}, { path: 'new', component: RecipeEditComponent }, { path: ':id', component: RecipeDetailComponent, resolve: [RecipesResolverService] }, { path: ':id/edit', component: RecipeEditComponent, resolve: [RecipesResolverService] } ] } ]; @NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule] }) export class RecipesRoutingModule {} Component Declarations Declaration and export important, must include components for routes used. Don't need exports in recipe module here, since not using in app component. Shopping List Feature Module // src/app/shopping-list/shopping-list.module.ts import { NgModule } from '@angular/core'; import { RouterModule } from '@angular/router'; import { CommonModule } from '@angular/common'; import { FormsModule } from '@angular/forms'; import { ShoppingListComponent } from './shopping-list.component'; import { ShoppingEditComponent } from './shopping-edit/shopping-edit.component'; @NgModule({ declarations: [ShoppingListComponent, ShoppingEditComponent,], imports: [ CommonModule, FormsModule, RouterModule.forChild([ { path: 'shopping-list', component: ShoppingListComponent } ]) ] }) export class ShoppingListModule {} Understanding Shared Modules Two feature modules, differing in one component Can move components in common to shared module to be imported by both Do this in Shop Recipe with Shared folder Import and export relevant components Can't have multiple declarations // src/app/shared/shared.module.ts import { NgModule } from '@angular/core'; import { AlertComponent } from './alert/alert.component'; import { LoadingSpinnerComponent } from './loading-spinner/loading-spinner.component'; import { PlaceholderDirective } from './placeholder/placeholder.directive'; import { DropdownDirective } from './dropdown.directive'; import { CommonModule } from '@angular/common'; @NgModule({ declarations: [ AlertComponent, LoadingSpinnerComponent, PlaceholderDirective, DropdownDirective ], imports: [ CommonModule ], exports: [ AlertComponent, LoadingSpinnerComponent, PlaceholderDirective, DropdownDirective, CommonModule ], entryComponents: [ AlertComponent ] }) export class SharedModule {} // import into shopping list module instead of common module Understanding the Core Module Makes app module leaner Can use to move services out, organize into one module, then bring core module back into app module Provide application-wide services in separate module, to keep app module leaner // src/app/core.module.ts import { NgModule } from '@angular/core'; import { HTTP_INTERCEPTORS } from '@angular/common/http'; import { ShoppingListService } from './shopping-list/shopping-list.service'; import { RecipeService } from './recipes/recipe.service'; import { AuthInterceptorService } from './auth/auth-interceptor.service'; @NgModule({ providers: [ ShoppingListService, RecipeService, { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptorService, multi: true } ] }) export class CoreModule {} Adding an Auth Feature Module // src/app/auth/auth.module.ts import { NgModule } from '@angular/core'; import { CommonModule } from '@angular/common'; import { FormsModule } from '@angular/forms'; import { AuthComponent } from './auth.component'; import { RouterModule } from '@angular/router'; import { SharedModule } from '../shared/shared.module'; @NgModule({ declarations: [AuthComponent], imports: [ CommonModule, FormsModule, RouterModule.forChild([ { path: 'auth', component: AuthComponent } ]), SharedModule ] }) export class AuthModule {} Understanding Lazy Loading An optimization concept Previous refactoring only cosmetic, not performative. Only run code that belongs to separate areas when we really need it Only load when we visit Implementing Lazy Loading For lazy loading, feature module needs to bring it's own routes. Have to change to empty path in recipes routing module, since it is now being used in app-routing module More Lazy Loading Implement on Shopping List and Auth modules Final result: // src/app/app-routing.module.ts import { NgModule } from '@angular/core'; import { Routes, RouterModule } from '@angular/router'; const appRoutes: Routes = [ { path: '', redirectTo: '/recipes', pathMatch: 'full' }, { path: 'recipes', loadChildren: () => import('./recipes/recipes.module').then(m => m.RecipesModule) }, { path: 'shopping-list', loadChildren: () => import('./shopping-list/shopping-list.module').then(m => m.ShoppingListModule) }, { path: 'auth', loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule) } ]; @NgModule({ imports: [RouterModule.forRoot(appRoutes)], exports: [RouterModule] }) export class AppRoutingModule {} Preloading Lazy-Loaded Code Small delay, this will alleviate that Preloads bundles as soon as possible imports: [RouterModule.forRoot(appRoutes, {preloadingStrategy: PreloadAllModules})], Modules and Services Can provide Service in AppModule Available app-wide Use root injector Should be default AppComponent(or other Components) Available in component-tree Use component-specific injector Use if service is only relevant for component tree Eager-loaded Module Available app-wide Use root injector Avoid this! Same effect as AppModule Lazy-Loaded Module Available in loaded module Use child injector Use if service should be scoped to loaded module Loading Services Differently Different instances // Service loading demo // src/app/logging.service.ts import { Injectable } from '@angular/core'; // @Injectable({ providedIn: 'root' }) export class LoggingService { lastLog: string; printLog(message: string) { console.log(message); console.log(this.lastLog); this.lastLog = message; } } Ahead-of-Time Compilation Code and templates compiled to Javascript with TS compiler. Angular compiler (automatically included in built code) compile template syntax to Javascript DOM instructions Just-in-Time(JiT) Compilation Angular template compiler runs in browser (at runtime) Ahead-of-Time (AoT) Compilation Angular template compiler runs during build process (before app is deployed) ng serve does JiT compilation by default Run ng build --prod Error with recipe-edit controls, fixed before get controls() { return (this.recipeForm.get('ingredients') as FormArray).controls; } Deploying an Angular App Using Firebase Preparation Use & check Environment Variables Polish & test code ng build --prod Uses ahead-of-time compilation Deploy build artificats (generated files) to static host No server-side language on static host, just HTML, JS, CSS Using Environment Variables src/environments File for production, and one for development environment.ts environment.prod.ts Import (used here with firebase API key in authentication service) import { environment } from '../../environments/environment'; environment.firebaseAPIKey Deployment Example: Firebase Hosting Options for static website hosting AWS S3 Firebase Hosting etc.. For Firebase, first install npm i -g firebase-tools Initialize firebase init Go through settings Deploy firebase deploy Server Routing vs Browser Routing When deploying an Angular app, it's really important to make sure that your server (like S3) is configured to always serve the index.html file. Here's why . Bonus: Working with NgRx in our Project State management What is Application State Example WelcomeComponent NewTrainingComponent CurrentTraining Component TrainingService Fetch excercises (NewTrainingComponent) Store excercises (CurrentTrainingComponent) Application state lost when application refreshes! TrainingService Store & Fetch on Backend Known as Persistent State on Backend ShoppingListService as example on our Recipe App (User) Event in UI/App -> State Changing Event -> Observable -> Operators* -> Listener -> Update UI *Optional Using Subjects, Observables Push subscribe mechanism What is NgRx Issues with the RxJS Approach State can be updated anywhere State is (possibly) mutable Handling side effects (e.g. Http calls) is unclear No specific Pattern is Enforced Redux State management pattern and library Store - Application State Services & Components receive state from Store Actions - Dispatch Sent to Reducers Reduces/Combines State Returns new state Store saves reduced State (immutably) NgRx is Angular's Implementation of Redux Differences to \"normal\" Redux Deeply integrated into Angular Injectable Services Uses RxJS Observables (Uses Typescript) Getting Started with Reducers App is fine as is Recommended to follow for introduction to this pattern Install: npm i --save @ngrx/store // src/app/shopping-list/shopping-list.reducer.ts import { Ingredient } from '../shared/ingredient.model'; const initialState = { ingredients: [ new Ingredient('Apples', 5), new Ingredient('Tomatoes', 10), ] }; export function shoppingListReducer(state = initialState, action) {} Adding Logic to the Reducer Never touch existing state. Instead, return new object to replace old state Copy old state import { Ingredient } from '../shared/ingredient.model'; import { Action } from '@ngrx/store'; const initialState = { ingredients: [ new Ingredient('Apples', 5), new Ingredient('Tomatoes', 10), ] }; export function shoppingListReducer(state = initialState, action: Action) { switch (action.type) { case 'ADD_INGREDIENT': return { ...state, // good practice to always copy over old state ingredients: [...state.ingredients, action] }; } } Understanding and Adding Actions // src/app/shopping-list/store/shopping-list.actions.ts import { Action } from '@ngrx/store'; import { Ingredient } from 'src/app/shared/ingredient.model'; export const ADD_INGREDIENT = 'ADD_INGREDIENT'; export class AddIngredient implements Action { readonly type = ADD_INGREDIENT; payload: Ingredient; // \"payload\" not a required name, can use any. only \"type\" property is required. } Setting up the NgRx Store // src/app/shopping-list/store/shopping-list.reducer.ts import { Ingredient } from '../../shared/ingredient.model'; import * as ShoppingListActions from './shopping-list.actions'; const initialState = { ingredients: [ new Ingredient('Apples', 5), new Ingredient('Tomatoes', 10), ] }; export function shoppingListReducer(state = initialState, action: ShoppingListActions.AddIngredient) { switch (action.type) { case ShoppingListActions.ADD_INGREDIENT: return { ...state, // good practice to always copy over old state ingredients: [...state.ingredients, action.payload] }; } } Add to AppModule imports array: StoreModule.forRoot({ShoppingList: shoppingListReducer}), Selecting State Inject to ShoppingListComponent: private store: Store<{ shoppingList: { ingredients: Ingredient[] } }> import { Ingredient } from '../../shared/ingredient.model'; import * as ShoppingListActions from './shopping-list.actions'; const initialState = { ingredients: [new Ingredient('Apples', 5), new Ingredient('Tomatoes', 10)] }; export function shoppingListReducer( state = initialState, action: ShoppingListActions.AddIngredient ) { switch (action.type) { case ShoppingListActions.ADD_INGREDIENT: return { ...state, // good practice to always copy over old state ingredients: [...state.ingredients, action.payload] }; default: return state; } } Dispatching Actions Find where we change state Create new object based on Action class and dispatch it Instead of adding payload as property in shopping-list actions, make into constructor funtion. constructor(public payload: Ingredient) {} When add ingredient, dispatch action, which reaches all reducers (1 in this case), in shopping-edit this.store.dispatch(new ShoppingListActions.AddIngredient(newIngredient)); Flow Add ingredient -> Dispatch the action (defined in actions) -> to ngrx store (aware of reducer) -> action reaches all reducers that store knows -> in reducer, action passed as second arg -> check for type of action -> react appropriately. Now using ngRx end-to-end for displaying and adding ingredients Multiple Actions Handle other state changes: Add multiple ingredients Update Ingredient Delete Ingredient Add Multiple Ingredients // src/app/shopping-list/store/shopping-list.actions.ts export const ADD_INGREDIENTS = 'ADD_INGREDIENTS'; export class AddIngredients implements Action { readonly type = ADD_INGREDIENTS; constructor(public payload: Ingredient[]) {} } // create union of diff action types export type ShoppingListActions = AddIngredient | AddIngredients; Implement on state change // src/app/recipes/recipe.service.ts addIngredientsToShoppingList(ingredients: Ingredient[]) { // this.sLService.addIngredients(ingredients); this.store.dispatch(new ShoppingListActions.AddIngredients(ingredients)); } Preparing Update & Delete Actions Add constants, classes, and add to union // src/app/shopping-list/store/shopping-list.actions.ts export const UPDATE_INGREDIENT = 'UPDATE_INGREDIENT'; export const DELETE_INGREDIENT = 'DELETE_INGREDIENT'; export class UpdateIngredient implements Action { readonly type = UPDATE_INGREDIENT; constructor(public payload: { index: number; ingredient: Ingredient }) {} } export class DeleteIngredient implements Action { readonly type = DELETE_INGREDIENT; constructor(public payload: number) {} } export type ShoppingListActions = | AddIngredient | AddIngredients | UpdateIngredient | DeleteIngredient; Updating & Deleting Ingredients Updating Ingredient Must create new state, object Create a copy // src/app/shopping-list/store/shopping-list.reducer.ts case ShoppingListActions.UPDATE_INGREDIENT: const ingredient = state.ingredients[action.payload.index]; const updatedIngredient = { ...ingredient, ...action.payload.ingredient }; const updatedIngredients = [...state.ingredients]; updatedIngredients[action.payload.index] = updatedIngredient; return { ...state, ingredients: [updatedIngredients] }; Delete Ingredient Using filter // src/app/shopping-list/store/shopping-list.reducer.ts case ShoppingListActions.DELETE_INGREDIENT: return { ...state, ingredients: state.ingredients.filter((ig, igIndex) => { return igIndex !== action.payload; }) }; Expanding the State Shopping Edit ngOnInit manages ingredients and whether we're editting or not from service Translate to ngRx Dispatch action for start editing, in shopping list on edit item Now we need more than just the ingredients in state Also want to store edited ingredient and index Change structure of state: // src/app/shopping-list/store/shopping-list.reducer.ts const initialState = { ingredients: [new Ingredient('Apples', 5), new Ingredient('Tomatoes', 10)], editedIngredient: null, editedIngredientIndex: -1 }; Now must change definition of return type Use simpler pattern // src/app/shopping-list/store/shopping-list.reducer.ts export interface State { ingredients: Ingredient[]; editedIngredient: Ingredient; editedIngredientIndex: number; } export interface AppState { shoppingList: State; } Managing More State via NgRx Need action for starting and cancelling edit process // src/app/shopping-list/store/shopping-list.actions.ts export const START_EDIT = 'START_EDIT'; export const STOP_EDIT = 'STOP_EDIT'; // ... export class StartEdit implements Action { readonly type = START_EDIT; constructor(public payload: number) {} } export class StopEdit implements Action { readonly type = STOP_EDIT; } Create cases in Reducer: // src/app/shopping-list/store/shopping-list.reducer.ts case ShoppingListActions.START_EDIT: return { ...state, editedIngredientIndex: action.payload, editedIngredient: { ...state.ingredients[action.payload] } }; case ShoppingListActions.STOP_EDIT: return { ...state, editedIngredient: null, editedIngredientIndex: -1 }; Now must dispatch the actions appropriately. // src/app/shopping-list/shopping-list.component.ts onEditItem(index: number) { // this.slService.startedEditing.next(index); this.store.dispatch(new ShoppingListActions.StartEdit(index)); } // src/app/shopping-list/shopping-edit/shopping-edit.component.ts constructor( private slService: ShoppingListService, private store: Store<fromShoppingList.AppState> ) {} ngOnInit() { this.subscription = this.store.select('shoppingList').subscribe(stateData => { if (stateData.editedIngredientIndex > -1) { this.editMode = true; this.editedItem = stateData.editedIngredient; this.slForm.setValue({ name: this.editedItem.name, amount: this.editedItem.amount }); } else { this.editMode = false; } }); } Removing Redundant Component State Management We have index in our state, so instead of passing that as data, remove Final shopping list actions: // src/app/shopping-list/store/shopping-list.actions.ts import { Action } from '@ngrx/store'; import { Ingredient } from 'src/app/shared/ingredient.model'; export const ADD_INGREDIENT = 'ADD_INGREDIENT'; export const ADD_INGREDIENTS = 'ADD_INGREDIENTS'; export const UPDATE_INGREDIENT = 'UPDATE_INGREDIENT'; export const DELETE_INGREDIENT = 'DELETE_INGREDIENT'; export const START_EDIT = 'START_EDIT'; export const STOP_EDIT = 'STOP_EDIT'; export class AddIngredient implements Action { readonly type = ADD_INGREDIENT; // payload: Ingredient; // \"payload\" not a required name, can use any. only \"type\" property is required. constructor(public payload: Ingredient) {} } export class AddIngredients implements Action { readonly type = ADD_INGREDIENTS; constructor(public payload: Ingredient[]) {} } export class UpdateIngredient implements Action { readonly type = UPDATE_INGREDIENT; constructor(public payload: Ingredient) {} } export class DeleteIngredient implements Action { readonly type = DELETE_INGREDIENT; } export class StartEdit implements Action { readonly type = START_EDIT; constructor(public payload: number) {} } export class StopEdit implements Action { readonly type = STOP_EDIT; } export type ShoppingListActions = | AddIngredient | AddIngredients | UpdateIngredient | DeleteIngredient | StartEdit | StopEdit; First Summary & Clean Up Added NgRx to Application by including the StoreModule and calling forRoot forRoot then needs a map (basically an object) that tells NgRx which reducers we have in our application. All these reducers and the state they generate make up the NgRx Store. Reducer is just a function NgRx will automatically pass in the current state and an action it received, so it will execute the function whenever a new action is received. In reducer, switch case statement where we check action we got and depending on type we return new state. Data in, data out. All synchronous Return new object, new state Return state is what NgRx will in the end register for the shopping list slice of the overall AppState of the App Store it manages here Also added actions file where we defined unique identifiers, and then each is a complete object based on classes we defined. Each action needs to have a type property, where we do store string identifier for the action Might also have a payload, a property which can be set to attach data to that action. Needed for adding an ingredient Wasn't needed for deleting an ingredient Fair amount of overhead work involved Using service with subjects is more than fine alternative to using NgRx Although fairly easy to grow the state, once setup. Can get rid of shopping list service, delete file, remove imports & injections One Root State Implement NgRx in Auth section Create src/app/auth/store/auth.reducer.ts Only state we use in other parts of app is User object, so it must be part of initial state // src/app/auth/store/auth.reducer.ts import { User } from '../user.model'; export interface State { user: User; } const initialState: State = { user: null }; export function authReducer(state = initialState, action) { return state; } Also initialize global store: StoreModule.forRoot({shoppingList: shoppingListReducer, auth: authReducer }), Move AppState out of shopping list reducer, since it's more general. Into global store folder: // src/app/store/app.reducer.ts import { ActionReducerMap } from '@ngrx/store'; import * as fromShoppingList from '../shopping-list/store/shopping-list.reducer'; import * as fromAuth from '../auth/store/auth.reducer'; export interface AppState { shoppingList: fromShoppingList.State; auth: fromAuth.State; } export const appReducer: ActionReducerMap<AppState> = { shoppingList: fromShoppingList.shoppingListReducer, auth: fromAuth.authReducer }; Now App module can simply point to the general App Reducer: // src/app/app.module.ts import * as fromApp from './store/app.reducer'; // ... @NgModule({ // ... imports: [ // ... StoreModule.forRoot(fromApp.appReducer), // ... ] // ... }) Change imports, etc in Recipe Service, Shopping List & Shopping Edit components Setting up Auth Reducer & Actions Dispatch actions in handle auth and logout, when creating new user object, wherever user next is called Create actions for Auth // src/app/auth/store/auth.actions.ts import { Action } from '@ngrx/store'; export const LOGIN = 'LOGIN'; export const LOGOUT = 'LOGOUT'; export class Login implements Action { readonly type = LOGIN; constructor( public payload: { email: string; userId: string; token: string; expirationDate: Date; } ) {} } export class Logout implements Action { readonly type = LOGOUT; } export type AuthActions = Login | Logout; Now modify auth reducer: // src/app/auth/store/auth.reducer.ts import { User } from '../user.model'; import * as AuthActions from './auth.actions'; export interface State { user: User; } const initialState: State = { user: null }; export function authReducer( state = initialState, action: AuthActions.AuthActions ) { switch (action.type) { case AuthActions.LOGIN: const user = new User( action.payload.email, action.payload.userId, action.payload.token, action.payload.expirationDate ); return { ...state, user }; case AuthActions.LOGOUT: return { ...state, user: null }; default: return state; } } Now, to dispatch the actions Dispatching Auth Actions // src/app/auth/auth.service.ts // in autoLogin: // this.user.next(loadedUser); this.store.dispatch( new AuthActions.Login({ email: loadedUser.email, userId: loadedUser.id, token: loadedUser.token, expirationDate: new Date(userData._tokenExpirationDate) }) ); // in logout: // this.user.next(null); this.store.dispatch(new AuthActions.Logout()); // in handleAuthentication: // this.user.next(user); this.store.dispatch(new AuthActions.Login({email, userId, token, expirationDate})); Now to make sure we use the auth state Auth Finished (for now...) Trick to find where subject is used, comment out in service Address auth interceptor // src/app/auth/auth-interceptor.service.ts return this.store.select('auth').pipe( take(1), map(authState => { return authState.user; }), exhaustMap(user => { // ... Address in auth guard and header component // src/app/auth/auth.guard.ts return this.store.select('auth').pipe( take(1), map(authState => { return authState.user; }), map(user => { // ... // src/app/header/header.component.ts ngOnInit() { this.userSub = this.store .select('auth') .pipe(map(authState => authState.user)) .subscribe(user => { this.isAuthenticated = !!user; }); } An Important Note on Actions Initial action reaches all reducers. Any action you dispatch always reaches all reducers Always copy old state Always return state in default case Since action still reaches reducer Careful with identifiers that interfere, since actions reach all reducers. Prefixing 'ADD_INGREDIENT' -> '[Shopping List] Add Ingredient' Exploring NgRx Side Effects Side effects Parts in code where we run some logic that's not immediately important for updating current state Ex with Http Request Start signup process Signup success Signup error Local storage as a side effect Another NgRx package for dealing with side effects npm i --save @ngrx/effects Defining the First Effect Observable for each dispatched action In AuthEffects, don't change state, but can execute any other code, then dispatch another action. Stream of dispatched actions Add effect as normal property Call pipe, not subscribe // src/app/auth/store/auth.effects.ts import { Actions, ofType } from '@ngrx/effects'; import * as AuthActions from './auth.actions'; export class AuthEffects { authLogin = this.actions$.pipe( ofType(AuthActions.LOGIN_START) ); constructor(private actions$: Actions) {} } Effects & Error-Handling Implement new action in auth actions: // src/app/auth/store/auth.actions.ts // ... export class LoginStart implements Action { readonly type = LOGIN_START; constructor(public payload: { email: string, password: string }) {} } Copy HTTP request and AuthResponseData interface into Auth effects Effect by default should return new action Errors handled on a different level // src/app/auth/store/auth.effects.ts import { Actions, ofType, Effect } from '@ngrx/effects'; import { switchMap, catchError, map } from 'rxjs/operators'; import { HttpClient } from '@angular/common/http'; import { environment } from '../../../environments/environment'; import { of } from 'rxjs'; import * as AuthActions from './auth.actions'; export interface AuthResponseData { kind: string; idToken: string; email: string; refreshToken: string; expiresIn: string; localId: string; registered?: boolean; } export class AuthEffects { @Effect() authLogin = this.actions$.pipe( ofType(AuthActions.LOGIN_START), switchMap((authData: AuthActions.LoginStart) => { return this.http .post<AuthResponseData>( 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + environment.firebaseAPIKey, { email: authData.payload.email, password: authData.payload.password, returnSecureToken: true } ).pipe(catchError(error => { // ... of(); }), map(resData => { of(); }) ); }), ); constructor(private actions$: Actions, private http: HttpClient) {} } Login via NgRx Effects Need to return or add an object, and NgRx will automatically dispatch action Also must add to App Module import { EffectsModule } from '@ngrx/effects'; EffectsModule.forRoot([AuthEffects]), Add in auth component Old // authObs = this.authService.login(email, password); New this.store.dispatch(new AuthActions.LoginStart({email, password})); Managing UI State in NgRx Need to manage more of our authentication related state Implement a Login Fail action // src/app/auth/store/auth.actions.ts export const LOGIN_FAIL = '[Auth] Login Fail'; // ... export class LoginFail implements Action { readonly type = LOGIN_FAIL; constructor(public payload: string) {} } Modify and add error property to reducer states // src/app/auth/store/auth.reducer.ts export interface State { user: User; authError: string; loading: boolean; } const initialState: State = { user: null, authError: null, loading: false; }; export function authReducer( state = initialState, action: AuthActions.AuthActions ) { switch (action.type) { case AuthActions.LOGIN: const user = new User( action.payload.email, action.payload.userId, action.payload.token, action.payload.expirationDate ); return { ...state, authError: null, user, loading: false }; case AuthActions.LOGOUT: return { ...state, user: null }; case AuthActions.LOGIN_START: return { ...state, authError: null, loading: true }; case AuthActions.LOGIN_FAIL: return { ...state, user: null, authError: action.payload, loading: false }; default: return state; } } In auth component Comment out auth observer subscribe ngOnInit() { this.store.select('auth').subscribe(authState => { this.isLoading = authState.loading; this.error = authState.authError; }); } Finishing the Login Effect Adding Auth Success Effect // src/app/auth/store/auth.effects.ts // fix map in authLogin map(resData => { const expirationDate = new Date( new Date().getTime() + +resData.expiresIn * 1000 ); return new AuthActions.Login({ email: resData.email, userId: resData.localId, token: resData.idToken, expirationDate } ); }), // ... @Effect({dispatch: false}) // ^ let angular know this effect will not yield dispatchable action authSuccess = this.actions$.pipe( ofType(AuthActions.LOGIN), tap(() => { this.router.navigate(['/']); }) ); Handle error on login First add show alert dynamic component function to NgOnInit in auth component: if (this.error) { this.showErrorAlert(this.error); } Then modify catchError in auth effect: catchError(errorRes => { let errorMessage = 'An unknown error occurred!'; if (!errorRes.error || !errorRes.error.error) { // return throwError(errorMessage); return of(new AuthActions.LoginFail(errorMessage)); } switch (errorRes.error.error.message) { case 'EMAIL_EXISTS': errorMessage = 'This email exists already.'; break; case 'EMAIL_NOT_FOUND': errorMessage = 'This email does not exist'; break; case 'INVALID_PASSWORD': errorMessage = 'This password is not correct'; break; } return of(new AuthActions.LoginFail(errorMessage)); }) Preparing Other Auth Actions Add effect for signing up Also changed Login/LoginFail to Authenticate/AuthenticateFail Signup start implementation // src/app/auth/store/auth.actions.ts export class SignupStart implements Action { readonly type = SIGNUP_START; constructor(public payload: { email: string; password: string }) {} } export type AuthActions = | AuthenticateSuccess | Logout | LoginStart | AuthenticateFail | SignupStart; // src/app/auth/store/auth.effects.ts @Effect() authSignup = this.actions$.pipe( ofType(AuthActions.SIGNUP_START) ); Adding Signup // src/app/auth/store/auth.effects.ts const handleAuthentication = ( expiresIn: number, email: string, userId: string, token: string ) => { const expirationDate = new Date(new Date().getTime() + expiresIn * 1000); return new AuthActions.AuthenticateSuccess({ email, userId, token, expirationDate }); }; const handleError = (errorRes: any) => { let errorMessage = 'An unknown error occurred!'; if (!errorRes.error || !errorRes.error.error) { // return throwError(errorMessage); return of(new AuthActions.AuthenticateFail(errorMessage)); } switch (errorRes.error.error.message) { case 'EMAIL_EXISTS': errorMessage = 'This email exists already.'; break; case 'EMAIL_NOT_FOUND': errorMessage = 'This email does not exist'; break; case 'INVALID_PASSWORD': errorMessage = 'This password is not correct'; break; } return of(new AuthActions.AuthenticateFail(errorMessage)); }; @Injectable() export class AuthEffects { @Effect() authSignup = this.actions$.pipe( ofType(AuthActions.SIGNUP_START), switchMap((signupAction: AuthActions.SignupStart) => { return this.http .post<AuthResponseData>( 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + environment.firebaseAPIKey, { email: signupAction.payload.email, password: signupAction.payload.password, returnSecureToken: true } ) .pipe( map(resData => { return handleAuthentication( +resData.expiresIn, resData.email, resData.localId, resData.idToken ); }), catchError(errorRes => { return handleError(errorRes); }) ); }) ); // ... } Further Auth Effects Changing auth component to sync with NgRx states // src/app/auth/auth.component.ts onHandleError() { this.store.dispatch(new AuthActions.ClearError()); } ngOnDestroy() { if (this.closeSub) { this.closeSub.unsubscribe(); } if (this.storeSub){ this.storeSub.unsubscribe(); } } Adding Auto-Login with NgRx Essentially moving logic out of service and into effects/actions @Effect() autoLogin = this.actions$.pipe( ofType(AuthActions.AUTO_LOGIN), map(() => { const userData: { email: string; id: string; _token: string; _tokenExpirationDate: string; } = JSON.parse(localStorage.getItem('userData')); if (!userData) { return { type: 'DUMMY' }; } const loadedUser = new User( userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate) ); if (loadedUser.token) { // this.user.next(loadedUser); return new AuthActions.AuthenticateSuccess({ email: loadedUser.email, userId: loadedUser.id, token: loadedUser.token, expirationDate: new Date(userData._tokenExpirationDate) }); } return { type: 'DUMMY' }; // const expirationDuration = // new Date(userData._tokenExpirationDate).getTime() - // new Date().getTime(); // this.autoLogout(expirationDuration); }) ); Adding Auto-Logout (NgRx) AuthService set & clear logout timer: // src/app/auth/auth.service.ts setLogoutTimer(expirationDuration: number) { console.log(expirationDuration); this.tokenExpirationTimer = setTimeout(() => { this.store.dispatch(new AuthActions.Logout()); }, expirationDuration); } clearLogoutTimer() { if (this.tokenExpirationTimer) { clearTimeout(this.tokenExpirationTimer); this.tokenExpirationTimer = null; } } Finishing Auth Effects Full Auth Service: // src/app/auth/auth.service.ts import { Injectable } from '@angular/core'; import { Store } from '@ngrx/store'; import * as fromApp from '../store/app.reducer'; import * as AuthActions from '../auth/store/auth.actions'; @Injectable({ providedIn: 'root' }) export class AuthService { private tokenExpirationTimer: any; constructor( private store: Store<fromApp.AppState> ) {} setLogoutTimer(expirationDuration: number) { console.log(expirationDuration); this.tokenExpirationTimer = setTimeout(() => { this.store.dispatch(new AuthActions.Logout()); }, expirationDuration); } clearLogoutTimer() { if (this.tokenExpirationTimer) { clearTimeout(this.tokenExpirationTimer); this.tokenExpirationTimer = null; } } } Full Auth Actions: // src/app/auth/store/auth.actions.ts import { Action } from '@ngrx/store'; export const LOGIN_START = '[Auth] Login Start'; export const AUTHENTICATE_SUCCESS = '[Auth] Login'; export const AUTHENTICATE_FAIL = '[Auth] Login Fail'; export const SIGNUP_START = '[Auth] Signup Start'; export const CLEAR_ERROR = '[Auth] Clear Error'; export const AUTO_LOGIN = '[Auth] Auto Login'; export const LOGOUT = '[Auth] Logout'; export class AuthenticateSuccess implements Action { readonly type = AUTHENTICATE_SUCCESS; constructor( public payload: { email: string; userId: string; token: string; expirationDate: Date; } ) {} } export class Logout implements Action { readonly type = LOGOUT; } export class LoginStart implements Action { readonly type = LOGIN_START; constructor(public payload: { email: string; password: string }) {} } export class AuthenticateFail implements Action { readonly type = AUTHENTICATE_FAIL; constructor(public payload: string) {} } export class SignupStart implements Action { readonly type = SIGNUP_START; constructor(public payload: { email: string; password: string }) {} } export class ClearError implements Action { readonly type = CLEAR_ERROR; } export class AutoLogin implements Action { readonly type = AUTO_LOGIN; } export type AuthActions = | AuthenticateSuccess | Logout | LoginStart | AuthenticateFail | SignupStart | ClearError | AutoLogin; Full Auth Effects: // src/app/auth/store/auth.effects.ts import { Injectable } from '@angular/core'; import { Actions, ofType, Effect } from '@ngrx/effects'; import { switchMap, catchError, map, tap } from 'rxjs/operators'; import { HttpClient } from '@angular/common/http'; import { environment } from '../../../environments/environment'; import { of } from 'rxjs'; import { Router } from '@angular/router'; import * as AuthActions from './auth.actions'; import { User } from '../user.model'; import { AuthService } from '../auth.service'; export interface AuthResponseData { kind: string; idToken: string; email: string; refreshToken: string; expiresIn: string; localId: string; registered?: boolean; } const handleAuthentication = ( expiresIn: number, email: string, userId: string, token: string ) => { const expirationDate = new Date(new Date().getTime() + expiresIn * 1000); const user = new User(email, userId, token, expirationDate); localStorage.setItem('userData', JSON.stringify(user)); return new AuthActions.AuthenticateSuccess({ email, userId, token, expirationDate }); }; const handleError = (errorRes: any) => { let errorMessage = 'An unknown error occurred!'; if (!errorRes.error || !errorRes.error.error) { // return throwError(errorMessage); return of(new AuthActions.AuthenticateFail(errorMessage)); } switch (errorRes.error.error.message) { case 'EMAIL_EXISTS': errorMessage = 'This email exists already.'; break; case 'EMAIL_NOT_FOUND': errorMessage = 'This email does not exist'; break; case 'INVALID_PASSWORD': errorMessage = 'This password is not correct'; break; } return of(new AuthActions.AuthenticateFail(errorMessage)); }; @Injectable() export class AuthEffects { @Effect() authSignup = this.actions$.pipe( ofType(AuthActions.SIGNUP_START), switchMap((signupAction: AuthActions.SignupStart) => { return this.http .post<AuthResponseData>( 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + environment.firebaseAPIKey, { email: signupAction.payload.email, password: signupAction.payload.password, returnSecureToken: true } ) .pipe( tap(resData => { this.authService.setLogoutTimer(+resData.expiresIn * 1000); }), map(resData => { return handleAuthentication( +resData.expiresIn, resData.email, resData.localId, resData.idToken ); }), catchError(errorRes => { return handleError(errorRes); }) ); }) ); @Effect() authLogin = this.actions$.pipe( ofType(AuthActions.LOGIN_START), switchMap((authData: AuthActions.LoginStart) => { return this.http .post<AuthResponseData>( 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + environment.firebaseAPIKey, { email: authData.payload.email, password: authData.payload.password, returnSecureToken: true } ) .pipe( tap(resData => { this.authService.setLogoutTimer(+resData.expiresIn * 1000); }), map(resData => { return handleAuthentication( +resData.expiresIn, resData.email, resData.localId, resData.idToken ); }), catchError(errorRes => { return handleError(errorRes); }) ); }) ); @Effect({ dispatch: false }) // ^ let angular know this effect will not yield dispatchable action authRedirect = this.actions$.pipe( ofType(AuthActions.AUTHENTICATE_SUCCESS), tap(() => { this.router.navigate(['/']); }) ); @Effect() autoLogin = this.actions$.pipe( ofType(AuthActions.AUTO_LOGIN), map(() => { const userData: { email: string; id: string; _token: string; _tokenExpirationDate: string; } = JSON.parse(localStorage.getItem('userData')); if (!userData) { return { type: 'DUMMY' }; } const loadedUser = new User( userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate) ); if (loadedUser.token) { // this.user.next(loadedUser); const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime(); this.authService.setLogoutTimer(expirationDuration); return new AuthActions.AuthenticateSuccess({ email: loadedUser.email, userId: loadedUser.id, token: loadedUser.token, expirationDate: new Date(userData._tokenExpirationDate) }); } return { type: 'DUMMY' }; // const expirationDuration = // new Date(userData._tokenExpirationDate).getTime() - // new Date().getTime(); // this.autoLogout(expirationDuration); }) ); @Effect({ dispatch: false }) authLogout = this.actions$.pipe( ofType(AuthActions.LOGOUT), tap(() => { this.authService.clearLogoutTimer(); localStorage.removeItem('userData'); this.router.navigate(['/auth']); }) ); constructor( private actions$: Actions, private http: HttpClient, private router: Router, private authService: AuthService ) {} } Full Auth Reducer: // src/app/auth/store/auth.reducer.ts import { User } from '../user.model'; import * as AuthActions from './auth.actions'; export interface State { user: User; authError: string; loading: boolean; } const initialState: State = { user: null, authError: null, loading: false }; export function authReducer( state = initialState, action: AuthActions.AuthActions ) { switch (action.type) { case AuthActions.AUTHENTICATE_SUCCESS: const user = new User( action.payload.email, action.payload.userId, action.payload.token, action.payload.expirationDate ); return { ...state, authError: null, user, loading: false }; case AuthActions.LOGOUT: return { ...state, user: null }; case AuthActions.LOGIN_START: case AuthActions.SIGNUP_START: return { ...state, authError: null, loading: true }; case AuthActions.AUTHENTICATE_FAIL: return { ...state, user: null, authError: action.payload, loading: false }; case AuthActions.CLEAR_ERROR: return { ...state, authError: null } default: return state; } } Using the Store Devtools Redux Devtools for Chrome Chrome Web Store NgRx Devtools npm i --save-dev @ngrx/store-devtools Import into App Module import { StoreDevtoolsModule } from '@ngrx/store-devtools'; // ... StoreDevtoolsModule.instrument({ logOnly: environment.production }), The Router Store npm i --save @ngrx/router-store import { StoreRouterConnectingModule } from '@ngrx/router-store'; // ... StoreRouterConnectingModule.forRoot(), Getting Started with NgRx for Recipes src/app/recipes/store/ Create files recipe.reducer.ts recipe.actions.ts recipe.effects.ts Add to App Reducer Initial Recipe Reducer import { Recipe } from '../recipe.model'; import * as RecipeActions from './recipe.actions'; export interface State { recipes: Recipe[]; } const initialState: State = { recipes: [] }; export function recipeReducer( state = initialState, action: RecipeActions.RecipesActions ) { switch (action.type) { case RecipeActions.SET_RECIPES: return { ...state, recipes: [...action.payload] }; default: return state; } } Initial Recipe Actions import { Action } from '@ngrx/store'; import { Recipe } from '../recipe.model'; export const SET_RECIPES = '[Recipes] Set Recipes'; export class SetRecipes implements Action { readonly type = SET_RECIPES; constructor(public payload: Recipe[]) {} } export type RecipesActions = SetRecipes; Change in recipe-list component & data-storage service // src/app/recipes/recipe-list/recipe-list.component.ts ngOnInit() { this.subscription = this.store .select('recipes') .pipe(map(recipesState => recipesState.recipes)) .subscribe((recipes: Recipe[]) => { this.recipes = recipes; }); } // src/app/shared/data-storage.service.ts fetchRecipes() { // ... tap(recipes => { // this.recipeService.setRecipes(recipes); this.store.dispatch(new RecipesActions.SetRecipes(recipes)); }) ); } Fetching Recipe Detail Data Recipe detail/edit still using Recipes service Will need to modify recipe-edit & recipe-detail to use NgRx Store instead of Recipes Service In Recipe-Detail: // src/app/recipes/recipe-detail/recipe-detail.component.ts ngOnInit() { this.route.params .pipe( map(params => { return +params['id']; }), switchMap(id => { this.id = id; return this.store.select('recipes'); }), map(recipesState => { return recipesState.recipes.find((recipe, index) => { return index === this.id; }); }) ) .subscribe(recipe => { this.recipe = recipe; }); } In Recipe-Edit: // src/app/recipes/recipe-detail/recipe-detail.component.ts // in initForm(): // const recipe = this.recipeService.getRecipe(this.id); this.store .select('recipes') .pipe( map(recipeState => { return recipeState.recipes.find((recipe, index) => { return index === this.id; }); }) ) .subscribe(recipe => { recipeName = recipe.name; recipeImagePath = recipe.imagePath; recipeDescription = recipe.description; if (recipe['ingredients']) { for (let ingredient of recipe.ingredients) { recipeIngredients.push( new FormGroup({ name: new FormControl(ingredient.name, Validators.required), amount: new FormControl(ingredient.amount, [ Validators.required, Validators.pattern(/^[1-9]+[0-9]*$/) ]) }) ); } } }); Fetching Recipes Using the Resolver Manage getting data through effects, notably in recipes-resolver and header component Initial Recipe Effects: // src/app/recipes/store/recipe.effects.ts import { Actions, Effect, ofType } from '@ngrx/effects'; import { HttpClient } from '@angular/common/http'; import { switchMap, map } from 'rxjs/operators'; import * as RecipesActions from './recipe.actions'; import { Recipe } from '../recipe.model'; import { Injectable } from '@angular/core'; @Injectable() export class RecipeEffects { @Effect() fetchRecipes = this.actions$.pipe( ofType(RecipesActions.FETCH_RECIPES), switchMap(fetchAction => { return this.http.get<Recipe[]>( 'https://ng-learn-practice.firebaseio.com/recipes.json' ); }), map(recipes => { return recipes.map(recipe => { return { ...recipe, ingredients: recipe.ingredients ? recipe.ingredients : [] }; }); }), map(recipes => { return new RecipesActions.SetRecipes(recipes); }), ); constructor(private actions$: Actions, private http: HttpClient) {} } Import recipe effects: // src/app/app.module.ts import { RecipeEffects } from './recipes/store/recipe.effects'; // ... @NgModule({ // ... imports: [ // ... EffectsModule.forRoot([AuthEffects, RecipeEffects]), // ... ], // ... }) Implement Recipe Action for Fetching Recipes: // src/app/recipes/store/recipe.actions.ts export const FETCH_RECIPES = '[Recipes] Fetch Recipes'; // ... export class FetchRecipes implements Action { readonly type = FETCH_RECIPES; } Dispatch fetch recipes in data-storage service, or where it's called, which is in header // src/app/header/header.component.ts onFetchData() { // this.dataStorageService.fetchRecipes().subscribe(); this.store.dispatch(new RecipesActions.FetchRecipes()); } Modify Resolver: import { Injectable } from '@angular/core'; import { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router'; import { Store } from '@ngrx/store'; import { Actions, ofType } from '@ngrx/effects'; import { take } from 'rxjs/operators'; import { Recipe } from './recipe.model'; import * as fromApp from '../store/app.reducer'; import * as RecipesActions from '../recipes/store/recipe.actions'; @Injectable({ providedIn: 'root' }) export class RecipesResolverService implements Resolve<Recipe[]> { constructor( private store: Store<fromApp.AppState>, private actions$: Actions ) {} resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) { this.store.dispatch(new RecipesActions.FetchRecipes()); return this.actions$.pipe( ofType(RecipesActions.SET_RECIPES), take(1) ); } } On recipe selected and reload page, sent back to /recipes. Will fix this issue next. Fixing the Auth Redirect Actually related to Auth Effects and redirect there Add redirect boolean property to Auth Success action // src/app/auth/store/auth.actions.ts export class AuthenticateSuccess implements Action { readonly type = AUTHENTICATE_SUCCESS; constructor( public payload: { email: string; userId: string; token: string; expirationDate: Date; redirect: boolean; } ) {} } Give true value on handleAuthentication effect, false on autologin If condition in authRedirect: @Effect({ dispatch: false }) // ^ let angular know this effect will not yield dispatchable action authRedirect = this.actions$.pipe( ofType(AuthActions.AUTHENTICATE_SUCCESS), tap((authSuccessAction: AuthActions.AuthenticateSuccess) => { if (authSuccessAction.payload.redirect) { this.router.navigate(['/']); } }) ); Update, Delete, and Add Recipes Modify recipe resolver resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) { return this.store.select('recipes').pipe( take(1), map(recipesState => { return recipesState.recipes; }), switchMap(recipes => { if (recipes.length === 0) { this.store.dispatch(new RecipesActions.FetchRecipes()); return this.actions$.pipe( ofType(RecipesActions.SET_RECIPES), take(1) ); } else { return of(recipes); } }) ); } Add actions and cases for each to reducer: // src/app/recipes/store/recipe.actions.ts export const ADD_RECIPE = '[Recipe] Add Recipe'; export const UPDATE_RECIPE = '[Recipe] Update Recipe'; export const DELETE_RECIPE = '[Recipe] Delete Recipe'; // ... export class AddRecipe implements Action { readonly type = ADD_RECIPE; constructor(public payload: Recipe) {} } export class UpdateRecipe implements Action { readonly type = UPDATE_RECIPE; constructor(public payload: { index: number; newRecipe: Recipe }) {} } export class DeleteRecipe implements Action { readonly type = DELETE_RECIPE; constructor(public payload: number) {} } export type RecipesActions = | SetRecipes | FetchRecipes | AddRecipe | UpdateRecipe | DeleteRecipe; // src/app/recipes/store/recipe.reducer.ts case RecipeActions.ADD_RECIPE: return { ...state, recipes: [...state.recipes, action.payload] }; case RecipeActions.UPDATE_RECIPE: const updatedRecipe = { ...state.recipes[action.payload.index], ...action.payload.newRecipe }; const updatedRecipes = [...state.recipes]; updatedRecipes[action.payload.index] = updatedRecipe; return { ...state, recipes: updatedRecipes }; case RecipeActions.DELETE_RECIPE: return { ...state, recipes: state.recipes.filter((recipe, index) => { return index !== action.payload; }) }; Need to modify where actions occur. For delete, in recipe-detail component: // src/app/recipes/recipe-detail/recipe-detail.component.ts onDeleteRecipe() { // this.recipeService.deleteRecipe(this.id); this.store.dispatch(new RecipesActions.DeleteRecipe(this.id)); this.router.navigate(['/recipes']); } And modify recipe-edit for update and add // src/app/recipes/recipe-edit/recipe-edit.component.ts // ... onSubmit() { if (this.editMode) { // this.recipeService.updateRecipe(this.id, this.recipeForm.value); this.store.dispatch( new RecipesActions.UpdateRecipe({ index: this.id, newRecipe: this.recipeForm.value }) ); } else { // this.recipeService.addRecipe(this.recipeForm.value); this.store.dispatch(new RecipesActions.AddRecipe(this.recipeForm.value)); } this.onCancel(); } // ... // must also implement unsubscribe, or get error on delete after cancelling edit: ngOnDestroy() { if (this.storeSub){ this.storeSub.unsubscribe(); } } Storing Recipes via Effects Implement the Action // src/app/recipes/store/recipe.actions.ts export const STORE_RECIPES = '[Recipe] Store Recipes'; // ... export class StoreRecipes implements Action { readonly type = STORE_RECIPES; } Add the effect // src/app/recipes/store/recipe.effects.ts @Effect() storeRecipes = this.actions$.pipe( ofType(RecipesActions.STORE_RECIPES), withLatestFrom(this.store.select('recipes')), switchMap(([actionData, recipesState]) => { return this.http.put( 'https://ng-learn-practice.firebaseio.com/recipes.json', recipesState.recipes ); }) ); Modify header component // src/app/header/header.component.ts onSaveData() { // this.dataStorageService.storeRecipes(); this.store.dispatch(new RecipesActions.StoreRecipes()); } Cleanup Work Can delete recipe service file Fix recipe edit and recipe detail, remove extra non-used or nonexistant imports Wrap Up Thorough look at NgRx Services and subjects are fine on their own State management may be worth the work to setup on a project that is much larger in scale. Streamlined approach NgRx Documentation","title":"Angular"},{"location":"ng/#angular-notes","text":"Based on Udemy Course Angular 8 The Complete Guide by Maximilian Schwarzm\u00fcller","title":"Angular Notes"},{"location":"ng/#introduction","text":"","title":"Introduction"},{"location":"ng/#what-is-angular","text":"","title":"What is Angular"},{"location":"ng/#reactive-single-page-applications","text":"","title":"Reactive Single-Page Applications"},{"location":"ng/#angular-versioning","text":"AngularJS (Angular 1) -old Angular (Angular 2) -rewrite of Angular 1 ... Angular 8 Big release every 6 months","title":"Angular Versioning"},{"location":"ng/#cli","text":"ng new my-first-app","title":"CLI"},{"location":"ng/#data-binding","text":"{{ title }}","title":"Data-binding"},{"location":"ng/#selectors","text":"<app-root>","title":"Selectors"},{"location":"ng/#ngmodel","text":"Importing forms module","title":"ngModel"},{"location":"ng/#typescript","text":"More features than vanilla JS Strongly typed Compiled to JS Handled by CLI","title":"Typescript"},{"location":"ng/#bootstrap-styling","text":"npm install bootstrap angular.json","title":"Bootstrap Styling"},{"location":"ng/#the-basics","text":"app-root Root component main.ts First code executed Passes AppModule to method app.module.ts Bootstrap array main.ts > bootstrap angular application > pass module as arg > selector > html template > html","title":"The Basics"},{"location":"ng/#components","text":"Whole application is composed of different components, starting with app component / root component","title":"Components"},{"location":"ng/#create-a-new-component","text":"Selectors for other components added - app.component.html Folder for component in app folder Same name as component for good practice Example // server/server.component.ts @Component({ // decorators - all start with @ selector: 'app-server', templateUrl: './server.component.html' }) export class ServerComponent {}","title":"Create a new Component"},{"location":"ng/#appmodule","text":"Components used to build webpages, bundled by modules into packages. Has NgModule decorator Need to declare component here, declarations array Imports array for other modules Can create components with CLI ng generate component servers OR ng g c servers Can nest components, a nd/or use multiple times","title":"AppModule"},{"location":"ng/#component-templates","text":"Must be template property at all times Can use templateUrl, or insert HTML: template: '<app-server><app-server>","title":"Component templates"},{"location":"ng/#component-styles","text":"Can wrap bootstrap classes if used Can also add to component CSS file Reference multiple stylesheets in styleUrls array","title":"Component Styles"},{"location":"ng/#component-selector","text":"Must be unique Can use HTML attribute or tags, class, etc Selecting by id not supported","title":"Component Selector"},{"location":"ng/#databinding","text":"Communication TS Code --> HTML (template) Output data String interpolation Surround in double curly brace {{ data }} Any expression that can resolve to a string Or easily converted Property binding Surround in brackets [property]=\"data\" Directly binding to native html property Can update dynamically: [disabled]=\"!allowNewServer\" Can also bind to directives or components, other properties React to User Events Event-binding Surround in parentheses (event)=\"expression\" (click)=\"onCreateServer() On input event (input)=\"onUpdateServerName($event)\" In Method this.serverName = (<HTMLInputElement>event.target).value Combination Two-way binding Brackets & Parentheses [(ngModel)]=\"data\" [(ngModel)]=\"serverName\"","title":"Databinding"},{"location":"ng/#directives","text":"Instructions in the DOM <p appTurnGreen> @Directive Attribute Selector","title":"Directives"},{"location":"ng/#ngif","text":"<p *ngIf=\"serverCreated\"> built in ' * ' -> structural directive (changes DOM) Attribute directors don't add or remove elements, changes element it's placed on","title":"ngIf"},{"location":"ng/#ngstyle","text":"<p [ngStyle]=\"{backgroundColor: getColor()}\"> binding to property of directive","title":"ngStyle"},{"location":"ng/#ngclass","text":"[ngClass]=\"{online: serverStatus ==='online'}\" adds CSS class if condition is true","title":"ngClass"},{"location":"ng/#ngfor","text":"<app-server *ngFor=\"let server of servers\"> Can use server in template {{ server }} get index let i = index","title":"ngFor"},{"location":"ng/#course-project-planning","text":"Shopping List, Recipe Book Always Root component Header component for connecting List & Book Shopping List -> Features Shopping List, Edit components Recipe Book -> Features Recipe List, Recipe Ittem, Recipes Component, Recipes Detail Ingredient MModel Recipe Model","title":"Course Project, Planning"},{"location":"ng/#creating-a-model","text":"export class Recipe { public name: string; public description: string; public imagePath: string; constructor(name: string, desc: string, imagePath: string) {} }","title":"Creating a Model"},{"location":"ng/#debugging","text":"Error Messages Console in browser Sourcemaps map JS bundles to TS code Webpack TS files Augury (browser extension)","title":"Debugging"},{"location":"ng/#components-data-binding-deep-dive","text":"Splitting into separate Components Array in AppComponent -> Cockpit Component -> Server-Elements Component Can use Event & Property binding on directives and components Binding to custom properties By default component properties only accessible in that component Decorators @Input() // pass a new string for new name outside component ie: [element]=\"serverElement\" Alias bind to custom event Data up component hierarchy New event emitter @Output() serverCreated = new EventEmitter<{serverName: string, serverContent: string}>(); Optional alias -> arg passed to @Output","title":"Components &amp; Data-binding Deep Dive"},{"location":"ng/#view-encapsulation","text":"CSS between components Attributes applied by Angular Style encapsulation Same attribute to all elements in component \"Emulates shadow DOM\" in @Component: encapsulation: ViewEncapsulation.Emulated // None, Native (other options)","title":"View Encapsulation"},{"location":"ng/#load-references-in-templates","text":"In input element: #serverNameInput On button: (click)=\"onAddServer(serverNameInput)\"","title":"Load references in Templates"},{"location":"ng/#viewchild","text":"@ViewChild('serverContentInput', {static: true}) serverControlInput: ElementRef; this.serverContentInput.nativeElement.value","title":"@ViewChild"},{"location":"ng/#projecting-content-into-components-with-ng-content","text":"Everything between open and close of tags on own component will be lost unless: <ng-content></ng-content>","title":"Projecting content into Components with ng-content"},{"location":"ng/#component-lifecycle","text":"ngOnChanges Called after a bound input property changes ngOnInit Called once component is initialized ngDoCheck Called during every change detection run ngAfterContentInit Called after content ( ng-content ) has been projected into view ngAfterContentChecked Called every time the projected content has been checked ngAfterViewInit Called after the component's view (and child views) has been initialized ngAfterViewChecked Called every time the view (and child views) has been checked ngOnDestroy Called once the component is about to be destroyed Concept: CONTENT/VIEW ngOnChanges example ngOnChanges(changes: SimpleChanges) object, with bound property 'element' in this case @ContentChild @ContentChild('contentParagraph', { static: true }) paragraph: ElementRef Using projected content/content to be generated App component: <app-component> <!-- CONTENT --> </app-component> Access via ViewChild in app.component Access via ContentChild in server-element.component","title":"Component Lifecycle"},{"location":"ng/#directives-deep-dive","text":"Attribute Directives (ngClass, ngStyle) Change properties of element Structured Directives (ngIf, ngFor) Affects whole area in DOM Can't have more than one structural directive on an element","title":"Directives Deep Dive"},{"location":"ng/#creating-a-basic-attribute-directive","text":"Must import Directive from angular core Configure: - selector: '[myDirective]' // select as attribute Must inform angular directive exists via app module <p myDirective> ... </p> Renderer for better Basic Attribute Directive Renderer2 Better practice: ngOnInit(){ this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'blue'); } Better to use Renderer for DOM access and it's methods to access DOM Using HostListener to Listen to Host Events @HostListener('mouseenter')mouseover(eventData: event) { // ... } Using HostBinding to Bind to Host Properties @HostBinding('style.backgroundColor') backgroundColor: string Element must have a property this.backgroundColor = 'blue'; Can bind to any property of element directive is sitting on Binding to directive properties @Input() defaultColor: string = 'blue' this.backgroundColor = this.defaultColor <p appBetterHighlight [defaultColor]=\"'yellow'\"> CAN bind to properties of our own directives CAN omit square brackets, single quotes when passing down a string Make clear property binding is happening, NOT an attribute Creating a Structured Directive * indicates a structured directive Transformed into something else no * syntax There is only : Property binding Event binding Two-way binding String interpolation *ngIf example norm: <div *ngIf=\"!onlyOdd\"> transform: <ng-template [ngIf]=\"!onlyOdd\"> Building one @Input() set unless (value: boolean) Must store name! Understanding ngSwitch <div [ngSwitch]=\"value\"> <p *ngSwitchCase=\"5\">Value is 5</p> <p *ngSwitchDefault>Default</p>","title":"Creating a Basic Attribute Directive"},{"location":"ng/#using-services-dependency-injection","text":"Services address duplicating code or data storage/access Centralize a certain task","title":"Using Services &amp; Dependency Injection"},{"location":"ng/#creating-a-service","text":"Decorator not needed Injecting service into components Dependency Injector Hierarchal Injector AppModule -> Some instance of service available application-wide App Component -> Available for all components (not for other services) Any other component -> Same service instance for component and add all child components Add constructor in component where service will be used: constructor(private loggingService: LoggingService) {} // must give type Must give providers in component decorator providers: [LoggingService] Different instances in this example, providers array dictates new instance if service included, otherwise, same instance. Declare Service in providers array overrides the instance next, up, creating it's own. Thus, can inject a service into a service Injecting requires 'meta-data', found in decorators Must use @Injectable for service -> service Into receiving service","title":"Creating a Service"},{"location":"ng/#cross-component-communication-with-services","text":"In service: statusUpdated = new EventEmitter<string>(); In account, onSetTo: this.accountService.statusUpdated.emit(status); In new account, constructor: this.accountService.statusUpdated.subscribe((statis: string) => alert('New status ' + status)); Provide at AppModule level Alternative syntax: @Injectable({ providedIn: 'root' }) For application-wide service","title":"Cross-Component Communication with Services"},{"location":"ng/#changing-pages-with-routing","text":"","title":"Changing Pages with Routing"},{"location":"ng/#why","text":"Navigation, other pages","title":"Why"},{"location":"ng/#setting-up-in-appmodule","text":"const appRoutes: Routes = [ { path: 'user', component: UsersComponent }, // no slash { path: '', component: HomeComponent } // home page: '/' ]; In component.html: <router-outlet></router-outlet> Implement Navigation with a Directive Using href will reload the app, reseting state. Not ideal behavior in HTML: <a routerLink=\"/\">Home</a> OR (array): <a [routerLink]=\"['/users']\"> -> Property binding (non-string); For nested links ' / ' indicates absolute path Navigation will build on what component it's in /servers/servers example ' ./ ' for relative path, or ' ../ ' Setting selected nav tab as active dynamically: routerLinkActive=\"active\" Empty home path always there, always active To fix: [routerLinkActiveOptions]=\"{ exact: true }\" Exact path, instead of including","title":"Setting up, in AppModule"},{"location":"ng/#navigating-programmatically","text":"onLoadServer() { // calculations this.router.navigate(['/servers']); } Inject via constructor: constructor(private router: Router) -> Import from angular/router With relative Navigate method above does not know which route you're currently on, opposed to routerLink Pass second arg to inform: this.router.navigate(['servers'], { relativeTo: this.route }); Must inject! private route: ActivatedRoute Passing parameters to routes Add dynamic part to route: { path: 'users/:id', component: UserComponent } Fetch route parameters (inject ActivatedRoute) this.route.snapshot.params['id'] Snapshot works for first instance, won't re-render if already on component, need approach to get updated data this.route.params // Observable .subscribe( // update user object when params change (params: Params) => { // import this.user.id = params['id']; } ); Snapshot sufficient if component never reloads. For manual unsubscribe: ngOnDestroy(){ this.paramsSubscription.unsubscribe() } Component must implement ngOnDestroy Params imported Angular does this automatically! Good practice to do manually Passing query params and fragments [routerLink]=\"['/servers', 5, 'edit']\" [queryParams]=\"{ allowEdit: '1' }\" fragment=\"loading\" Dynamic: HTML: (click)=\"onLoadServer(1)\" TS: typescript onLoadServer(id: number) { // do stuff this.router.navigate( ['/servers', id, 'edit'] ) } Retrieve query params & fragments In constructor: private route: ActivatedRoute ngOnInit: this.route.snapshot.queryParams OR .fragment this.route.queryParams.subscribe() this.route.fragment.subscribe() Params come in as string, convert to number: const id = +this.route.snapshot.params['id']","title":"Navigating Programmatically"},{"location":"ng/#setting-up-child-nested-routes","text":"Add property to route: { path: 'servers', component: ServersComponent, children: [ { path: ':id', component: ServerComponent }, // servers will be pre-appended { // ... } ] } Must NEST a <router-outlet> onEdit button this.router.navigate( ['edit'], { relativeTo: this.route, queryParamsHandling: 'preserve' } // blank for new, keep old overwrite new, merge for no overwrite ); Redirecting & Wildcard routes { path: 'something', redirectTo: '/not-found' } ^ path: '**' Wildcard route, all routes that are not known Must be at bottom/last route!","title":"Setting up Child (nested) Routes"},{"location":"ng/#outsourcing-route-config","text":"app-routing.module.ts `@NgModule Must export!","title":"Outsourcing Route Config"},{"location":"ng/#guards","text":"canActivate: { path: 'servers', canActivate: [AuthGuard], } // ... Protecting child (nested) routes: canActivateChild: canActivateChild: [AuthGuard] // fake or mimic read Auth","title":"Guards"},{"location":"ng/#controlling-navigation-with-candeactivate","text":"Use for prompting discard of changes or navigate, component must implement Given as property in route Similar format to canActivate","title":"Controlling navigation with canDeactivate"},{"location":"ng/#passing-static-data-to-a-route","text":"Date property in route definition: { path: 'not-found', component: ErrorPageComponent, data: { message: 'Page not found!' }}","title":"Passing Static Data to a Route"},{"location":"ng/#resolving-dynamic-data-with-the-resolve-guard","text":"Resolver Service Resolve property on route (best for async) Takes an object { path: ':id', component: ServerComponent, resolve: { server: ServerResolver }} \"server\" is choice of name this.route.data.subscribe((data: Data) => { this.server = data['server']; // choice of name \"server\" here });","title":"Resolving Dynamic Data with the resolve Guard"},{"location":"ng/#location-strategies","text":"Add configs for old browsers RouterModule.forRoot(appRoutes, { useHash: true }) Hash mode routing","title":"Location Strategies"},{"location":"ng/#understanding-observables","text":"Observable - A data source (user input) events, http request, triggered in code. Observer Handle data, handle error, handle completion RxJs Unsubscribe if no longer using Avoid memory leaks Custom Observable Imports Handle next, complete, error Can use built-in operators in between Observer/Observable Pipe, operators Subject More active observable, event emitter For communicating between components with Services","title":"Understanding Observables"},{"location":"ng/#handling-forms-in-angular-apps","text":"Form as a JS object Value, metadata 2 Approaches Template-Driven Form object inferred from DOM Reactive Synced with DOM Template Driven: @ViewChild('f', { static: false }) signupForm: NgForm; <form (ngSubmit)=\"onSubmit(f)\" #f=\"ngForm\">","title":"Handling Forms in Angular Apps"},{"location":"ng/#validation","text":"Built-In Validators Required Email Form states ng-valid ng-invalid example: [disabled]=\"!f.valid\" , #email=\"ngModel\" <--> *ngIf=\"!email.valid\" Default value: [ngModel]=\"defaultQuestion\" Grouping data: ngModelGroup=\"userData\" // key #userData=\"ngModelGroup\" Radio buttons Similar to other inputs, add ngModel","title":"Validation"},{"location":"ng/#setting-fetching-form-values","text":"form.setValue form.patchValue Extract with ViewChild Reset Form signupForm.reset()","title":"Setting &amp; Fetching Form Values"},{"location":"ng/#reactive-approach","text":"In component: signupForm: FormGroup; In Module: ReactiveFormsModule // in OnInit: this.signupForm = new FormGroup({ 'username': new FormControl(null), 'email': new FormControl(null), 'gender': new FormControl('male') }); Submit <form (ngSubmit)=\"onSubmit()\"> Validation Not using required Not configured at template new FormControl(null, Validators.required) Access to Controls *ngIf=\"!signupForm.get('email').valid\" Grouping FormGroup({ FormControl, Form Control }) In template: <div formGroupName=\"userData\"> <input formControlName=\"username\"> Access: *ngIf=\"!signupForm.get('userData.username').valid\"","title":"Reactive Approach"},{"location":"ng/#arrays-of-form-control","text":"Component: 'hobbies': new FormArray([]) // empty onAddHobby() { const control = new FormControl(null); (<FormArray>this.signupForm.get('hobbies')).push(control); } Template: <button (click)=\"onAddHobby()\"> <div *ngFor=\"let hobbyControl of signupForm.get('hobbies').controls; let i = index\" > <input [formControlName]=\"i\">","title":"Arrays of Form Control"},{"location":"ng/#custom-validators","text":"A function checked during validation forbiddenNames(control: FormControl): {[s: string]: boolean} { } Errors: signupForm.get('userData.email').errors['nameIsForbidden'] ASYNC Validator: forbiddenEmails(control: FormControl): Promise<any> | Observable<any> { const promise = new Promise<any>((resolve, reject) => { setTimeout(() => { if (control.value === 'test@test.com') { resolve({ 'emailIsForbidden': true }); } else { resolve(null); } }, 1500); }); return promise; } statusChanges & valueChanges this.signupForm.statusChanges.subscribe( (value) => console.log(value) );","title":"Custom Validators"},{"location":"ng/#using-pipes-to-transform-output","text":"For transforming values <p>{{ username | uppercase }}</p> Built-in & Custom Using {{ var | date }} Parameterizing Pipes {{ var | date: 'fullDate' }} // parameter -> fullDate For multiple: date:param:param Can combine {{ var | date:'fullDate' | uppercase }} Custom // shorten.pipe.ts @Pipe({ name: 'shorten' }) export class ShortenPipe implements PipeTransform { transform(value: any) { return value.substr(0, 10); } } Decorator, also in declarations in app.module.ts Parameterizing shorten: 10 Can use as filter of loop content Pure/Impure Pipes Recalculated pipe when data changes - Impure Pipe Async Pipe Works with Promises, Observables","title":"Using Pipes to Transform Output"},{"location":"ng/#making-http-requests","text":"","title":"Making Http Requests"},{"location":"ng/#how-does-angular-interact-with-backends","text":"How to connect Angular to a database Not directly HTTP Requests/responses","title":"How does Angular interact with backends?"},{"location":"ng/#server","text":"HTTP Request -> [Server/API (REST, GraphQL)] -> HTTP Response -> Angular -> Store and Fetch Data -> SQL/NoSQL HTTP Anatomy HTTP Verb URL (API Endpoint) Headers(metadata) Body Google Firebase - complete backend service (.json) POST Need HttpClientModuke in imports -> app.module Inject to component constructor(private http: HttpClient) { } http.post returns Observable, must subscribe or won't be sent Same with GET Transform with Pipe Example with Map Using Services for HttpRequests Service and Components Working together DELETE Handle Errors Second arg in subscribe Using a Subject All HTTP Methods have options to configure, such as headers HttpHeaders HttpParams HttpEventType","title":"Server"},{"location":"ng/#interceptors","text":"Service to run right before request HttpRequest, HttpHandler Structure! (see http-01-start) Doesn't need to be injected Manipulate Request object Request immutable, must create new one Response Interceptors Pipe handle in return of request Multiple Order matters!","title":"Interceptors"},{"location":"ng/#authentication-and-route-protection-in-angular","text":"","title":"Authentication and Route Protection in Angular"},{"location":"ng/#how-it-works","text":"Client -- Sends auth data --> Server Server -- Session --> Client For Angular, we use single page applications. Front-end decoupled from back-end. Will use a RESTful API since sessions can't be used. Communication done through HttpClient offered by Angular. Token sent to client which stores it, stored token is sent to authorize subsequent request.","title":"How it works"},{"location":"ng/#adding-auth-page","text":"Sign up and login. Lock down recipes and manage dropdown to only be used by auth'd users.","title":"Adding Auth Page"},{"location":"ng/#switch-between-auth-modes","text":"Use click listener, function to reverse a boolean","title":"Switch between Auth Modes"},{"location":"ng/#handling-form-input","text":"Similar to previous forms <div class=\"row\"> <div class=\"col-xs-12 col-md-6 col-md-offset-3\"> <div class=\"alert alert-danger\" *ngIf=\"error\"> <p>{{ error }}</p> </div> <div *ngIf=\"isLoading\" style=\"text-align: center\"> <app-loading-spinner></app-loading-spinner> </div> <form #authForm=\"ngForm\" (ngSubmit)=\"onSubmit(authForm)\" *ngIf=\"!isLoading\"> <div class=\"form-group\"> <label for=\"email\">E-Mail</label> <input type=\"email\" id=\"email\" class=\"form-control\" ngModel name=\"email\" required email > </div> <div class=\"form-group\"> <label for=\"password\">Password</label> <input type=\"password\" id=\"password\" class=\"form-control\" ngModel name=\"password\" required minlength=\"6\" > </div> <div> <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"!authForm.valid\"> {{ isLoginMode ? 'Login' : 'Sign Up' }} </button> | <button class=\"btn btn-primary\" (click)=\"onSwitchMode()\" type=\"button\"> Switch to {{ isLoginMode ? 'Sign Up' : 'Login' }} </button> </div> </form> </div> </div> Use service to communicate with backend and authenticate Interface of response data export interface AuthResponseData { kind: string; idToken: string; email: string; refreshToken: string; expiresIn: string; localId: string; registered?: boolean; // optional, is only in login res } Chaining observables onSubmit(form: NgForm) { if (!form.valid) { return; } const email = form.value.email; const password = form.value.password; let authObs: Observable<AuthResponseData>; this.isLoading = true; if (this.isLoginMode) { authObs = this.authService.login(email, password); } else { authObs = this.authService.signup(email, password); } authObs.subscribe(resData => { console.log(resData); this.isLoading = false; }, errorMessage => { console.log(errorMessage); this.error = errorMessage; this.isLoading = false; }); form.reset(); } Source error handling to private function in service. private handleError(errorRes: HttpErrorResponse) { let errorMessage = 'An unknown error occurred!'; if (!errorRes.error || !errorRes.error.error) { return throwError(errorMessage); } switch (errorRes.error.error.message) { case 'EMAIL_EXISTS': errorMessage = 'This email exists already.'; break; case 'EMAIL_NOT_FOUND': errorMessage = 'This email does not exist'; break; case 'INVALID_PASSWORD': errorMessage = 'This password is not correct'; break; } return throwError(errorMessage); }","title":"Handling Form Input"},{"location":"ng/#creating-and-storing-the-user-data","text":"Create a user model // src/app/auth/user.model.ts export class User { constructor( public email: string, public id: string, // underscore & private for validity private _token: string, private _tokenExpirationDate: Date ) {} /* getter using get keyword access like a property allows for logic in validity and checks */ get token() { if (!this._tokenExpirationDate || new Date() > this._tokenExpirationDate) { return null; } return this._token; } } Use in Auth Service // src/app/auth/auth.service.ts user = new Subject<User>(); // ... private handleAuthentication( email: string, userId: string, token: string, expiresIn: number ) { const expirationDate = new Date(new Date().getTime() + expiresIn * 1000); const user = new User(email, userId, token, expirationDate); this.user.next(user); } // integrate to login and signup, from pipe .pipe( catchError(this.handleError), tap(resData => { this.handleAuthentication( resData.email, resData.localId, resData.idToken, +resData.expiresIn ); }) );","title":"Creating and Storing the User Data"},{"location":"ng/#reflecting-the-auth-state-in-the-ui","text":"Add this.router.navigate(['/recipes]); to successful auth subscriber in auth component. Reflect state in Header component Disable recipes link if not logged in Disable Authenticate link only if logged in. Disable dropdown if not logged in Show Logout button Get current auth status into header component (user with valid token or not) isAuthenticated = false; private userSub = Subscription; // inject auth service // implement ngOnInit and ngOnDestroy ngOnInit() { this.userSub = this.authService.user.subscribe(user => { this.isAuthenticated = !!user; console.log(!user); console.log(!!user); }); } // then use ngIf in template","title":"Reflecting the Auth State in the UI"},{"location":"ng/#adding-the-token-to-outgoing-requests","text":"Change user in auth service user = new BehaviorSubject<User>(null); Use this to pull one value from user object in data-storage service, using take, and refactoring fetchRecipes: fetchRecipes() { return this.authService.user.pipe( take(1), exhaustMap(user => { return this.http.get<Recipe[]>( 'https://ng-learn-practice.firebaseio.com/recipes.json' ); }), map(recipes => { return recipes.map(recipe => { return { ...recipe, ingredients: recipe.ingredients ? recipe.ingredients : [] }; }); }), tap(recipes => { this.recipeService.setRecipes(recipes); }) ); }","title":"Adding the Token to Outgoing Requests"},{"location":"ng/#attaching-the-token-with-an-interceptor","text":"Want to also add token to storeRecipes Use an interceptor to manipulate requests instead of handling it twice. // src/app/auth/auth-interceptor.service.ts import { Injectable } from '@angular/core'; import { HttpInterceptor, HttpRequest, HttpHandler, HttpParams } from '@angular/common/http'; import { AuthService } from './auth.service'; import { take, exhaustMap } from 'rxjs/operators'; @Injectable() export class AuthInterceptorService implements HttpInterceptor { constructor(private authService: AuthService) {} intercept(req: HttpRequest<any>, next: HttpHandler) { return this.authService.user.pipe( take(1), exhaustMap(user => { // must check, only add token if we have a user! otherwise send original req if (!user) { return next.handle(req); } const modifiedRequest = req.clone({ params: new HttpParams().set('auth', user.token) }); return next.handle(modifiedRequest); }) ); } }","title":"Attaching the Token with an Interceptor"},{"location":"ng/#adding-logout","text":"Add method to authService and link to header // src/app/auth/auth.service.ts logout() { this.user.next(null); this.router.navigate(['/auth']); } // src/app/header/header.component.ts onLogout() { this.authService.logout(); }","title":"Adding Logout"},{"location":"ng/#adding-auto-login","text":"Use local storage via browser to store token to be persisted in app reload Add to end of handleAuthentication in auth service: localStorage.setItem('userData', JSON.stringify(user)); Implement autoLogin method autoLogin(){ const userData: { email: string, id: string, _token: string, _tokenExpirationDate: string; } = JSON.parse(localStorage.getItem('userData')); if (!userData) { return; } const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate)); if (loadedUser.token) { this.user.next(loadedUser); } } Add to App Component ( runs first ) ngOnInit() { this.authService.autoLogin(); }","title":"Adding Auto-Login"},{"location":"ng/#adding-auto-logout","text":"Need to manually clear the snapshot of the user At end of logout method in auth service localStorage.removeItem('userData'); Must set timer to know when to invalidate token. autoLogout method Must also clear token expiration timer. Store in property private tokenExpirationTimer: any; logout() { this.user.next(null); this.router.navigate(['/auth']); localStorage.removeItem('userData'); if (this.tokenExpirationTimer) { clearTimeout(this.tokenExpirationTimer); } this.tokenExpirationTimer = null; } autoLogout(expirationDuration: number) { this.tokenExpirationTimer = setTimeout(() => { this.logout(); }, expirationDuration); } Need to call autoLogout everyime we emit a new user to the app. So, in handleAuthentication and autoLogin methods // in handleAuthentication method this.user.next(user); this.autoLogout(expiresIn * 1000); Must calculate expiration date in autoLogin // in autoLogin method if (loadedUser.token) { this.user.next(loadedUser); const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime(); this.autoLogout(expirationDuration); }","title":"Adding Auto-Logout"},{"location":"ng/#adding-an-auth-guard","text":"Run logic right before a route is loaded. // ./src/app/auth/auth.guard.ts import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router'; import { Injectable } from '@angular/core'; import { Observable } from 'rxjs'; import { map } from 'rxjs/operators'; import { AuthService } from './auth.service'; @Injectable({ providedIn: 'root' }) export class AuthGuard implements CanActivate { constructor(private authService: AuthService) {} canActivate( route: ActivatedRouteSnapshot, router: RouterStateSnapshot ): boolean | Promise<boolean> | Observable<boolean> { return this.authService.user.pipe( map(user => { return !!user; }) ); } } Add to Router Module // ./src/app/app-routing.module path: 'recipes', component: RecipesComponent, canActivate: [AuthGuard], children: [ // ... Add redirect on attempt to go to /recipes Used to have to add router and tap, redirect manually Can now use URL Tree import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router'; import { Injectable } from '@angular/core'; import { Observable } from 'rxjs'; import { map } from 'rxjs/operators'; import { AuthService } from './auth.service'; @Injectable({ providedIn: 'root' }) export class AuthGuard implements CanActivate { constructor(private authService: AuthService, private router: Router) {} canActivate( route: ActivatedRouteSnapshot, router: RouterStateSnapshot ): | boolean | UrlTree | Promise<boolean | UrlTree> | Observable<boolean | UrlTree> { return this.authService.user.pipe( take(1), map((user) => { const isAuth = !!user; if (isAuth) { return true; } return this.router.createUrlTree(['/auth']); }) ); } }","title":"Adding an Auth Guard"},{"location":"ng/#dynamic-components","text":"","title":"Dynamic Components"},{"location":"ng/#what-are-dynamic-components","text":"Components you create dynamically at runtime. Show an alert, some modal, some overlay, etc How to load it on demand, communicate, and get rid of it.","title":"What are Dynamic Components(?)"},{"location":"ng/#adding-an-alert-modal-component","text":"Build simple alert box on invalid login credentials // ./src/app/shared/alert/alert.component.ts import { Component, Input } from '@angular/core'; @Component({ selector: 'app-alert', templateUrl: './alert.component.html', styleUrls: ['./alert.component.css'] }) export class AlertComponent { @Input() message: string; } <!-- ./src/app/shared/alert/alert.component.html --> <div class=\"backdrop\"></div> <div class=\"alert-box\"> <p>{{ message }}</p> <div class=\"alert-box-actions\"> <button class=\"btn btn-primary\">Close</button> </div> </div> /* ./src/app/shared/alert/alert.component.css */ .backdrop { position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; background: rgba(0, 0, 0, 0.75); z-index: 50; } .alert-box { position: fixed; top: 30vh; left: 20vw; width: 60vw; padding: 16px; z-index: 100; background: white; box-shadow: 0 2px 8px rbga(0, 0, 0, 0.26); } .alert-box-actions { text-align: right; } <!-- ./src/app/auth/auth.component.html --> <!-- <div class=\"alert alert-danger\" *ngIf=\"error\"> <p>{{ error }}</p> </div> --> <app-alert [message]=\"error\" *ngIf=\"error\"></app-alert>","title":"Adding an Alert Modal Component"},{"location":"ng/#understanding-the-different-approaches","text":"What are dynamic components? Loaded Programmatically *ngIf Component embedded via selector (declaratively) *ngIf controls whether component is added to DOM Dynamic Component Loader (doesn't exist anymore) Component created and added to DOM via code (imperatively) Component is managed & added by developer","title":"Understanding the Different Approaches"},{"location":"ng/#using-ngif","text":"<!-- ./src/app/auth/auth.component.html --> <app-alert [message]=\"error\" *ngIf=\"error\" (close)=\"onHandleError()\"></app-alert> // ./src/app/auth/auth.component.ts onHandleError() { this.error = null; } // ./src/app/shared/alert/alert.component.ts @Input() message: string; @Output() close = new EventEmitter<void>(); onClose() { this.close.emit(); } <!-- ./src/app/shared/alert/alert.component.html --> <div class=\"backdrop\" (click)=\"onClose()\"></div> <div class=\"alert-box\"> <p>{{ message }}</p> <div class=\"alert-box-actions\"> <button class=\"btn btn-primary\" (click)=\"onClose()\">Close</button> </div> </div>","title":"Using ngIf"},{"location":"ng/#preparing-programmatic-creation","text":"Comment out app-alert in html Create method in auth component // ./src/app/auth/auth.component.ts // on error in authObs: this.error = errorMessage; this.showErrorAlert(errorMessage); this.isLoading = false; // Use component factory resolver, inject into constructor private showErrorAlert(message: string) { const alertCmpFactory = this.componentFactoryResolver.resolveComponentFactory( AlertComponent ); } Create a directive // ./src/app/shared/placeholder/placeholder.directive.ts import { Directive, ViewContainerRef } from '@angular/core'; @Directive({ selector: '[appPlaceholder]' }) export class PlaceholderDirective { constructor(public viewContainerRef: ViewContainerRef) {} }","title":"Preparing Programmatic Creation"},{"location":"ng/#creating-a-component-programmatically","text":"Add ng-template to HTML <!-- ./src/app/auth/auth.component.html --> <!-- Get access to this place in the DOM --> <ng-template appPlaceholder></ng-template> // ./src/app/auth/auth.component.ts // Access directive with @ViewChild @ViewChild(PlaceholderDirective, { static: false }) alertHost: PlaceholderDirective; // ... private showErrorAlert(message: string) { const alertCmpFactory = this.componentFactoryResolver.resolveComponentFactory( AlertComponent ); const hostViewContainerRef = this.alertHost.viewContainerRef; hostViewContainerRef.clear(); hostViewContainerRef.createComponent(alertCmpFactory); } // ERROR: No component factory found for AlertComponent. Did you add it to @NgMOdule.entryComponents?","title":"Creating a Component Programmatically"},{"location":"ng/#understanding-entrycomponents","text":"Angular does not automatically reach out to declarations array when creating component manually in code. To tell Angular to be prepared for creation of that component, need to add special property to the object passed to NgModule // ./src/app/app.module.ts // in NgModule declaration bootstrap: [AppComponent], entryComponents: [ AlertComponent ]","title":"Understanding entryComponents"},{"location":"ng/#data-binding-and-event-binding","text":"Create instance with component ref To close, manually have to listen to our close event // ./src/app/auth/auth.component.ts private showErrorAlert(message: string) { const alertCmpFactory = this.componentFactoryResolver.resolveComponentFactory( AlertComponent ); const hostViewContainerRef = this.alertHost.viewContainerRef; hostViewContainerRef.clear(); const componentRef = hostViewContainerRef.createComponent(alertCmpFactory); componentRef.instance.message = message; // Must create closeSub: Subscription this.closeSub = componentRef.instance.close.subscribe(() => { this.closeSub.unsubscribe(); hostViewContainerRef.clear(); }); }","title":"Data Binding and Event Binding"},{"location":"ng/#angular-modules-optimizing-angular-apps","text":"","title":"Angular Modules &amp; Optimizing Angular Apps"},{"location":"ng/#what-are-modules","text":"Modules are ways to bundle Angular building blocks together Angular analyzes NgModules to understand your application and it's features. Defines all building blocks your app uses: Components, directives, services, pipes Application requires at least one module (AppModule) but may be split into multiple modules. Core Angular features are included in Angular modules (e.g. FormsModule) to load them only when needed. Can't use a feature/building block without including it in a module.","title":"What are Modules"},{"location":"ng/#analyzing-the-appmodule","text":"Already using two modules in shop recipe project app.module.ts app-routing.module.ts AppModule Declarations Array of all components, directives, custom pipes being used in application Imports array Import other modules into this module. Split into multiple modules. Providers array Define all services we want to provide. Any service you plan on injecting, must add here. Bootstrap array Starting app, defines what component is available in index.html file. Typically one root component in bootstrap array Entry Components array For components created in code or programmatically AppRoutingModule Separation of concerns, leaner and more focused. Imports RouterModule Exported here. Made available in AppModule Every module works on its own Splitting modules help with performance","title":"Analyzing the AppModule"},{"location":"ng/#getting-started-with-feature-modules","text":"Working with multiple modules, splitting into multiple feature modules. Products Module Orders Module In relation to course project 3 main feature areas: Recipes Shopping List Authentication Everything in a module stands alone","title":"Getting Started with Feature Modules"},{"location":"ng/#initial-recipes-module","text":"// ./src/app/recipes/recipes.module.ts import { NgModule } from '@angular/core'; import { CommonModule } from '@angular/common'; import { RouterModule } from '@angular/router'; import { ReactiveFormsModule } from '@angular/forms'; import { RecipesComponent } from './recipes.component'; import { RecipeListComponent } from './recipe-list/recipe-list.component'; import { RecipeDetailComponent } from './recipe-detail/recipe-detail.component'; import { RecipeItemComponent } from './recipe-list/recipe-item/recipe-item.component'; import { RecipeStartComponent } from './recipe-start/recipe-start.component'; import { RecipeEditComponent } from './recipe-edit/recipe-edit.component'; @NgModule({ declarations: [ RecipesComponent, RecipeListComponent, RecipeDetailComponent, RecipeItemComponent, RecipeStartComponent, RecipeEditComponent, ], exports: [ RecipesComponent, RecipeListComponent, RecipeDetailComponent, RecipeItemComponent, RecipeStartComponent, RecipeEditComponent, ] }) export class RecipesModule {}","title":"Initial Recipes Module"},{"location":"ng/#splitting-modules-correctly","text":"Using something other than a service, only have access to what you import Import RouterModule Don't import BrowserModule CommonModule instead Import ReactiveFormsModule for recipe forms. Recipes module finished!","title":"Splitting Modules Correctly"},{"location":"ng/#recipes-module","text":"// src/app/recipes/recipes.module.ts // imports @NgModule({ // ... imports: [RouterModule, CommonModule, ReactiveFormsModule], // ... }) export class RecipesModule {}","title":"Recipes Module"},{"location":"ng/#adding-routes-to-feature-modules","text":"Move recipes segment of routing module to recipes module","title":"Adding Routes to Feature Modules"},{"location":"ng/#recipesroutingmodule","text":"// ./src/app/recipes/recipes.module.ts import { NgModule } from '@angular/core'; import { Routes, RouterModule } from '@angular/router'; import { RecipesComponent } from './recipes.component'; import { AuthGuard } from '../auth/auth.guard'; import { RecipeStartComponent } from './recipe-start/recipe-start.component'; import { RecipeEditComponent } from './recipe-edit/recipe-edit.component'; import { RecipeDetailComponent } from './recipe-detail/recipe-detail.component'; import { RecipesResolverService } from './recipes-resolver.service'; const routes: Routes = [ { path: 'recipes', component: RecipesComponent, canActivate: [AuthGuard], children: [ { path: '', component: RecipeStartComponent}, { path: 'new', component: RecipeEditComponent }, { path: ':id', component: RecipeDetailComponent, resolve: [RecipesResolverService] }, { path: ':id/edit', component: RecipeEditComponent, resolve: [RecipesResolverService] } ] } ]; @NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule] }) export class RecipesRoutingModule {}","title":"RecipesRoutingModule"},{"location":"ng/#component-declarations","text":"Declaration and export important, must include components for routes used. Don't need exports in recipe module here, since not using in app component.","title":"Component Declarations"},{"location":"ng/#shopping-list-feature-module","text":"// src/app/shopping-list/shopping-list.module.ts import { NgModule } from '@angular/core'; import { RouterModule } from '@angular/router'; import { CommonModule } from '@angular/common'; import { FormsModule } from '@angular/forms'; import { ShoppingListComponent } from './shopping-list.component'; import { ShoppingEditComponent } from './shopping-edit/shopping-edit.component'; @NgModule({ declarations: [ShoppingListComponent, ShoppingEditComponent,], imports: [ CommonModule, FormsModule, RouterModule.forChild([ { path: 'shopping-list', component: ShoppingListComponent } ]) ] }) export class ShoppingListModule {}","title":"Shopping List Feature Module"},{"location":"ng/#understanding-shared-modules","text":"Two feature modules, differing in one component Can move components in common to shared module to be imported by both Do this in Shop Recipe with Shared folder Import and export relevant components Can't have multiple declarations // src/app/shared/shared.module.ts import { NgModule } from '@angular/core'; import { AlertComponent } from './alert/alert.component'; import { LoadingSpinnerComponent } from './loading-spinner/loading-spinner.component'; import { PlaceholderDirective } from './placeholder/placeholder.directive'; import { DropdownDirective } from './dropdown.directive'; import { CommonModule } from '@angular/common'; @NgModule({ declarations: [ AlertComponent, LoadingSpinnerComponent, PlaceholderDirective, DropdownDirective ], imports: [ CommonModule ], exports: [ AlertComponent, LoadingSpinnerComponent, PlaceholderDirective, DropdownDirective, CommonModule ], entryComponents: [ AlertComponent ] }) export class SharedModule {} // import into shopping list module instead of common module","title":"Understanding Shared Modules"},{"location":"ng/#understanding-the-core-module","text":"Makes app module leaner Can use to move services out, organize into one module, then bring core module back into app module Provide application-wide services in separate module, to keep app module leaner // src/app/core.module.ts import { NgModule } from '@angular/core'; import { HTTP_INTERCEPTORS } from '@angular/common/http'; import { ShoppingListService } from './shopping-list/shopping-list.service'; import { RecipeService } from './recipes/recipe.service'; import { AuthInterceptorService } from './auth/auth-interceptor.service'; @NgModule({ providers: [ ShoppingListService, RecipeService, { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptorService, multi: true } ] }) export class CoreModule {}","title":"Understanding the Core Module"},{"location":"ng/#adding-an-auth-feature-module","text":"// src/app/auth/auth.module.ts import { NgModule } from '@angular/core'; import { CommonModule } from '@angular/common'; import { FormsModule } from '@angular/forms'; import { AuthComponent } from './auth.component'; import { RouterModule } from '@angular/router'; import { SharedModule } from '../shared/shared.module'; @NgModule({ declarations: [AuthComponent], imports: [ CommonModule, FormsModule, RouterModule.forChild([ { path: 'auth', component: AuthComponent } ]), SharedModule ] }) export class AuthModule {}","title":"Adding an Auth Feature Module"},{"location":"ng/#understanding-lazy-loading","text":"An optimization concept Previous refactoring only cosmetic, not performative. Only run code that belongs to separate areas when we really need it Only load when we visit","title":"Understanding Lazy Loading"},{"location":"ng/#implementing-lazy-loading","text":"For lazy loading, feature module needs to bring it's own routes. Have to change to empty path in recipes routing module, since it is now being used in app-routing module","title":"Implementing Lazy Loading"},{"location":"ng/#more-lazy-loading","text":"Implement on Shopping List and Auth modules Final result: // src/app/app-routing.module.ts import { NgModule } from '@angular/core'; import { Routes, RouterModule } from '@angular/router'; const appRoutes: Routes = [ { path: '', redirectTo: '/recipes', pathMatch: 'full' }, { path: 'recipes', loadChildren: () => import('./recipes/recipes.module').then(m => m.RecipesModule) }, { path: 'shopping-list', loadChildren: () => import('./shopping-list/shopping-list.module').then(m => m.ShoppingListModule) }, { path: 'auth', loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule) } ]; @NgModule({ imports: [RouterModule.forRoot(appRoutes)], exports: [RouterModule] }) export class AppRoutingModule {}","title":"More Lazy Loading"},{"location":"ng/#preloading-lazy-loaded-code","text":"Small delay, this will alleviate that Preloads bundles as soon as possible imports: [RouterModule.forRoot(appRoutes, {preloadingStrategy: PreloadAllModules})],","title":"Preloading Lazy-Loaded Code"},{"location":"ng/#modules-and-services","text":"Can provide Service in AppModule Available app-wide Use root injector Should be default AppComponent(or other Components) Available in component-tree Use component-specific injector Use if service is only relevant for component tree Eager-loaded Module Available app-wide Use root injector Avoid this! Same effect as AppModule Lazy-Loaded Module Available in loaded module Use child injector Use if service should be scoped to loaded module","title":"Modules and Services"},{"location":"ng/#loading-services-differently","text":"Different instances // Service loading demo // src/app/logging.service.ts import { Injectable } from '@angular/core'; // @Injectable({ providedIn: 'root' }) export class LoggingService { lastLog: string; printLog(message: string) { console.log(message); console.log(this.lastLog); this.lastLog = message; } }","title":"Loading Services Differently"},{"location":"ng/#ahead-of-time-compilation","text":"Code and templates compiled to Javascript with TS compiler. Angular compiler (automatically included in built code) compile template syntax to Javascript DOM instructions Just-in-Time(JiT) Compilation Angular template compiler runs in browser (at runtime) Ahead-of-Time (AoT) Compilation Angular template compiler runs during build process (before app is deployed) ng serve does JiT compilation by default Run ng build --prod Error with recipe-edit controls, fixed before get controls() { return (this.recipeForm.get('ingredients') as FormArray).controls; }","title":"Ahead-of-Time Compilation"},{"location":"ng/#deploying-an-angular-app","text":"Using Firebase","title":"Deploying an Angular App"},{"location":"ng/#preparation","text":"Use & check Environment Variables Polish & test code ng build --prod Uses ahead-of-time compilation Deploy build artificats (generated files) to static host No server-side language on static host, just HTML, JS, CSS","title":"Preparation"},{"location":"ng/#using-environment-variables","text":"src/environments File for production, and one for development environment.ts environment.prod.ts Import (used here with firebase API key in authentication service) import { environment } from '../../environments/environment'; environment.firebaseAPIKey","title":"Using Environment Variables"},{"location":"ng/#deployment-example-firebase-hosting","text":"Options for static website hosting AWS S3 Firebase Hosting etc.. For Firebase, first install npm i -g firebase-tools Initialize firebase init Go through settings Deploy firebase deploy","title":"Deployment Example: Firebase Hosting"},{"location":"ng/#server-routing-vs-browser-routing","text":"When deploying an Angular app, it's really important to make sure that your server (like S3) is configured to always serve the index.html file. Here's why .","title":"Server Routing vs Browser Routing"},{"location":"ng/#bonus-working-with-ngrx-in-our-project","text":"State management","title":"Bonus: Working with NgRx in our Project"},{"location":"ng/#what-is-application-state","text":"Example WelcomeComponent NewTrainingComponent CurrentTraining Component TrainingService Fetch excercises (NewTrainingComponent) Store excercises (CurrentTrainingComponent) Application state lost when application refreshes! TrainingService Store & Fetch on Backend Known as Persistent State on Backend ShoppingListService as example on our Recipe App (User) Event in UI/App -> State Changing Event -> Observable -> Operators* -> Listener -> Update UI *Optional Using Subjects, Observables Push subscribe mechanism","title":"What is Application State"},{"location":"ng/#what-is-ngrx","text":"Issues with the RxJS Approach State can be updated anywhere State is (possibly) mutable Handling side effects (e.g. Http calls) is unclear No specific Pattern is Enforced Redux State management pattern and library Store - Application State Services & Components receive state from Store Actions - Dispatch Sent to Reducers Reduces/Combines State Returns new state Store saves reduced State (immutably) NgRx is Angular's Implementation of Redux Differences to \"normal\" Redux Deeply integrated into Angular Injectable Services Uses RxJS Observables (Uses Typescript)","title":"What is NgRx"},{"location":"ng/#getting-started-with-reducers","text":"App is fine as is Recommended to follow for introduction to this pattern Install: npm i --save @ngrx/store // src/app/shopping-list/shopping-list.reducer.ts import { Ingredient } from '../shared/ingredient.model'; const initialState = { ingredients: [ new Ingredient('Apples', 5), new Ingredient('Tomatoes', 10), ] }; export function shoppingListReducer(state = initialState, action) {}","title":"Getting Started with Reducers"},{"location":"ng/#adding-logic-to-the-reducer","text":"Never touch existing state. Instead, return new object to replace old state Copy old state import { Ingredient } from '../shared/ingredient.model'; import { Action } from '@ngrx/store'; const initialState = { ingredients: [ new Ingredient('Apples', 5), new Ingredient('Tomatoes', 10), ] }; export function shoppingListReducer(state = initialState, action: Action) { switch (action.type) { case 'ADD_INGREDIENT': return { ...state, // good practice to always copy over old state ingredients: [...state.ingredients, action] }; } }","title":"Adding Logic to the Reducer"},{"location":"ng/#understanding-and-adding-actions","text":"// src/app/shopping-list/store/shopping-list.actions.ts import { Action } from '@ngrx/store'; import { Ingredient } from 'src/app/shared/ingredient.model'; export const ADD_INGREDIENT = 'ADD_INGREDIENT'; export class AddIngredient implements Action { readonly type = ADD_INGREDIENT; payload: Ingredient; // \"payload\" not a required name, can use any. only \"type\" property is required. }","title":"Understanding and Adding Actions"},{"location":"ng/#setting-up-the-ngrx-store","text":"// src/app/shopping-list/store/shopping-list.reducer.ts import { Ingredient } from '../../shared/ingredient.model'; import * as ShoppingListActions from './shopping-list.actions'; const initialState = { ingredients: [ new Ingredient('Apples', 5), new Ingredient('Tomatoes', 10), ] }; export function shoppingListReducer(state = initialState, action: ShoppingListActions.AddIngredient) { switch (action.type) { case ShoppingListActions.ADD_INGREDIENT: return { ...state, // good practice to always copy over old state ingredients: [...state.ingredients, action.payload] }; } } Add to AppModule imports array: StoreModule.forRoot({ShoppingList: shoppingListReducer}),","title":"Setting up the NgRx Store"},{"location":"ng/#selecting-state","text":"Inject to ShoppingListComponent: private store: Store<{ shoppingList: { ingredients: Ingredient[] } }> import { Ingredient } from '../../shared/ingredient.model'; import * as ShoppingListActions from './shopping-list.actions'; const initialState = { ingredients: [new Ingredient('Apples', 5), new Ingredient('Tomatoes', 10)] }; export function shoppingListReducer( state = initialState, action: ShoppingListActions.AddIngredient ) { switch (action.type) { case ShoppingListActions.ADD_INGREDIENT: return { ...state, // good practice to always copy over old state ingredients: [...state.ingredients, action.payload] }; default: return state; } }","title":"Selecting State"},{"location":"ng/#dispatching-actions","text":"Find where we change state Create new object based on Action class and dispatch it Instead of adding payload as property in shopping-list actions, make into constructor funtion. constructor(public payload: Ingredient) {} When add ingredient, dispatch action, which reaches all reducers (1 in this case), in shopping-edit this.store.dispatch(new ShoppingListActions.AddIngredient(newIngredient)); Flow Add ingredient -> Dispatch the action (defined in actions) -> to ngrx store (aware of reducer) -> action reaches all reducers that store knows -> in reducer, action passed as second arg -> check for type of action -> react appropriately. Now using ngRx end-to-end for displaying and adding ingredients","title":"Dispatching Actions"},{"location":"ng/#multiple-actions","text":"Handle other state changes: Add multiple ingredients Update Ingredient Delete Ingredient Add Multiple Ingredients // src/app/shopping-list/store/shopping-list.actions.ts export const ADD_INGREDIENTS = 'ADD_INGREDIENTS'; export class AddIngredients implements Action { readonly type = ADD_INGREDIENTS; constructor(public payload: Ingredient[]) {} } // create union of diff action types export type ShoppingListActions = AddIngredient | AddIngredients; Implement on state change // src/app/recipes/recipe.service.ts addIngredientsToShoppingList(ingredients: Ingredient[]) { // this.sLService.addIngredients(ingredients); this.store.dispatch(new ShoppingListActions.AddIngredients(ingredients)); }","title":"Multiple Actions"},{"location":"ng/#preparing-update-delete-actions","text":"Add constants, classes, and add to union // src/app/shopping-list/store/shopping-list.actions.ts export const UPDATE_INGREDIENT = 'UPDATE_INGREDIENT'; export const DELETE_INGREDIENT = 'DELETE_INGREDIENT'; export class UpdateIngredient implements Action { readonly type = UPDATE_INGREDIENT; constructor(public payload: { index: number; ingredient: Ingredient }) {} } export class DeleteIngredient implements Action { readonly type = DELETE_INGREDIENT; constructor(public payload: number) {} } export type ShoppingListActions = | AddIngredient | AddIngredients | UpdateIngredient | DeleteIngredient;","title":"Preparing Update &amp; Delete Actions"},{"location":"ng/#updating-deleting-ingredients","text":"Updating Ingredient Must create new state, object Create a copy // src/app/shopping-list/store/shopping-list.reducer.ts case ShoppingListActions.UPDATE_INGREDIENT: const ingredient = state.ingredients[action.payload.index]; const updatedIngredient = { ...ingredient, ...action.payload.ingredient }; const updatedIngredients = [...state.ingredients]; updatedIngredients[action.payload.index] = updatedIngredient; return { ...state, ingredients: [updatedIngredients] }; Delete Ingredient Using filter // src/app/shopping-list/store/shopping-list.reducer.ts case ShoppingListActions.DELETE_INGREDIENT: return { ...state, ingredients: state.ingredients.filter((ig, igIndex) => { return igIndex !== action.payload; }) };","title":"Updating &amp; Deleting Ingredients"},{"location":"ng/#expanding-the-state","text":"Shopping Edit ngOnInit manages ingredients and whether we're editting or not from service Translate to ngRx Dispatch action for start editing, in shopping list on edit item Now we need more than just the ingredients in state Also want to store edited ingredient and index Change structure of state: // src/app/shopping-list/store/shopping-list.reducer.ts const initialState = { ingredients: [new Ingredient('Apples', 5), new Ingredient('Tomatoes', 10)], editedIngredient: null, editedIngredientIndex: -1 }; Now must change definition of return type Use simpler pattern // src/app/shopping-list/store/shopping-list.reducer.ts export interface State { ingredients: Ingredient[]; editedIngredient: Ingredient; editedIngredientIndex: number; } export interface AppState { shoppingList: State; }","title":"Expanding the State"},{"location":"ng/#managing-more-state-via-ngrx","text":"Need action for starting and cancelling edit process // src/app/shopping-list/store/shopping-list.actions.ts export const START_EDIT = 'START_EDIT'; export const STOP_EDIT = 'STOP_EDIT'; // ... export class StartEdit implements Action { readonly type = START_EDIT; constructor(public payload: number) {} } export class StopEdit implements Action { readonly type = STOP_EDIT; } Create cases in Reducer: // src/app/shopping-list/store/shopping-list.reducer.ts case ShoppingListActions.START_EDIT: return { ...state, editedIngredientIndex: action.payload, editedIngredient: { ...state.ingredients[action.payload] } }; case ShoppingListActions.STOP_EDIT: return { ...state, editedIngredient: null, editedIngredientIndex: -1 }; Now must dispatch the actions appropriately. // src/app/shopping-list/shopping-list.component.ts onEditItem(index: number) { // this.slService.startedEditing.next(index); this.store.dispatch(new ShoppingListActions.StartEdit(index)); } // src/app/shopping-list/shopping-edit/shopping-edit.component.ts constructor( private slService: ShoppingListService, private store: Store<fromShoppingList.AppState> ) {} ngOnInit() { this.subscription = this.store.select('shoppingList').subscribe(stateData => { if (stateData.editedIngredientIndex > -1) { this.editMode = true; this.editedItem = stateData.editedIngredient; this.slForm.setValue({ name: this.editedItem.name, amount: this.editedItem.amount }); } else { this.editMode = false; } }); }","title":"Managing More State via NgRx"},{"location":"ng/#removing-redundant-component-state-management","text":"We have index in our state, so instead of passing that as data, remove Final shopping list actions: // src/app/shopping-list/store/shopping-list.actions.ts import { Action } from '@ngrx/store'; import { Ingredient } from 'src/app/shared/ingredient.model'; export const ADD_INGREDIENT = 'ADD_INGREDIENT'; export const ADD_INGREDIENTS = 'ADD_INGREDIENTS'; export const UPDATE_INGREDIENT = 'UPDATE_INGREDIENT'; export const DELETE_INGREDIENT = 'DELETE_INGREDIENT'; export const START_EDIT = 'START_EDIT'; export const STOP_EDIT = 'STOP_EDIT'; export class AddIngredient implements Action { readonly type = ADD_INGREDIENT; // payload: Ingredient; // \"payload\" not a required name, can use any. only \"type\" property is required. constructor(public payload: Ingredient) {} } export class AddIngredients implements Action { readonly type = ADD_INGREDIENTS; constructor(public payload: Ingredient[]) {} } export class UpdateIngredient implements Action { readonly type = UPDATE_INGREDIENT; constructor(public payload: Ingredient) {} } export class DeleteIngredient implements Action { readonly type = DELETE_INGREDIENT; } export class StartEdit implements Action { readonly type = START_EDIT; constructor(public payload: number) {} } export class StopEdit implements Action { readonly type = STOP_EDIT; } export type ShoppingListActions = | AddIngredient | AddIngredients | UpdateIngredient | DeleteIngredient | StartEdit | StopEdit;","title":"Removing Redundant Component State Management"},{"location":"ng/#first-summary-clean-up","text":"Added NgRx to Application by including the StoreModule and calling forRoot forRoot then needs a map (basically an object) that tells NgRx which reducers we have in our application. All these reducers and the state they generate make up the NgRx Store. Reducer is just a function NgRx will automatically pass in the current state and an action it received, so it will execute the function whenever a new action is received. In reducer, switch case statement where we check action we got and depending on type we return new state. Data in, data out. All synchronous Return new object, new state Return state is what NgRx will in the end register for the shopping list slice of the overall AppState of the App Store it manages here Also added actions file where we defined unique identifiers, and then each is a complete object based on classes we defined. Each action needs to have a type property, where we do store string identifier for the action Might also have a payload, a property which can be set to attach data to that action. Needed for adding an ingredient Wasn't needed for deleting an ingredient Fair amount of overhead work involved Using service with subjects is more than fine alternative to using NgRx Although fairly easy to grow the state, once setup. Can get rid of shopping list service, delete file, remove imports & injections","title":"First Summary &amp; Clean Up"},{"location":"ng/#one-root-state","text":"Implement NgRx in Auth section Create src/app/auth/store/auth.reducer.ts Only state we use in other parts of app is User object, so it must be part of initial state // src/app/auth/store/auth.reducer.ts import { User } from '../user.model'; export interface State { user: User; } const initialState: State = { user: null }; export function authReducer(state = initialState, action) { return state; } Also initialize global store: StoreModule.forRoot({shoppingList: shoppingListReducer, auth: authReducer }), Move AppState out of shopping list reducer, since it's more general. Into global store folder: // src/app/store/app.reducer.ts import { ActionReducerMap } from '@ngrx/store'; import * as fromShoppingList from '../shopping-list/store/shopping-list.reducer'; import * as fromAuth from '../auth/store/auth.reducer'; export interface AppState { shoppingList: fromShoppingList.State; auth: fromAuth.State; } export const appReducer: ActionReducerMap<AppState> = { shoppingList: fromShoppingList.shoppingListReducer, auth: fromAuth.authReducer }; Now App module can simply point to the general App Reducer: // src/app/app.module.ts import * as fromApp from './store/app.reducer'; // ... @NgModule({ // ... imports: [ // ... StoreModule.forRoot(fromApp.appReducer), // ... ] // ... }) Change imports, etc in Recipe Service, Shopping List & Shopping Edit components","title":"One Root State"},{"location":"ng/#setting-up-auth-reducer-actions","text":"Dispatch actions in handle auth and logout, when creating new user object, wherever user next is called Create actions for Auth // src/app/auth/store/auth.actions.ts import { Action } from '@ngrx/store'; export const LOGIN = 'LOGIN'; export const LOGOUT = 'LOGOUT'; export class Login implements Action { readonly type = LOGIN; constructor( public payload: { email: string; userId: string; token: string; expirationDate: Date; } ) {} } export class Logout implements Action { readonly type = LOGOUT; } export type AuthActions = Login | Logout; Now modify auth reducer: // src/app/auth/store/auth.reducer.ts import { User } from '../user.model'; import * as AuthActions from './auth.actions'; export interface State { user: User; } const initialState: State = { user: null }; export function authReducer( state = initialState, action: AuthActions.AuthActions ) { switch (action.type) { case AuthActions.LOGIN: const user = new User( action.payload.email, action.payload.userId, action.payload.token, action.payload.expirationDate ); return { ...state, user }; case AuthActions.LOGOUT: return { ...state, user: null }; default: return state; } } Now, to dispatch the actions","title":"Setting up Auth Reducer &amp; Actions"},{"location":"ng/#dispatching-auth-actions","text":"// src/app/auth/auth.service.ts // in autoLogin: // this.user.next(loadedUser); this.store.dispatch( new AuthActions.Login({ email: loadedUser.email, userId: loadedUser.id, token: loadedUser.token, expirationDate: new Date(userData._tokenExpirationDate) }) ); // in logout: // this.user.next(null); this.store.dispatch(new AuthActions.Logout()); // in handleAuthentication: // this.user.next(user); this.store.dispatch(new AuthActions.Login({email, userId, token, expirationDate})); Now to make sure we use the auth state","title":"Dispatching Auth Actions"},{"location":"ng/#auth-finished-for-now","text":"Trick to find where subject is used, comment out in service Address auth interceptor // src/app/auth/auth-interceptor.service.ts return this.store.select('auth').pipe( take(1), map(authState => { return authState.user; }), exhaustMap(user => { // ... Address in auth guard and header component // src/app/auth/auth.guard.ts return this.store.select('auth').pipe( take(1), map(authState => { return authState.user; }), map(user => { // ... // src/app/header/header.component.ts ngOnInit() { this.userSub = this.store .select('auth') .pipe(map(authState => authState.user)) .subscribe(user => { this.isAuthenticated = !!user; }); }","title":"Auth Finished (for now...)"},{"location":"ng/#an-important-note-on-actions","text":"Initial action reaches all reducers. Any action you dispatch always reaches all reducers Always copy old state Always return state in default case Since action still reaches reducer Careful with identifiers that interfere, since actions reach all reducers. Prefixing 'ADD_INGREDIENT' -> '[Shopping List] Add Ingredient'","title":"An Important Note on Actions"},{"location":"ng/#exploring-ngrx-side-effects","text":"Side effects Parts in code where we run some logic that's not immediately important for updating current state Ex with Http Request Start signup process Signup success Signup error Local storage as a side effect Another NgRx package for dealing with side effects npm i --save @ngrx/effects","title":"Exploring NgRx Side Effects"},{"location":"ng/#defining-the-first-effect","text":"Observable for each dispatched action In AuthEffects, don't change state, but can execute any other code, then dispatch another action. Stream of dispatched actions Add effect as normal property Call pipe, not subscribe // src/app/auth/store/auth.effects.ts import { Actions, ofType } from '@ngrx/effects'; import * as AuthActions from './auth.actions'; export class AuthEffects { authLogin = this.actions$.pipe( ofType(AuthActions.LOGIN_START) ); constructor(private actions$: Actions) {} }","title":"Defining the First Effect"},{"location":"ng/#effects-error-handling","text":"Implement new action in auth actions: // src/app/auth/store/auth.actions.ts // ... export class LoginStart implements Action { readonly type = LOGIN_START; constructor(public payload: { email: string, password: string }) {} } Copy HTTP request and AuthResponseData interface into Auth effects Effect by default should return new action Errors handled on a different level // src/app/auth/store/auth.effects.ts import { Actions, ofType, Effect } from '@ngrx/effects'; import { switchMap, catchError, map } from 'rxjs/operators'; import { HttpClient } from '@angular/common/http'; import { environment } from '../../../environments/environment'; import { of } from 'rxjs'; import * as AuthActions from './auth.actions'; export interface AuthResponseData { kind: string; idToken: string; email: string; refreshToken: string; expiresIn: string; localId: string; registered?: boolean; } export class AuthEffects { @Effect() authLogin = this.actions$.pipe( ofType(AuthActions.LOGIN_START), switchMap((authData: AuthActions.LoginStart) => { return this.http .post<AuthResponseData>( 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + environment.firebaseAPIKey, { email: authData.payload.email, password: authData.payload.password, returnSecureToken: true } ).pipe(catchError(error => { // ... of(); }), map(resData => { of(); }) ); }), ); constructor(private actions$: Actions, private http: HttpClient) {} }","title":"Effects &amp; Error-Handling"},{"location":"ng/#login-via-ngrx-effects","text":"Need to return or add an object, and NgRx will automatically dispatch action Also must add to App Module import { EffectsModule } from '@ngrx/effects'; EffectsModule.forRoot([AuthEffects]), Add in auth component Old // authObs = this.authService.login(email, password); New this.store.dispatch(new AuthActions.LoginStart({email, password}));","title":"Login via NgRx Effects"},{"location":"ng/#managing-ui-state-in-ngrx","text":"Need to manage more of our authentication related state Implement a Login Fail action // src/app/auth/store/auth.actions.ts export const LOGIN_FAIL = '[Auth] Login Fail'; // ... export class LoginFail implements Action { readonly type = LOGIN_FAIL; constructor(public payload: string) {} } Modify and add error property to reducer states // src/app/auth/store/auth.reducer.ts export interface State { user: User; authError: string; loading: boolean; } const initialState: State = { user: null, authError: null, loading: false; }; export function authReducer( state = initialState, action: AuthActions.AuthActions ) { switch (action.type) { case AuthActions.LOGIN: const user = new User( action.payload.email, action.payload.userId, action.payload.token, action.payload.expirationDate ); return { ...state, authError: null, user, loading: false }; case AuthActions.LOGOUT: return { ...state, user: null }; case AuthActions.LOGIN_START: return { ...state, authError: null, loading: true }; case AuthActions.LOGIN_FAIL: return { ...state, user: null, authError: action.payload, loading: false }; default: return state; } } In auth component Comment out auth observer subscribe ngOnInit() { this.store.select('auth').subscribe(authState => { this.isLoading = authState.loading; this.error = authState.authError; }); }","title":"Managing UI State in NgRx"},{"location":"ng/#finishing-the-login-effect","text":"Adding Auth Success Effect // src/app/auth/store/auth.effects.ts // fix map in authLogin map(resData => { const expirationDate = new Date( new Date().getTime() + +resData.expiresIn * 1000 ); return new AuthActions.Login({ email: resData.email, userId: resData.localId, token: resData.idToken, expirationDate } ); }), // ... @Effect({dispatch: false}) // ^ let angular know this effect will not yield dispatchable action authSuccess = this.actions$.pipe( ofType(AuthActions.LOGIN), tap(() => { this.router.navigate(['/']); }) ); Handle error on login First add show alert dynamic component function to NgOnInit in auth component: if (this.error) { this.showErrorAlert(this.error); } Then modify catchError in auth effect: catchError(errorRes => { let errorMessage = 'An unknown error occurred!'; if (!errorRes.error || !errorRes.error.error) { // return throwError(errorMessage); return of(new AuthActions.LoginFail(errorMessage)); } switch (errorRes.error.error.message) { case 'EMAIL_EXISTS': errorMessage = 'This email exists already.'; break; case 'EMAIL_NOT_FOUND': errorMessage = 'This email does not exist'; break; case 'INVALID_PASSWORD': errorMessage = 'This password is not correct'; break; } return of(new AuthActions.LoginFail(errorMessage)); })","title":"Finishing the Login Effect"},{"location":"ng/#preparing-other-auth-actions","text":"Add effect for signing up Also changed Login/LoginFail to Authenticate/AuthenticateFail Signup start implementation // src/app/auth/store/auth.actions.ts export class SignupStart implements Action { readonly type = SIGNUP_START; constructor(public payload: { email: string; password: string }) {} } export type AuthActions = | AuthenticateSuccess | Logout | LoginStart | AuthenticateFail | SignupStart; // src/app/auth/store/auth.effects.ts @Effect() authSignup = this.actions$.pipe( ofType(AuthActions.SIGNUP_START) );","title":"Preparing Other Auth Actions"},{"location":"ng/#adding-signup","text":"// src/app/auth/store/auth.effects.ts const handleAuthentication = ( expiresIn: number, email: string, userId: string, token: string ) => { const expirationDate = new Date(new Date().getTime() + expiresIn * 1000); return new AuthActions.AuthenticateSuccess({ email, userId, token, expirationDate }); }; const handleError = (errorRes: any) => { let errorMessage = 'An unknown error occurred!'; if (!errorRes.error || !errorRes.error.error) { // return throwError(errorMessage); return of(new AuthActions.AuthenticateFail(errorMessage)); } switch (errorRes.error.error.message) { case 'EMAIL_EXISTS': errorMessage = 'This email exists already.'; break; case 'EMAIL_NOT_FOUND': errorMessage = 'This email does not exist'; break; case 'INVALID_PASSWORD': errorMessage = 'This password is not correct'; break; } return of(new AuthActions.AuthenticateFail(errorMessage)); }; @Injectable() export class AuthEffects { @Effect() authSignup = this.actions$.pipe( ofType(AuthActions.SIGNUP_START), switchMap((signupAction: AuthActions.SignupStart) => { return this.http .post<AuthResponseData>( 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + environment.firebaseAPIKey, { email: signupAction.payload.email, password: signupAction.payload.password, returnSecureToken: true } ) .pipe( map(resData => { return handleAuthentication( +resData.expiresIn, resData.email, resData.localId, resData.idToken ); }), catchError(errorRes => { return handleError(errorRes); }) ); }) ); // ... }","title":"Adding Signup"},{"location":"ng/#further-auth-effects","text":"Changing auth component to sync with NgRx states // src/app/auth/auth.component.ts onHandleError() { this.store.dispatch(new AuthActions.ClearError()); } ngOnDestroy() { if (this.closeSub) { this.closeSub.unsubscribe(); } if (this.storeSub){ this.storeSub.unsubscribe(); } }","title":"Further Auth Effects"},{"location":"ng/#adding-auto-login-with-ngrx","text":"Essentially moving logic out of service and into effects/actions @Effect() autoLogin = this.actions$.pipe( ofType(AuthActions.AUTO_LOGIN), map(() => { const userData: { email: string; id: string; _token: string; _tokenExpirationDate: string; } = JSON.parse(localStorage.getItem('userData')); if (!userData) { return { type: 'DUMMY' }; } const loadedUser = new User( userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate) ); if (loadedUser.token) { // this.user.next(loadedUser); return new AuthActions.AuthenticateSuccess({ email: loadedUser.email, userId: loadedUser.id, token: loadedUser.token, expirationDate: new Date(userData._tokenExpirationDate) }); } return { type: 'DUMMY' }; // const expirationDuration = // new Date(userData._tokenExpirationDate).getTime() - // new Date().getTime(); // this.autoLogout(expirationDuration); }) );","title":"Adding Auto-Login with NgRx"},{"location":"ng/#adding-auto-logout-ngrx","text":"AuthService set & clear logout timer: // src/app/auth/auth.service.ts setLogoutTimer(expirationDuration: number) { console.log(expirationDuration); this.tokenExpirationTimer = setTimeout(() => { this.store.dispatch(new AuthActions.Logout()); }, expirationDuration); } clearLogoutTimer() { if (this.tokenExpirationTimer) { clearTimeout(this.tokenExpirationTimer); this.tokenExpirationTimer = null; } }","title":"Adding Auto-Logout (NgRx)"},{"location":"ng/#finishing-auth-effects","text":"Full Auth Service: // src/app/auth/auth.service.ts import { Injectable } from '@angular/core'; import { Store } from '@ngrx/store'; import * as fromApp from '../store/app.reducer'; import * as AuthActions from '../auth/store/auth.actions'; @Injectable({ providedIn: 'root' }) export class AuthService { private tokenExpirationTimer: any; constructor( private store: Store<fromApp.AppState> ) {} setLogoutTimer(expirationDuration: number) { console.log(expirationDuration); this.tokenExpirationTimer = setTimeout(() => { this.store.dispatch(new AuthActions.Logout()); }, expirationDuration); } clearLogoutTimer() { if (this.tokenExpirationTimer) { clearTimeout(this.tokenExpirationTimer); this.tokenExpirationTimer = null; } } } Full Auth Actions: // src/app/auth/store/auth.actions.ts import { Action } from '@ngrx/store'; export const LOGIN_START = '[Auth] Login Start'; export const AUTHENTICATE_SUCCESS = '[Auth] Login'; export const AUTHENTICATE_FAIL = '[Auth] Login Fail'; export const SIGNUP_START = '[Auth] Signup Start'; export const CLEAR_ERROR = '[Auth] Clear Error'; export const AUTO_LOGIN = '[Auth] Auto Login'; export const LOGOUT = '[Auth] Logout'; export class AuthenticateSuccess implements Action { readonly type = AUTHENTICATE_SUCCESS; constructor( public payload: { email: string; userId: string; token: string; expirationDate: Date; } ) {} } export class Logout implements Action { readonly type = LOGOUT; } export class LoginStart implements Action { readonly type = LOGIN_START; constructor(public payload: { email: string; password: string }) {} } export class AuthenticateFail implements Action { readonly type = AUTHENTICATE_FAIL; constructor(public payload: string) {} } export class SignupStart implements Action { readonly type = SIGNUP_START; constructor(public payload: { email: string; password: string }) {} } export class ClearError implements Action { readonly type = CLEAR_ERROR; } export class AutoLogin implements Action { readonly type = AUTO_LOGIN; } export type AuthActions = | AuthenticateSuccess | Logout | LoginStart | AuthenticateFail | SignupStart | ClearError | AutoLogin; Full Auth Effects: // src/app/auth/store/auth.effects.ts import { Injectable } from '@angular/core'; import { Actions, ofType, Effect } from '@ngrx/effects'; import { switchMap, catchError, map, tap } from 'rxjs/operators'; import { HttpClient } from '@angular/common/http'; import { environment } from '../../../environments/environment'; import { of } from 'rxjs'; import { Router } from '@angular/router'; import * as AuthActions from './auth.actions'; import { User } from '../user.model'; import { AuthService } from '../auth.service'; export interface AuthResponseData { kind: string; idToken: string; email: string; refreshToken: string; expiresIn: string; localId: string; registered?: boolean; } const handleAuthentication = ( expiresIn: number, email: string, userId: string, token: string ) => { const expirationDate = new Date(new Date().getTime() + expiresIn * 1000); const user = new User(email, userId, token, expirationDate); localStorage.setItem('userData', JSON.stringify(user)); return new AuthActions.AuthenticateSuccess({ email, userId, token, expirationDate }); }; const handleError = (errorRes: any) => { let errorMessage = 'An unknown error occurred!'; if (!errorRes.error || !errorRes.error.error) { // return throwError(errorMessage); return of(new AuthActions.AuthenticateFail(errorMessage)); } switch (errorRes.error.error.message) { case 'EMAIL_EXISTS': errorMessage = 'This email exists already.'; break; case 'EMAIL_NOT_FOUND': errorMessage = 'This email does not exist'; break; case 'INVALID_PASSWORD': errorMessage = 'This password is not correct'; break; } return of(new AuthActions.AuthenticateFail(errorMessage)); }; @Injectable() export class AuthEffects { @Effect() authSignup = this.actions$.pipe( ofType(AuthActions.SIGNUP_START), switchMap((signupAction: AuthActions.SignupStart) => { return this.http .post<AuthResponseData>( 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + environment.firebaseAPIKey, { email: signupAction.payload.email, password: signupAction.payload.password, returnSecureToken: true } ) .pipe( tap(resData => { this.authService.setLogoutTimer(+resData.expiresIn * 1000); }), map(resData => { return handleAuthentication( +resData.expiresIn, resData.email, resData.localId, resData.idToken ); }), catchError(errorRes => { return handleError(errorRes); }) ); }) ); @Effect() authLogin = this.actions$.pipe( ofType(AuthActions.LOGIN_START), switchMap((authData: AuthActions.LoginStart) => { return this.http .post<AuthResponseData>( 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + environment.firebaseAPIKey, { email: authData.payload.email, password: authData.payload.password, returnSecureToken: true } ) .pipe( tap(resData => { this.authService.setLogoutTimer(+resData.expiresIn * 1000); }), map(resData => { return handleAuthentication( +resData.expiresIn, resData.email, resData.localId, resData.idToken ); }), catchError(errorRes => { return handleError(errorRes); }) ); }) ); @Effect({ dispatch: false }) // ^ let angular know this effect will not yield dispatchable action authRedirect = this.actions$.pipe( ofType(AuthActions.AUTHENTICATE_SUCCESS), tap(() => { this.router.navigate(['/']); }) ); @Effect() autoLogin = this.actions$.pipe( ofType(AuthActions.AUTO_LOGIN), map(() => { const userData: { email: string; id: string; _token: string; _tokenExpirationDate: string; } = JSON.parse(localStorage.getItem('userData')); if (!userData) { return { type: 'DUMMY' }; } const loadedUser = new User( userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate) ); if (loadedUser.token) { // this.user.next(loadedUser); const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime(); this.authService.setLogoutTimer(expirationDuration); return new AuthActions.AuthenticateSuccess({ email: loadedUser.email, userId: loadedUser.id, token: loadedUser.token, expirationDate: new Date(userData._tokenExpirationDate) }); } return { type: 'DUMMY' }; // const expirationDuration = // new Date(userData._tokenExpirationDate).getTime() - // new Date().getTime(); // this.autoLogout(expirationDuration); }) ); @Effect({ dispatch: false }) authLogout = this.actions$.pipe( ofType(AuthActions.LOGOUT), tap(() => { this.authService.clearLogoutTimer(); localStorage.removeItem('userData'); this.router.navigate(['/auth']); }) ); constructor( private actions$: Actions, private http: HttpClient, private router: Router, private authService: AuthService ) {} } Full Auth Reducer: // src/app/auth/store/auth.reducer.ts import { User } from '../user.model'; import * as AuthActions from './auth.actions'; export interface State { user: User; authError: string; loading: boolean; } const initialState: State = { user: null, authError: null, loading: false }; export function authReducer( state = initialState, action: AuthActions.AuthActions ) { switch (action.type) { case AuthActions.AUTHENTICATE_SUCCESS: const user = new User( action.payload.email, action.payload.userId, action.payload.token, action.payload.expirationDate ); return { ...state, authError: null, user, loading: false }; case AuthActions.LOGOUT: return { ...state, user: null }; case AuthActions.LOGIN_START: case AuthActions.SIGNUP_START: return { ...state, authError: null, loading: true }; case AuthActions.AUTHENTICATE_FAIL: return { ...state, user: null, authError: action.payload, loading: false }; case AuthActions.CLEAR_ERROR: return { ...state, authError: null } default: return state; } }","title":"Finishing Auth Effects"},{"location":"ng/#using-the-store-devtools","text":"Redux Devtools for Chrome Chrome Web Store NgRx Devtools npm i --save-dev @ngrx/store-devtools Import into App Module import { StoreDevtoolsModule } from '@ngrx/store-devtools'; // ... StoreDevtoolsModule.instrument({ logOnly: environment.production }),","title":"Using the Store Devtools"},{"location":"ng/#the-router-store","text":"npm i --save @ngrx/router-store import { StoreRouterConnectingModule } from '@ngrx/router-store'; // ... StoreRouterConnectingModule.forRoot(),","title":"The Router Store"},{"location":"ng/#getting-started-with-ngrx-for-recipes","text":"src/app/recipes/store/ Create files recipe.reducer.ts recipe.actions.ts recipe.effects.ts Add to App Reducer Initial Recipe Reducer import { Recipe } from '../recipe.model'; import * as RecipeActions from './recipe.actions'; export interface State { recipes: Recipe[]; } const initialState: State = { recipes: [] }; export function recipeReducer( state = initialState, action: RecipeActions.RecipesActions ) { switch (action.type) { case RecipeActions.SET_RECIPES: return { ...state, recipes: [...action.payload] }; default: return state; } } Initial Recipe Actions import { Action } from '@ngrx/store'; import { Recipe } from '../recipe.model'; export const SET_RECIPES = '[Recipes] Set Recipes'; export class SetRecipes implements Action { readonly type = SET_RECIPES; constructor(public payload: Recipe[]) {} } export type RecipesActions = SetRecipes; Change in recipe-list component & data-storage service // src/app/recipes/recipe-list/recipe-list.component.ts ngOnInit() { this.subscription = this.store .select('recipes') .pipe(map(recipesState => recipesState.recipes)) .subscribe((recipes: Recipe[]) => { this.recipes = recipes; }); } // src/app/shared/data-storage.service.ts fetchRecipes() { // ... tap(recipes => { // this.recipeService.setRecipes(recipes); this.store.dispatch(new RecipesActions.SetRecipes(recipes)); }) ); }","title":"Getting Started with NgRx for Recipes"},{"location":"ng/#fetching-recipe-detail-data","text":"Recipe detail/edit still using Recipes service Will need to modify recipe-edit & recipe-detail to use NgRx Store instead of Recipes Service In Recipe-Detail: // src/app/recipes/recipe-detail/recipe-detail.component.ts ngOnInit() { this.route.params .pipe( map(params => { return +params['id']; }), switchMap(id => { this.id = id; return this.store.select('recipes'); }), map(recipesState => { return recipesState.recipes.find((recipe, index) => { return index === this.id; }); }) ) .subscribe(recipe => { this.recipe = recipe; }); } In Recipe-Edit: // src/app/recipes/recipe-detail/recipe-detail.component.ts // in initForm(): // const recipe = this.recipeService.getRecipe(this.id); this.store .select('recipes') .pipe( map(recipeState => { return recipeState.recipes.find((recipe, index) => { return index === this.id; }); }) ) .subscribe(recipe => { recipeName = recipe.name; recipeImagePath = recipe.imagePath; recipeDescription = recipe.description; if (recipe['ingredients']) { for (let ingredient of recipe.ingredients) { recipeIngredients.push( new FormGroup({ name: new FormControl(ingredient.name, Validators.required), amount: new FormControl(ingredient.amount, [ Validators.required, Validators.pattern(/^[1-9]+[0-9]*$/) ]) }) ); } } });","title":"Fetching Recipe Detail Data"},{"location":"ng/#fetching-recipes-using-the-resolver","text":"Manage getting data through effects, notably in recipes-resolver and header component Initial Recipe Effects: // src/app/recipes/store/recipe.effects.ts import { Actions, Effect, ofType } from '@ngrx/effects'; import { HttpClient } from '@angular/common/http'; import { switchMap, map } from 'rxjs/operators'; import * as RecipesActions from './recipe.actions'; import { Recipe } from '../recipe.model'; import { Injectable } from '@angular/core'; @Injectable() export class RecipeEffects { @Effect() fetchRecipes = this.actions$.pipe( ofType(RecipesActions.FETCH_RECIPES), switchMap(fetchAction => { return this.http.get<Recipe[]>( 'https://ng-learn-practice.firebaseio.com/recipes.json' ); }), map(recipes => { return recipes.map(recipe => { return { ...recipe, ingredients: recipe.ingredients ? recipe.ingredients : [] }; }); }), map(recipes => { return new RecipesActions.SetRecipes(recipes); }), ); constructor(private actions$: Actions, private http: HttpClient) {} } Import recipe effects: // src/app/app.module.ts import { RecipeEffects } from './recipes/store/recipe.effects'; // ... @NgModule({ // ... imports: [ // ... EffectsModule.forRoot([AuthEffects, RecipeEffects]), // ... ], // ... }) Implement Recipe Action for Fetching Recipes: // src/app/recipes/store/recipe.actions.ts export const FETCH_RECIPES = '[Recipes] Fetch Recipes'; // ... export class FetchRecipes implements Action { readonly type = FETCH_RECIPES; } Dispatch fetch recipes in data-storage service, or where it's called, which is in header // src/app/header/header.component.ts onFetchData() { // this.dataStorageService.fetchRecipes().subscribe(); this.store.dispatch(new RecipesActions.FetchRecipes()); } Modify Resolver: import { Injectable } from '@angular/core'; import { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router'; import { Store } from '@ngrx/store'; import { Actions, ofType } from '@ngrx/effects'; import { take } from 'rxjs/operators'; import { Recipe } from './recipe.model'; import * as fromApp from '../store/app.reducer'; import * as RecipesActions from '../recipes/store/recipe.actions'; @Injectable({ providedIn: 'root' }) export class RecipesResolverService implements Resolve<Recipe[]> { constructor( private store: Store<fromApp.AppState>, private actions$: Actions ) {} resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) { this.store.dispatch(new RecipesActions.FetchRecipes()); return this.actions$.pipe( ofType(RecipesActions.SET_RECIPES), take(1) ); } } On recipe selected and reload page, sent back to /recipes. Will fix this issue next.","title":"Fetching Recipes Using the Resolver"},{"location":"ng/#fixing-the-auth-redirect","text":"Actually related to Auth Effects and redirect there Add redirect boolean property to Auth Success action // src/app/auth/store/auth.actions.ts export class AuthenticateSuccess implements Action { readonly type = AUTHENTICATE_SUCCESS; constructor( public payload: { email: string; userId: string; token: string; expirationDate: Date; redirect: boolean; } ) {} } Give true value on handleAuthentication effect, false on autologin If condition in authRedirect: @Effect({ dispatch: false }) // ^ let angular know this effect will not yield dispatchable action authRedirect = this.actions$.pipe( ofType(AuthActions.AUTHENTICATE_SUCCESS), tap((authSuccessAction: AuthActions.AuthenticateSuccess) => { if (authSuccessAction.payload.redirect) { this.router.navigate(['/']); } }) );","title":"Fixing the Auth Redirect"},{"location":"ng/#update-delete-and-add-recipes","text":"Modify recipe resolver resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) { return this.store.select('recipes').pipe( take(1), map(recipesState => { return recipesState.recipes; }), switchMap(recipes => { if (recipes.length === 0) { this.store.dispatch(new RecipesActions.FetchRecipes()); return this.actions$.pipe( ofType(RecipesActions.SET_RECIPES), take(1) ); } else { return of(recipes); } }) ); } Add actions and cases for each to reducer: // src/app/recipes/store/recipe.actions.ts export const ADD_RECIPE = '[Recipe] Add Recipe'; export const UPDATE_RECIPE = '[Recipe] Update Recipe'; export const DELETE_RECIPE = '[Recipe] Delete Recipe'; // ... export class AddRecipe implements Action { readonly type = ADD_RECIPE; constructor(public payload: Recipe) {} } export class UpdateRecipe implements Action { readonly type = UPDATE_RECIPE; constructor(public payload: { index: number; newRecipe: Recipe }) {} } export class DeleteRecipe implements Action { readonly type = DELETE_RECIPE; constructor(public payload: number) {} } export type RecipesActions = | SetRecipes | FetchRecipes | AddRecipe | UpdateRecipe | DeleteRecipe; // src/app/recipes/store/recipe.reducer.ts case RecipeActions.ADD_RECIPE: return { ...state, recipes: [...state.recipes, action.payload] }; case RecipeActions.UPDATE_RECIPE: const updatedRecipe = { ...state.recipes[action.payload.index], ...action.payload.newRecipe }; const updatedRecipes = [...state.recipes]; updatedRecipes[action.payload.index] = updatedRecipe; return { ...state, recipes: updatedRecipes }; case RecipeActions.DELETE_RECIPE: return { ...state, recipes: state.recipes.filter((recipe, index) => { return index !== action.payload; }) }; Need to modify where actions occur. For delete, in recipe-detail component: // src/app/recipes/recipe-detail/recipe-detail.component.ts onDeleteRecipe() { // this.recipeService.deleteRecipe(this.id); this.store.dispatch(new RecipesActions.DeleteRecipe(this.id)); this.router.navigate(['/recipes']); } And modify recipe-edit for update and add // src/app/recipes/recipe-edit/recipe-edit.component.ts // ... onSubmit() { if (this.editMode) { // this.recipeService.updateRecipe(this.id, this.recipeForm.value); this.store.dispatch( new RecipesActions.UpdateRecipe({ index: this.id, newRecipe: this.recipeForm.value }) ); } else { // this.recipeService.addRecipe(this.recipeForm.value); this.store.dispatch(new RecipesActions.AddRecipe(this.recipeForm.value)); } this.onCancel(); } // ... // must also implement unsubscribe, or get error on delete after cancelling edit: ngOnDestroy() { if (this.storeSub){ this.storeSub.unsubscribe(); } }","title":"Update, Delete, and Add Recipes"},{"location":"ng/#storing-recipes-via-effects","text":"Implement the Action // src/app/recipes/store/recipe.actions.ts export const STORE_RECIPES = '[Recipe] Store Recipes'; // ... export class StoreRecipes implements Action { readonly type = STORE_RECIPES; } Add the effect // src/app/recipes/store/recipe.effects.ts @Effect() storeRecipes = this.actions$.pipe( ofType(RecipesActions.STORE_RECIPES), withLatestFrom(this.store.select('recipes')), switchMap(([actionData, recipesState]) => { return this.http.put( 'https://ng-learn-practice.firebaseio.com/recipes.json', recipesState.recipes ); }) ); Modify header component // src/app/header/header.component.ts onSaveData() { // this.dataStorageService.storeRecipes(); this.store.dispatch(new RecipesActions.StoreRecipes()); }","title":"Storing Recipes via Effects"},{"location":"ng/#cleanup-work","text":"Can delete recipe service file Fix recipe edit and recipe detail, remove extra non-used or nonexistant imports","title":"Cleanup Work"},{"location":"ng/#wrap-up","text":"Thorough look at NgRx Services and subjects are fine on their own State management may be worth the work to setup on a project that is much larger in scale. Streamlined approach NgRx Documentation","title":"Wrap Up"},{"location":"powerBI/","text":"Power BI Power BI Desktop Attached Project Files Data source settings Power BI Desktop Workflow Data Preparation Query Editor Data Modeling Data View Relationship View Data Visualization Report View Data Model Interface Query Editor Interface Query Editor Connecting Power BI Desktop to Source Files Transform Data New Source Keeping & Removing Rows Remove Top Rows Table Settings Remove Alternate Rows Patterns Keep Range of Rows Use First Row as Headers Working with Filters Search will exclude those not listed Remove Empty Rows Can save without applying queries/apply later Appending Queries Column amount and names must be equal in initial queries Working with Columns Choose Columns Replacing Values Formatting Data & Handling Formatting Errors Detect Data Type Error Query Group, fixed with replace values Pivoting and Unpivoting Attribute-Value pairing Unpivoting - Attribute(Name)-Value become separate columns Pivoting - Separate Columns become Attribute(Name)-Value Pairs Splitting Columns By number of characters, delimiter, positions Delimiter is removed Creating Groups and Cleaning Up Group by folder Reorder columns, sorting by column Star Schema Dim Tables - Multiple Products, Time, Customers, Sales Point Fact Table Sales IDs from each Dim Table Using Star Schema in Project Population-Combined to Fact Population table DIM Region DIM Age Query Duplicates vs References Reference depends on Source Duplicate copies initial query Creating DIM-Region Table and Removing Duplicates Reference of population-combined Creating Tables Manually Edit Source Merging Queries Column in common Join Kind Common ID Outer Join Left, Full, Right Anti Join Left, Right Not found Inner Join Found in both Merging Queries Applied Inner Join, select Region Name only in expanded, don't use prefix DIM-Age Table Age group from population-combined Index column from 1 Understanding \"Extract\" Different in Transform and Add Column ribbons Conditional Columns If-Else chain Creating FACT-Table Reference of population-combined utilizing age and country IDs instead Basic Math Operations Transform (Number Column) Performance Optimization Enable Load (right-click query) Choosing what is loaded in Data Model Data Model: Data & Relationship View Understanding Relationships Data Modeling Data View Relationship View Cardinality: Many-to-One & One-To-One One-to-Many (1:*) Many-to-One (*:1) Each Customer unique Each Customer can have multiple Orders One-to-One Passport to Person Cross Filter Direction & Many-to-Many Connector table, need two to communicate Cross filter direction to Both Feed info both ways Understanding Active Properties Deactivate relationship New relationships will be inactive by default if one already exists M-Language vs DAX (Data Analysis Expressions) One Tool - Two Languages M Description Power Query Formula Language Data Transformation Where to Apply Data Preparation Before Data Model DAX Description Data Analysis Expression Language Analytical Data Calculations Comparable to Excel Functions Where to Apply Create Insights In Data Model M vs DAX - A Practical Example M is logic behind query editor Advanced Editor Custom columns DAX Data view > Table Tools > New column Using default functions such as Concatenate Nesting functions within another DAX Basics DAX Reference Syntax: Formula = ... Data Types: String, Number Operators: +, - Functions: CONCATENATE() Advanced DAX Statements Define, Evaluate, Order By, VAR = DAX Queries DAX Syntax - Core Rules Total Population = SUM(FactPopulation [Population Count]) Formula Name Capital Letters Space SUM is DAX function, parenthesus Table Reference Capital Letters No Space Column Reference Square Brackets (always required) Capital Letters No Space Supported DAX Data Types String (Text) Whole & Decimal Numbers Boolean Date/Time Currency Blank (NA) DAX Operators Arithmetic +, -, *, /, ^ Comparison =, ==, >, <, >=, <=, <> (not equal) Logical && || IN (multiple conditions) Text concat. & DAX Core Functions Text CONCATENATE(\"X, \"Y\") Information ISNUMBER(2020) (true) Logical IF([Population]>100000, \"Big\", \"Small\") Math ROUND(352.867,2) Statistical AVERAGE(Dim-Fact[Population]) Filter FILTER(Dim-Fact[Year]=2020) Date & Time CALENDAR(DATE(2000,01,01),DATE(2020,12,31)) CALENDAR Function Calendar = CALENDAR(DATE(1990,01,01),DATE(2020,12,31)) DateQuarter = [Date].Quarter Applying DAX Basics TotalRevenue = [RevenueProductA]+[RevenueProductB] ProfitMargin = 1-(DIVIDE([TotalCost],[TotalRevenue],0)) IF and RELATED DayRating = IF([ProfitMargin]>0.65,\"Good Day\",\"Bad Day\") RELATED has to have relationship TotalUnitsSold = RELATED(UnitsSold[UnitsSoldProductA])+RELATED(UnitsSold[UnitsSoldProductB]) Calculated Columns vs Measures Calculated Column Perform an operation that generates results for each row of your table. Measure Return a single result of a calculation or an aggregated value (e.g. Averages) First Measure TotalPopulation = SUM([Population]) AveragePopulation = AVERAGE([Population]) CALCULATE & FILTER FILTER = (<table>, <filter>) CALCULATE = (<expression>, <filter1>, <filter2>) Applying CALCULATE and FILTER in Measures FemalePopulation = FILTER('FACT-Population',[Gender]=\"Female\") Need aggregation for filter FemalePopulationFilter = CALCULATE(SUM([Population]),FILTER('FACT-Population',[Gender]=\"Female\")) FemalePopulation = CALCULATE(SUM([Population]),'FACT-Population'[Gender]=\"Female\",'FACT-Population'[Year]=2020) Creating Measures with Measures MalePopulationFilter = CALCULATE(SUM([Population]),FILTER('FACT-Population',[Gender]=\"Male\")) Remove year filter from FemalePopulationFilter ShareFemalePop = [FemalePopulationFilter]/[TotalPopulation] Data Category Country, Continent, etc Creating Visuals in the Report View Basic Visual Concepts Value area Population Legend Country Specific data Tooltip Age category Visuals & Reports Data/Drill (discussed later) Format Align, etc View tab Positioning, etc Visualizations column Has different charts, etc Elements Text, buttons, images Creating First Visuals Fields column, areas Line chart Population by Year, Region Stacked column chart Population by Region Tooltips & Interactions Add further info Hovering over charts for details Add ShareFemalePop percentage calculation to tool-tip Selecting similar filter, axis affects all charts Format > Edit Interactions interactions can specify how visuals interact with one another with filtering, highlights Filter specifics on top of visual Hierarchies & Drill Mode Multiple axis Sequence of different detail levels for data Right click > create hierarchy Drill down specific parts of hierarchy Activate/Deactivate Data Colors & Conditional Formatting Format > Data colors Different depending on chart Conditional, based on sum (f(x) button) Formatting Report Pages General formatting options when no visuals selected Formatting Visuals General formatting options when a visual(s) selected Format painter to apply formatting from one to another Report Themes View > Themes The Slicer Using FACT-Population Year Affects other visuals Default Summarization & Sorting Arrow by value Population, Sum by default Sort x-axis Treemaps & Tables Another Slicer by Region Name Another Slicer by Age-Category Treemap Population by Country (Details) Syncing Slicers Prompt on copy View > Sync Slicers Filter Types (Visual, Page & Report) Filter column with no visual selected Report level > Filter by year Page level > Filter by Region Visual level > Top N by Population Working with (Multi) Row Cards Cards with multiple rows, applying filters, more data Combined Visuals & Waterfalls Secondary values; adds second y-axis Can tailor in formatting Combine line and column charts Waterfall, category, breakdown, values Custom Visuals Import, AppSource Taking Project to the Cloud with Power BI Pro (Service) Power BI Pro Single User scenario Publish to access from other devices Organization Publish to Power BI pro Accessible by others using workspaces Service vs. Pro vs. Premium Power BI Pro Interface Navigation, settings, Apps, Get Data Workspaces Publish report, datasets, dashboard to your workspace and can share. Connecting Power BI Pro & Power BI Desktop Sign in to publish Get data from local file Report and Dataset imported Datasets Different in course, similar to Power BI Desktop? Reports Creation additional Can create new pbix file based on report created in Power BI Pro Dashboards Create tiles Pin tiles to dashboard My Workspace Lineage view Quick Insights Refreshing Data with Gateways Personal Gateway for local files Standard Gateway for server data Data source settings Setup gateway Refresh and scheduled refresh Sharing Data From My Workspace Can't share datasets Share link, to email Access menu Read access Collaboration Workspaces Create New Workspace Settings, Access menus in Workspace Workspaces vs Apps vs Content Packs Apps -> Content Packs Share Dataset, Report, Dashboard Publishing an App Premade apps","title":"Power BI"},{"location":"powerBI/#power-bi","text":"","title":"Power BI"},{"location":"powerBI/#power-bi-desktop","text":"Attached Project Files Data source settings Power BI Desktop Workflow Data Preparation Query Editor Data Modeling Data View Relationship View Data Visualization Report View Data Model Interface Query Editor Interface","title":"Power BI Desktop"},{"location":"powerBI/#query-editor","text":"Connecting Power BI Desktop to Source Files Transform Data New Source Keeping & Removing Rows Remove Top Rows Table Settings Remove Alternate Rows Patterns Keep Range of Rows Use First Row as Headers Working with Filters Search will exclude those not listed Remove Empty Rows Can save without applying queries/apply later Appending Queries Column amount and names must be equal in initial queries Working with Columns Choose Columns Replacing Values Formatting Data & Handling Formatting Errors Detect Data Type Error Query Group, fixed with replace values Pivoting and Unpivoting Attribute-Value pairing Unpivoting - Attribute(Name)-Value become separate columns Pivoting - Separate Columns become Attribute(Name)-Value Pairs Splitting Columns By number of characters, delimiter, positions Delimiter is removed Creating Groups and Cleaning Up Group by folder Reorder columns, sorting by column Star Schema Dim Tables - Multiple Products, Time, Customers, Sales Point Fact Table Sales IDs from each Dim Table Using Star Schema in Project Population-Combined to Fact Population table DIM Region DIM Age Query Duplicates vs References Reference depends on Source Duplicate copies initial query Creating DIM-Region Table and Removing Duplicates Reference of population-combined Creating Tables Manually Edit Source Merging Queries Column in common Join Kind Common ID Outer Join Left, Full, Right Anti Join Left, Right Not found Inner Join Found in both Merging Queries Applied Inner Join, select Region Name only in expanded, don't use prefix DIM-Age Table Age group from population-combined Index column from 1 Understanding \"Extract\" Different in Transform and Add Column ribbons Conditional Columns If-Else chain Creating FACT-Table Reference of population-combined utilizing age and country IDs instead Basic Math Operations Transform (Number Column) Performance Optimization Enable Load (right-click query) Choosing what is loaded in Data Model","title":"Query Editor"},{"location":"powerBI/#data-model-data-relationship-view","text":"Understanding Relationships Data Modeling Data View Relationship View Cardinality: Many-to-One & One-To-One One-to-Many (1:*) Many-to-One (*:1) Each Customer unique Each Customer can have multiple Orders One-to-One Passport to Person Cross Filter Direction & Many-to-Many Connector table, need two to communicate Cross filter direction to Both Feed info both ways Understanding Active Properties Deactivate relationship New relationships will be inactive by default if one already exists M-Language vs DAX (Data Analysis Expressions) One Tool - Two Languages M Description Power Query Formula Language Data Transformation Where to Apply Data Preparation Before Data Model DAX Description Data Analysis Expression Language Analytical Data Calculations Comparable to Excel Functions Where to Apply Create Insights In Data Model M vs DAX - A Practical Example M is logic behind query editor Advanced Editor Custom columns DAX Data view > Table Tools > New column Using default functions such as Concatenate Nesting functions within another DAX Basics DAX Reference Syntax: Formula = ... Data Types: String, Number Operators: +, - Functions: CONCATENATE() Advanced DAX Statements Define, Evaluate, Order By, VAR = DAX Queries DAX Syntax - Core Rules Total Population = SUM(FactPopulation [Population Count]) Formula Name Capital Letters Space SUM is DAX function, parenthesus Table Reference Capital Letters No Space Column Reference Square Brackets (always required) Capital Letters No Space Supported DAX Data Types String (Text) Whole & Decimal Numbers Boolean Date/Time Currency Blank (NA) DAX Operators Arithmetic +, -, *, /, ^ Comparison =, ==, >, <, >=, <=, <> (not equal) Logical && || IN (multiple conditions) Text concat. & DAX Core Functions Text CONCATENATE(\"X, \"Y\") Information ISNUMBER(2020) (true) Logical IF([Population]>100000, \"Big\", \"Small\") Math ROUND(352.867,2) Statistical AVERAGE(Dim-Fact[Population]) Filter FILTER(Dim-Fact[Year]=2020) Date & Time CALENDAR(DATE(2000,01,01),DATE(2020,12,31)) CALENDAR Function Calendar = CALENDAR(DATE(1990,01,01),DATE(2020,12,31)) DateQuarter = [Date].Quarter Applying DAX Basics TotalRevenue = [RevenueProductA]+[RevenueProductB] ProfitMargin = 1-(DIVIDE([TotalCost],[TotalRevenue],0)) IF and RELATED DayRating = IF([ProfitMargin]>0.65,\"Good Day\",\"Bad Day\") RELATED has to have relationship TotalUnitsSold = RELATED(UnitsSold[UnitsSoldProductA])+RELATED(UnitsSold[UnitsSoldProductB]) Calculated Columns vs Measures Calculated Column Perform an operation that generates results for each row of your table. Measure Return a single result of a calculation or an aggregated value (e.g. Averages) First Measure TotalPopulation = SUM([Population]) AveragePopulation = AVERAGE([Population]) CALCULATE & FILTER FILTER = (<table>, <filter>) CALCULATE = (<expression>, <filter1>, <filter2>) Applying CALCULATE and FILTER in Measures FemalePopulation = FILTER('FACT-Population',[Gender]=\"Female\") Need aggregation for filter FemalePopulationFilter = CALCULATE(SUM([Population]),FILTER('FACT-Population',[Gender]=\"Female\")) FemalePopulation = CALCULATE(SUM([Population]),'FACT-Population'[Gender]=\"Female\",'FACT-Population'[Year]=2020) Creating Measures with Measures MalePopulationFilter = CALCULATE(SUM([Population]),FILTER('FACT-Population',[Gender]=\"Male\")) Remove year filter from FemalePopulationFilter ShareFemalePop = [FemalePopulationFilter]/[TotalPopulation] Data Category Country, Continent, etc","title":"Data Model: Data &amp; Relationship View"},{"location":"powerBI/#creating-visuals-in-the-report-view","text":"Basic Visual Concepts Value area Population Legend Country Specific data Tooltip Age category Visuals & Reports Data/Drill (discussed later) Format Align, etc View tab Positioning, etc Visualizations column Has different charts, etc Elements Text, buttons, images Creating First Visuals Fields column, areas Line chart Population by Year, Region Stacked column chart Population by Region Tooltips & Interactions Add further info Hovering over charts for details Add ShareFemalePop percentage calculation to tool-tip Selecting similar filter, axis affects all charts Format > Edit Interactions interactions can specify how visuals interact with one another with filtering, highlights Filter specifics on top of visual Hierarchies & Drill Mode Multiple axis Sequence of different detail levels for data Right click > create hierarchy Drill down specific parts of hierarchy Activate/Deactivate Data Colors & Conditional Formatting Format > Data colors Different depending on chart Conditional, based on sum (f(x) button) Formatting Report Pages General formatting options when no visuals selected Formatting Visuals General formatting options when a visual(s) selected Format painter to apply formatting from one to another Report Themes View > Themes The Slicer Using FACT-Population Year Affects other visuals Default Summarization & Sorting Arrow by value Population, Sum by default Sort x-axis Treemaps & Tables Another Slicer by Region Name Another Slicer by Age-Category Treemap Population by Country (Details) Syncing Slicers Prompt on copy View > Sync Slicers Filter Types (Visual, Page & Report) Filter column with no visual selected Report level > Filter by year Page level > Filter by Region Visual level > Top N by Population Working with (Multi) Row Cards Cards with multiple rows, applying filters, more data Combined Visuals & Waterfalls Secondary values; adds second y-axis Can tailor in formatting Combine line and column charts Waterfall, category, breakdown, values Custom Visuals Import, AppSource","title":"Creating Visuals in the Report View"},{"location":"powerBI/#taking-project-to-the-cloud-with-power-bi-pro-service","text":"Power BI Pro Single User scenario Publish to access from other devices Organization Publish to Power BI pro Accessible by others using workspaces Service vs. Pro vs. Premium Power BI Pro Interface Navigation, settings, Apps, Get Data Workspaces Publish report, datasets, dashboard to your workspace and can share. Connecting Power BI Pro & Power BI Desktop Sign in to publish Get data from local file Report and Dataset imported Datasets Different in course, similar to Power BI Desktop? Reports Creation additional Can create new pbix file based on report created in Power BI Pro Dashboards Create tiles Pin tiles to dashboard My Workspace Lineage view Quick Insights Refreshing Data with Gateways Personal Gateway for local files Standard Gateway for server data Data source settings Setup gateway Refresh and scheduled refresh Sharing Data From My Workspace Can't share datasets Share link, to email Access menu Read access Collaboration Workspaces Create New Workspace Settings, Access menus in Workspace Workspaces vs Apps vs Content Packs Apps -> Content Packs Share Dataset, Report, Dashboard Publishing an App Premade apps","title":"Taking Project to the Cloud with Power BI Pro (Service)"},{"location":"react/","text":"React - The Complete Guide Notes based on Udemy Course React - The Complete Guide (incl Hooks, React Router, Redux) 1. Getting Started Building elements with reusable components. Utilizes JSX Writing Our First React Code function Person(props) { return ( <div className=\"person\"> <h1>{props.name}</h1> <p>Your Age: {props.age}</p> </div> ); } ReactDOM.render(<Person name=\"John\" age=\"26\" />, document.querySelector('#p1')); ReactDOM.render(<Person name=\"Sam\" age=\"28\" />, document.querySelector('#p2')); Turn into: function Person(props) { return ( <div className=\"person\"> <h1>{props.name}</h1> <p>Your Age: {props.age}</p> </div> ); } var app = ( <div> <Person name=\"John\" age=\"26\" /> <Person name=\"Sam\" age=\"28\" /> </div> ); ReactDOM.render(app, document.querySelector('#app')); Why Should we Choose React UI State becomes difficult to handle with Vanilla Javascript Focus on Business Logic, not on preventing your App from exploding Plus: Framework Creators probably write better Code Huge Ecosystem, Active Community, High Performance React Alternatives Angular Vue Not so much: jQuery Understanding Single Page Applications and Multi Page Applications Two Kinds of Applications Single Page Applications Multi Page Applications Only ONE HTML Page, Content is (re)rendered on Client Multiple HTML Pages, Content is rendered on Server Root react component, and other child components Typical HTML/CSS/JS, with maybe some React widgets Typically only ONE ReactDOM.render() call One ReactDOM.render() call per \"widget\" Course Outline Getting Started The Basics Debugging Styling Components Components Deep Dive HTTP Requests Routing Forms & Validation Redux Authentication Testing Introduction Deployment Bonus (Animations, Next Steps, Webpack) 2. Refreshing Next Generation Javascript (Optional) 3. Understanding the Base Features and Syntax The Build Workflow Local project Using a Build Workflow Recommend for SPAs and MPAs Why? Optimize Code Use Next-Gen Javascript Features ES6 vs ES5 Be More Productive How? Use Dependency Management Tool npm or yarn Use Bundler Recommended: Webpack Use Compiler (Next-Gen Javascript) Babel + Presets Use a Development Server Using Create React App npm i -g create-react-app Understanding the Folder Structure package.json lists dependencies node_modules holds files for dependencies and subdependencies public folder is root folder served by web server in the end. Contains the single index.html file in a project. <div id=\"root\"></div> is where React app will be mounted manifest.json file defines meta-data src contains files we will work with Understanding Component Basics App component our first component Typically render one root component, and nest all others React component class extends Component from React, and has method render() .js and .jsx files Utilizing JSX Understanding JSX With React.createElement() Our previous JSX ends up compiled to this Takes at least 3 args 1st is element we want to render to DOM 2nd is configuration 3rd is any amount of children return React.createElement('div', null, 'h1', \"Hi, I'm a React App!\"); This gets us: h1Hi, I'm a React App! Interpreted as text by default, need to once again call createElement() This code return React.createElement( 'div', {className: \"App\"}, React.createElement('h1', null, 'Does this work now?') ); is equivilant to this code: return ( <div className=\"App\"> <h1>Hi, I'm a React App</h1> </div> ); JSX Restrictions className is used instead of class because the second is a reserved word in javascript Translated to class We are not using the real HTML tags, React is converting them behind the scenes Must have a single root element, can't have multiple Creating a Functional Component Creating a new component Person/Person.js : import React from 'react'; const person = () => { return <p>I'm a Person!</p>; }; export default person; In App.js: <Person /> Working with Components and Re-Using Them Simply decalre the element multiple times, can do this anywhere. Outputting Dynamic Content // Person.js import React from 'react'; const person = () => { return ( <p>I'm a Person and I am {Math.floor(Math.random() * 30)} years old!</p> ); }; export default person; Working with Props In App.js: <Person name=\"John\" age=\"26\" /> <Person name=\"Max\" age=\"28\" >My Hobbies: Racing</Person> <Person name=\"Sam\" age=\"23\" /> in Person.js: I'm a {props.name} and I am {props.age} years old! Understanding the children prop children is reserved. Includes any elements in between opening and closing tag of our component/element In Person.js: <p>{props.children}</p> Understanding and Using State Using state property class App extends Component { state = { persons: [ { name: 'John', age: 26 }, { name: 'Max', age: 28 }, { name: 'Same', age: 23 }, ], }; render() { return ( <div className='App'> <h1>Hi, I'm a React App</h1> <p>This is really working!</p> <button>Switch Name</button> <Person name={this.state.persons[0].name} age={this.state.persons[0].age} /> <Person name={this.state.persons[1].name} age={this.state.persons[1].age} > My Hobbies: Racing </Person> <Person name={this.state.persons[2].name} age={this.state.persons[2].age} /> </div> ); } } Handling Events with Methods switchNameHandler = () => { console.log('Was clicked!'); }; <button onClick={this.switchNameHandler}>Switch Name</button> To which Events can you Listen? Manipulating the State Only two things update DOM props & state switchNameHandler = () => { // console.log('Was clicked!'); // DON'T DO THIS: this.state.persons[0].name = 'Jonathonas' this.setState({persons: [ { name: 'Jonathonas', age: 26 }, { name: 'Maximilian', age: 28 }, { name: 'Sam', age: 23 }, ]}) }; Using the useState() Hook for State Manipulation Prior to React v16.8, managing state in classes was the only way Used in functional React components useState() Always returns array with exactly 2 elements, always 1st will always been our current state 2nd will be a function that allows us to update state Replaces old state with what you give it. Choice between using class-based vs functional components with hooks Stateless vs Stateful Components Whether using this.state or hooks, they are stateful Others are display/functional components It's good practice to have containers and few smart or stateful components for handling the necessary logic Passing Method References Between Components Can pass down a reference to a handler function down as a property <Person click={switchNameHandler} > <p onClick={props.click}> When passing data: switchNameHandler = (newName) => { } Using bind: this.switchNameHandler.bind(this, 'Max!') Using arrow function: () => this.switchNameHandler('Maximilian!!') Better to use bind, arrow function in cases can be more inefficient Adding Two Way Binding Changing the name on our own with an input nameChangedHandler = (event) => { this.setState( { persons: [ { name: 'Max', age: 28 }, { name: event.target.value, age: 29 }, { name: 'Stephanie', age: 26 } ] } ) } // ... <!-- in render(): --> <Person changed={this.nameChangedHandler} /> <!-- in Person component: --> <input type='text' onChange={props.changed} /> This way, we're able to dynamically update, and also use inputs Now, we want to see the state right from the start value={props.name} This gives warning, because potentially not handling changes. We need onChange or we cannot change the input Will improve this later Adding Styling with Stylesheets Give div in Person a class name: <div className=\"Person\"> Create Person.css .Person { width: 60%; margin: 16px auto; border: 1px solid #eee; box-shadow: 0 2px 3px #ccc; padding: 16px; text-align: center; } Now, must import. Thanks to webpack (which is a part of the build tools, react scripts), we can import CSS files into Javascript in React. import './Person.css'; Can see the style tags are injected dynamically by webpack It is also global Working with Inline Styles Styling our button differently render() { const style = { backgroundColor: 'white', font: 'inherit', border: '1px solid blue', padding: '8px', cursor: 'pointer', }; return ( // ... <button style={style} onClick={/* ... */}> // ... ) } Inline styling has restrictions, for example if we were to try a hover effect on the button. We will look at this more in depth later on for a way to scope styles and still use all the CSS features (Section 29?) Resources create-react-app Introducing JSX Rendering Elements Components & Props Listenable Events 4. Working with Lists and Conditionals Rendering Content Conditionally Handling Dynamic Content \"The Javascript Way\" Outputting Lists Lists and State Updating State Immutably Lists and Keys Flexible Lists 5. Styling React Components and Elements 6. Debugging React Apps","title":"React"},{"location":"react/#react-the-complete-guide","text":"Notes based on Udemy Course React - The Complete Guide (incl Hooks, React Router, Redux)","title":"React - The Complete Guide"},{"location":"react/#1-getting-started","text":"Building elements with reusable components. Utilizes JSX","title":"1. Getting Started"},{"location":"react/#writing-our-first-react-code","text":"function Person(props) { return ( <div className=\"person\"> <h1>{props.name}</h1> <p>Your Age: {props.age}</p> </div> ); } ReactDOM.render(<Person name=\"John\" age=\"26\" />, document.querySelector('#p1')); ReactDOM.render(<Person name=\"Sam\" age=\"28\" />, document.querySelector('#p2')); Turn into: function Person(props) { return ( <div className=\"person\"> <h1>{props.name}</h1> <p>Your Age: {props.age}</p> </div> ); } var app = ( <div> <Person name=\"John\" age=\"26\" /> <Person name=\"Sam\" age=\"28\" /> </div> ); ReactDOM.render(app, document.querySelector('#app'));","title":"Writing Our First React Code"},{"location":"react/#why-should-we-choose-react","text":"UI State becomes difficult to handle with Vanilla Javascript Focus on Business Logic, not on preventing your App from exploding Plus: Framework Creators probably write better Code Huge Ecosystem, Active Community, High Performance","title":"Why Should we Choose React"},{"location":"react/#react-alternatives","text":"Angular Vue Not so much: jQuery","title":"React Alternatives"},{"location":"react/#understanding-single-page-applications-and-multi-page-applications","text":"","title":"Understanding Single Page Applications and Multi Page Applications"},{"location":"react/#two-kinds-of-applications","text":"Single Page Applications Multi Page Applications Only ONE HTML Page, Content is (re)rendered on Client Multiple HTML Pages, Content is rendered on Server Root react component, and other child components Typical HTML/CSS/JS, with maybe some React widgets Typically only ONE ReactDOM.render() call One ReactDOM.render() call per \"widget\"","title":"Two Kinds of Applications"},{"location":"react/#course-outline","text":"Getting Started The Basics Debugging Styling Components Components Deep Dive HTTP Requests Routing Forms & Validation Redux Authentication Testing Introduction Deployment Bonus (Animations, Next Steps, Webpack)","title":"Course Outline"},{"location":"react/#2-refreshing-next-generation-javascript-optional","text":"","title":"2. Refreshing Next Generation Javascript (Optional)"},{"location":"react/#3-understanding-the-base-features-and-syntax","text":"","title":"3. Understanding the Base Features and Syntax"},{"location":"react/#the-build-workflow","text":"Local project Using a Build Workflow Recommend for SPAs and MPAs Why? Optimize Code Use Next-Gen Javascript Features ES6 vs ES5 Be More Productive How? Use Dependency Management Tool npm or yarn Use Bundler Recommended: Webpack Use Compiler (Next-Gen Javascript) Babel + Presets Use a Development Server","title":"The Build Workflow"},{"location":"react/#using-create-react-app","text":"npm i -g create-react-app","title":"Using Create React App"},{"location":"react/#understanding-the-folder-structure","text":"package.json lists dependencies node_modules holds files for dependencies and subdependencies public folder is root folder served by web server in the end. Contains the single index.html file in a project. <div id=\"root\"></div> is where React app will be mounted manifest.json file defines meta-data src contains files we will work with","title":"Understanding the Folder Structure"},{"location":"react/#understanding-component-basics","text":"App component our first component Typically render one root component, and nest all others React component class extends Component from React, and has method render() .js and .jsx files Utilizing JSX","title":"Understanding Component Basics"},{"location":"react/#understanding-jsx","text":"With React.createElement() Our previous JSX ends up compiled to this Takes at least 3 args 1st is element we want to render to DOM 2nd is configuration 3rd is any amount of children return React.createElement('div', null, 'h1', \"Hi, I'm a React App!\"); This gets us: h1Hi, I'm a React App! Interpreted as text by default, need to once again call createElement() This code return React.createElement( 'div', {className: \"App\"}, React.createElement('h1', null, 'Does this work now?') ); is equivilant to this code: return ( <div className=\"App\"> <h1>Hi, I'm a React App</h1> </div> );","title":"Understanding JSX"},{"location":"react/#jsx-restrictions","text":"className is used instead of class because the second is a reserved word in javascript Translated to class We are not using the real HTML tags, React is converting them behind the scenes Must have a single root element, can't have multiple","title":"JSX Restrictions"},{"location":"react/#creating-a-functional-component","text":"Creating a new component Person/Person.js : import React from 'react'; const person = () => { return <p>I'm a Person!</p>; }; export default person; In App.js: <Person />","title":"Creating a Functional Component"},{"location":"react/#working-with-components-and-re-using-them","text":"Simply decalre the element multiple times, can do this anywhere.","title":"Working with Components and Re-Using Them"},{"location":"react/#outputting-dynamic-content","text":"// Person.js import React from 'react'; const person = () => { return ( <p>I'm a Person and I am {Math.floor(Math.random() * 30)} years old!</p> ); }; export default person;","title":"Outputting Dynamic Content"},{"location":"react/#working-with-props","text":"In App.js: <Person name=\"John\" age=\"26\" /> <Person name=\"Max\" age=\"28\" >My Hobbies: Racing</Person> <Person name=\"Sam\" age=\"23\" /> in Person.js: I'm a {props.name} and I am {props.age} years old!","title":"Working with Props"},{"location":"react/#understanding-the-children-prop","text":"children is reserved. Includes any elements in between opening and closing tag of our component/element In Person.js: <p>{props.children}</p>","title":"Understanding the children prop"},{"location":"react/#understanding-and-using-state","text":"Using state property class App extends Component { state = { persons: [ { name: 'John', age: 26 }, { name: 'Max', age: 28 }, { name: 'Same', age: 23 }, ], }; render() { return ( <div className='App'> <h1>Hi, I'm a React App</h1> <p>This is really working!</p> <button>Switch Name</button> <Person name={this.state.persons[0].name} age={this.state.persons[0].age} /> <Person name={this.state.persons[1].name} age={this.state.persons[1].age} > My Hobbies: Racing </Person> <Person name={this.state.persons[2].name} age={this.state.persons[2].age} /> </div> ); } }","title":"Understanding and Using State"},{"location":"react/#handling-events-with-methods","text":"switchNameHandler = () => { console.log('Was clicked!'); }; <button onClick={this.switchNameHandler}>Switch Name</button> To which Events can you Listen?","title":"Handling Events with Methods"},{"location":"react/#manipulating-the-state","text":"Only two things update DOM props & state switchNameHandler = () => { // console.log('Was clicked!'); // DON'T DO THIS: this.state.persons[0].name = 'Jonathonas' this.setState({persons: [ { name: 'Jonathonas', age: 26 }, { name: 'Maximilian', age: 28 }, { name: 'Sam', age: 23 }, ]}) };","title":"Manipulating the State"},{"location":"react/#using-the-usestate-hook-for-state-manipulation","text":"Prior to React v16.8, managing state in classes was the only way Used in functional React components useState() Always returns array with exactly 2 elements, always 1st will always been our current state 2nd will be a function that allows us to update state Replaces old state with what you give it. Choice between using class-based vs functional components with hooks","title":"Using the useState() Hook for State Manipulation"},{"location":"react/#stateless-vs-stateful-components","text":"Whether using this.state or hooks, they are stateful Others are display/functional components It's good practice to have containers and few smart or stateful components for handling the necessary logic","title":"Stateless vs Stateful Components"},{"location":"react/#passing-method-references-between-components","text":"Can pass down a reference to a handler function down as a property <Person click={switchNameHandler} > <p onClick={props.click}> When passing data: switchNameHandler = (newName) => { } Using bind: this.switchNameHandler.bind(this, 'Max!') Using arrow function: () => this.switchNameHandler('Maximilian!!') Better to use bind, arrow function in cases can be more inefficient","title":"Passing Method References Between Components"},{"location":"react/#adding-two-way-binding","text":"Changing the name on our own with an input nameChangedHandler = (event) => { this.setState( { persons: [ { name: 'Max', age: 28 }, { name: event.target.value, age: 29 }, { name: 'Stephanie', age: 26 } ] } ) } // ... <!-- in render(): --> <Person changed={this.nameChangedHandler} /> <!-- in Person component: --> <input type='text' onChange={props.changed} /> This way, we're able to dynamically update, and also use inputs Now, we want to see the state right from the start value={props.name} This gives warning, because potentially not handling changes. We need onChange or we cannot change the input Will improve this later","title":"Adding Two Way Binding"},{"location":"react/#adding-styling-with-stylesheets","text":"Give div in Person a class name: <div className=\"Person\"> Create Person.css .Person { width: 60%; margin: 16px auto; border: 1px solid #eee; box-shadow: 0 2px 3px #ccc; padding: 16px; text-align: center; } Now, must import. Thanks to webpack (which is a part of the build tools, react scripts), we can import CSS files into Javascript in React. import './Person.css'; Can see the style tags are injected dynamically by webpack It is also global","title":"Adding Styling with Stylesheets"},{"location":"react/#working-with-inline-styles","text":"Styling our button differently render() { const style = { backgroundColor: 'white', font: 'inherit', border: '1px solid blue', padding: '8px', cursor: 'pointer', }; return ( // ... <button style={style} onClick={/* ... */}> // ... ) } Inline styling has restrictions, for example if we were to try a hover effect on the button. We will look at this more in depth later on for a way to scope styles and still use all the CSS features (Section 29?)","title":"Working with Inline Styles"},{"location":"react/#resources","text":"create-react-app Introducing JSX Rendering Elements Components & Props Listenable Events","title":"Resources"},{"location":"react/#4-working-with-lists-and-conditionals","text":"","title":"4. Working with Lists and Conditionals"},{"location":"react/#rendering-content-conditionally","text":"","title":"Rendering Content Conditionally"},{"location":"react/#handling-dynamic-content-the-javascript-way","text":"","title":"Handling Dynamic Content \"The Javascript Way\""},{"location":"react/#outputting-lists","text":"","title":"Outputting Lists"},{"location":"react/#lists-and-state","text":"","title":"Lists and State"},{"location":"react/#updating-state-immutably","text":"","title":"Updating State Immutably"},{"location":"react/#lists-and-keys","text":"","title":"Lists and Keys"},{"location":"react/#flexible-lists","text":"","title":"Flexible Lists"},{"location":"react/#5-styling-react-components-and-elements","text":"","title":"5. Styling React Components and Elements"},{"location":"react/#6-debugging-react-apps","text":"","title":"6. Debugging React Apps"},{"location":"vue/","text":"Vue - The Complete Guide Notes based on Udemy Course Vue - The Complete Guide (incl. Router & Composition API) 1. Getting Started What is Vue.js? A Javascript framwork that makes building interactive and reactive web frontends (= browser-side web applications) easier. Different Ways of Utilizing Vue Control parts of HTML pages or entire pages Widget approach on a multi-page application Some pages are still rendered on and served by a backend server Can also be used to control the entire frontend of a web application Single-Page-Applicaton Approach. Server sends only one HTML page, thereafter Vue takes over and controls the UI Building a First App with just Javascript Append item to a list. const buttonEl = document.querySelector('button'); const inputEl = document.querySelector('input'); const listEl = document.querySelector('ul'); function addGoal() { const enteredValue = inputEl.value; const listItemEl = document.createElement('li'); listItemEl.textContent = enteredValue; listEl.appendChild(listItemEl); } buttonEl.addEventListener('click', addGoal); Re-building the App with Vue Using Vue from CDN <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\" /> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /> <title>A First App</title> <link rel=\"stylesheet\" href=\"styles.css\" /> </head> <body> <div id=\"app\"> <div> <label for=\"goal\">Goal</label> <input type=\"text\" id=\"goal\" v-model=\"enteredValue\" /> <button v-on:click=\"addGoal\">Add Goal</button> </div> <ul> <li v-for=\"goal in goals\">{{ goal }}</li> </ul> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script src=\"app.js\"></script> </body> </html> Vue.createApp({ data() { return { goals: [], enteredValue: '' }; } , methods: { addGoal() { this.goals.push(this.enteredValue); } } }).mount('#app'); Course Content Basics - Small Demos/Mini Projects Core Syntax Templates Directives Data Methods Computed Properties Watchers Intermediate - Bigger Course Projects Components Component Communication Behind the Scenes Forms HTTP Routing Animations Advanced - Assignments & Challenges Vuex Authentication Deployment & Optimizations Composition API Re-using Code Basics & Core Concepts - DOM Interaction with Vue Creating and Connecting Vue App Instances If we control a HTML element with Vue, we'll also control all child elements of that element <section id=\"user-goal\"> <h2>My Course Goal</h2> <p></p> </section> Anything that's part of the object you return in data can now be used in your Vue-controlled HTML part const app = Vue.createApp({ data() { return { courseGoal: 'Test!' }; }, }); app.mount('#user-goal'); Interpolation and Data Binding Reference properties that are part of the object <section id=\"user-goal\"> <h2>My Course Goal</h2> <p>{{ courseGoal }}</p> </section> Binding Attributes with the \"v-bind\" Directive The {{ }} syntax is only available between opening and closing HTML tags Passing dynamic value to an attribute, use Vue binding syntax, a directive V-bind is a reserved name detected and understood by Vue All built-in directives start with v- const app = Vue.createApp({ data() { return { courseGoal: 'Test!', vueLink: 'https://vuejs.org/' }; }, }); app.mount('#user-goal'); <p>Learn more <a v-bind:href=\"vueLink\">about Vue</a></p> Understanding \"methods\" in Vue apps Methods allow to define functions that execute when something happens When you call them or a user event such as a click occurs Takes an object, full of methods methods is reserved term, such as data All properties defined in methods object need to be functions const app = Vue.createApp({ data() { return { courseGoal: 'Test!', vueLink: 'https://vuejs.org/', }; }, methods: { outputGoal() { const randomNumber = Math.random(); if (randomNumber < 0.5) { return 'Learn Vue!'; } else { return 'Master Vue!'; } }, }, }); app.mount('#user-goal'); <section id=\"user-goal\"> <h2>My Course Goal</h2> <p>{{ outputGoal() }}</p> <p>Learn more <a v-bind:href=\"vueLink\">about Vue</a></p> </section> Working with Data inside of a Vue app Referencing data in methods Vue packages data into the app object const app = Vue.createApp({ data() { return { courseGoalA: 'Test A!', courseGoalB: 'Test B!', vueLink: 'https://vuejs.org/', }; }, methods: { outputGoal() { const randomNumber = Math.random(); if (randomNumber < 0.5) { return this.courseGoalA; } else { return this.courseGoalB; } }, }, }); app.mount('#user-goal'); Outputting Raw HTML Content with v-html Using v-html ... courseGoalB: '<h2>Test B!</h2>', ... ... <p v-html=\"outputGoal()\"></p> ... A First Summary Controlling section with Vue And all child elements CSS Selector for mount Data-binding Interpolation syntax in HTML v-bind & v-html data & methods options data returns object methods returns functions you can call Declarative approach Define the goal, define the template Mark what is dynamic Updates the DOM Event-binding React to user input, events v-on directive for adding event listeners Takes event as argument after colon i.e v-on:click All default events, mouseenter, mouseleave, etc <section id=\"events\"> <h2>Events in Action</h2> <button v-on:click=\"counter++\">Add</button> <button v-on:click=\"counter--\">Reduce</button> <p>Result: {{ counter }}</p> </section> const app = Vue.createApp({ data() { return { counter: 0, }; }, }); app.mount('#events'); Events and Methods Moving logic out of HTML and into the Javascript code Can point to function, as opposed to calling it <button v-on:click=\"add\">Add</button> instead of <button v-on:click=\"add()\">Add</button> <section id=\"events\"> <h2>Events in Action</h2> <button v-on:click=\"add\">Add</button> <button v-on:click=\"reduce\">Reduce</button> <p>Result: {{ counter }}</p> </section> const app = Vue.createApp({ data() { return { counter: 0, }; }, methods: { add() { this.counter++; }, reduce() { this.counter--; }, }, }); app.mount('#events'); Working with Event Arguments Add and Reduce by other numbers Passing arguments methods: { add(num) { this.counter = this.counter + num; }, reduce(num) { this.counter = this.counter - num; }, }, <button v-on:click=\"add(10)\">Add 10</button> <button v-on:click=\"reduce(5)\">Reduce 5</button> Using the Native Event Object Utilizing default event object <input type=\"text\"v-on:input=\"setName\"> <p>Your Name: {{ name }}</p> methods: { setName(event) { this.name = event.target.value; }, ... }, Accessing the event object Default if pointing, need to state parameter with other args v-on:input=\"setName\" v-on:input=\"setName($event, 'Last Name')\" Exploring Event Modifiers Using form, input, and button Dealing with button press default behavior to send HTTP request Can do event.preventDefault(); but there's another way with event modifier Can do prevent, right click only, key modifiers, etc <section id=\"events\"> <h2>Events in Action</h2> <button v-on:click=\"add(10)\">Add 10</button> <button v-on:click.right=\"reduce(5)\">Reduce 5</button> <p>Result: {{ counter }}</p> <input type=\"text\" v-on:input=\"setName($event, 'Lofton')\" v-on:keyup.enter=\"confirmInput\" /> <p>Your Name: {{ confirmedName }}</p> <form v-on:submit.prevent=\"submitForm\"> <input type=\"text\" /> <button>Sign Up</button> </form> </section> const app = Vue.createApp({ data() { return { counter: 0, name: '', confirmedName: '', }; }, methods: { confirmInput() { this.confirmedName = this.name; }, submitForm() { alert('Submitted!'); }, setName(event, lastName) { this.name = event.target.value + ' ' + lastName; }, add(num) { this.counter = this.counter + num; }, reduce(num) { this.counter = this.counter - num; }, }, }); app.mount('#events'); Locking Content with v-once Some data that changes but want to preserve initial state Utilizing v-once <p v-once>Starting Counter: {{ counter }}</p> <p>Result: {{ counter }}</p> Data Binding + Event Binding = Two-Way Binding Resetting input with button <input type=\"text\" v-on:input=\"setName($event, 'Lofton')\"> <button>Reset Input</button> <p>Your Name: {{ name }}</p> methods: { setName(event, lastName) { this.name = event.target.value + ' ' + lastName; }, ... resetInput() { this.name = '' }, }, Bind name to input <input type=\"text\" v-bind:value=\"name\" v-on:input=\"setName($event, 'Lofton')\"> Set button to execute method on click <button v-on:click=\"resetInput\">Reset Input</button> With last name this causes issues so remove. this.name = event.target.value; Shortcut for when you bind the value and listen to input changes Using v-model as shortcut for v-bind value v-on:input <input type=\"text\" v-model=\"name\"> This is two way binding, communicating in both ways, listening to an event coming out of input element and writing it back Methods used for Data Binding: How it Works What we know (thus far) DOM Interaction, Templates & Data Binding Event Handling Next: Advanced Relativity Outputting Full Name <p>Your Name: {{ outputFullName() }}</p> <p>Your Name: {{ outputFullName() }}</p> Checking if name is empty before returning. methods: { outputFullName() { if (this.name === '') { return ''; } return this.name + ' ' + 'Lofton'; }, } This way is not ideal, behind the scenes when counter is change Vue attempts to find where counter is used in order to update the page automatically. When method is called, it is re-executed on page whenever anything changes because Vue does not know what the method does. Any non-event bound method will be re-executed by Vue when anything on the page changes. Not a bug, this is how Vue works. Methods are not the best solution for outputting some dynamically calculated value such as this. Introducing Computed Properties Data, Methods, and Computed Computed Properties are essentially like methods with one difference. Vue will be aware of their dependencies and only reexecutes them if one of the dependencies is changed. Should name your computed methods like data properties as they are used like such. Point to it in HTML, as Vue will call it for you ( fullname instead of fullname() ) Computed property value is cached and only recalculate and reevaluate it if the property changes, in this case name computed: { fullname() { console.log('Running Again...'); if (this.name === '') { return ''; } return this.name + ' ' + 'Lofton'; }, }, <p>Your Name: {{ fullname }}</p> Working with Watchers Watcher is basically a function you can tell Vue to execute when one of it's properties has changed. Sounds like computed properties, and can use those instead but this might not be the way you want to do it. Side note, don't want to have a name clash, i.e. a data property and a computed property both named fullname . watch expects an object, similar to computed and methods. Can use the same name for a watcher, name() {} They work this way, connection is set up by repeating another data or computed property name in a watcher method and it will automatically executed by Vue when a property by that name changes. We don't return anything, because the watcher won't be used in the HTML code to use a return value. Run logic that should be executed when name changes. this.name not needed, as watcher function automatically gets last value of watched property as an argument. Can also access old value if needed. name(newValue, oldValue {...};) Example with two watchers to reflect full name: watch: { name(value) { if (value === '') { this.fullname = ''; } else { this.fullname = value + ' ' + this.lastName; } }, lastName(value) { if (value === '') { this.fullname = ''; } else { this.fullname = this.name + ' ' + value; } }, }, However, can do this more simply (less code) with computed: computed: { fullname() { console.log('Running Again...'); if (this.name === '' || this.lastName === '') { return ''; } return this.name + ' ' + this.lastName; }, }, So why use watchers? Change when something specific happens. For example, when counter is greater than 50, reset it. Run logic that might update a data property, but not always. watch: { counter(value) { if (value > 50) { this.counter = 0; } }, } Example use cases HTML Requests to send if certain data changes Timers if certain data changes Watcher useful for some code that maybe updates some data property in reaction to a data property changing. In comparison, Computed is good if you want to calculate some output dynamically. Methods vs Computed Properties vs Watchers Methods Use with event binding OR data binding. Data binding: Method is executed for every \"re-render\" cycle of the component. Use for events or data that really needs to be re-evaluated all the time. Computed Use with data binding Computed properties are only re-evaluated if one of their \"used values\" changed. Use for data that depends on other data. Watch Not used directly in template. Allows you to run any code in reaction to some changed data (e.g. send HTTP request, etc.) Use for any non-data update you want to make. v-bind and v-on Shorthands v-on Shorthand Using @ in place of v-on: <button v-on:click=\"add(10)\">Add 10</button> --> <button @click=\"add(10)\">Add 10</button> v-bind Shorthand Omit the v-bind , use only : <input type=\"text\" v-bind:value=\"...\" v-model=\"name\" /> --> <input type=\"text\" :value=\"...\" v-model=\"name\" /> :attributeName shorthand for v-bind , @eventName shorthand for v-on Dynamic Styling with Inline Styles Using Vue to change styling dynamically via inline using v-bind and this special style binding syntax. <section id=\"styling\"> <div class=\"demo\" :style=\"{borderColor: boxASelected ? 'red' : '#ccc'}\" @click=\"boxSelected('A')\" ></div> <div class=\"demo\" @click=\"boxSelected('B')\"></div> <div class=\"demo\" @click=\"boxSelected('C')\"></div> </section> const app = Vue.createApp({ data() { return { boxASelected: false, boxBSelected: false, boxCSelected: false, }; }, methods: { boxSelected(box) { if (box === 'A') { this.boxASelected = true; } else if (box === 'B') { this.boxBSelected = true; } else if (box === 'C') { this.boxCSelected = true; } }, }, }); app.mount('#styling'); Adding CSS Classes Dynamically Inline styles not used very often since they overrule all other styles. In modern development and CSS inline is rarely used. We can bind CSS classes dynamically using v-bind <div :class=\"boxASelected ? 'demo active' : 'demo'\" @click=\"boxSelected('A')\" ></div> However, not optimal as this is difficult to read, more classes will make this even more difficult. Vue supports a special syntax for class attribute if binding with v-bind . <div :class=\"{demo: true, active: boxASelected}\" @click=\"boxSelected('A')\" ></div> Same behavior but more readible and maintainable. Can simplify this further, demo is always true and can be moved into a normal class attribute. <div class=\"demo\" :class=\"{active: boxASelected}\" @click=\"boxSelected('A')\" ></div> Dynamically bound class will be evaluated by Vue and merge it with the hard-coded class. We can also alter our methods to create a toggle as opposed to always making it active by assigning opposite value instead of true. this.boxASelected = !this.boxASelected; Classes & Computed Properties We can also utilize computed properties here for our styles. Preferable as having logic in HTML is suboptimal, although previous example with class-binding was sufficient. Sufficent because of single line logic, for more complex dynamic class code computed is likely the better option. <div class=\"demo\" :class=\"boxAClasses\" @click=\"boxSelected('A')\"></div> computed: { boxAClasses() { return { active: this.boxASelected }; }, }, Dynamic Classes: Array Syntax Another syntax supported by view for multiple class assignments by working with one dynamic class assignment. Passing an array. <div :class=\"['demo', { active: boxBSelected }]\" @click=\"boxSelected('B')\"></div> With computed: <div :class=\"['demo', boxBClasses]\" @click=\"boxSelected('B')\"></div> Module Summary DOM & Templates Vue can be used to define the goal instead of the steps (-> declarative approach). Connect Vue to HTML via \" mount \": Vue then renders the real DOM based on the connected template. Data & Event Bindings You can bind data via interpolation ( {{ }} ) or the v-bind (\" : \") directive. You listen for events via v-on (\" @ \") Reactivity Vue updates the real DOM for you when bound data changes. Computed properties and watchers allow you to reach to data changes. Styling Dynamic CSS class and inline style bindings are supported by Vue Vue offers multiple special syntaxes (object-based, array-based) for efficient bindings. Rendering Conditional Content & Lists Module Introduction Conditional Content & Lists Rendering more ...sometimes Module Content Rendering Content with Conditions Outputting Lists of Data A First Look Behind the Scenes Understanding the Problem Dummy list into a growing & shrinking dynamic list. Message showing no goals added yet. Starting Vue app: const app = Vue.createApp({ data() { return { goals: [] }; }, }); app.mount('#user-goals'); If the array is empty, the unordered list should not be shown (not part of the DOM), instead paragraph should be shown. If we do have goals, show the unordered list and do not show paragraph. Conditional rendering will accomplish this. Common use case: loading spinner shown while waiting for data to arrive. Rendering Content Conditionally Show list if we do have goals, if not only show paragraph. Directive just for this purpose: v-if Similar to if statement in javascript. <p v-if=\"goals.length === 0\">...</p> Bind our input, create method to add goals, data property for the entered goal value, click listener on button. v-if, v-else, and v-else-if More on v-if Can have any expression that evaluates to truthy or falsy value, just as regular if statement, can combine with && (and) or || (or). Can point to computed or data property, or even a method as long as it evaluates to boolean value. Vue offers another directive to use in conjunction with v-if : v-else v-else has to be used on an element that comes directly after one with v-if , or direct neighbor element Additionally, v-else-if offered in similar way. These conditionals are not simply about showing/hiding things on the page, it's about whether or not they are included in the DOM, so more of attaching/re-attaching. const app = Vue.createApp({ data() { return { enteredGoalValue: '', goals: [], }; }, methods: { addGoal() { this.goals.push(this.enteredGoalValue); }, }, }); app.mount('#user-goals'); <section id=\"user-goals\"> <h2>My course goals</h2> <input type=\"text\" v-model=\"enteredGoalValue\" /> <button @click=\"addGoal\">Add Goal</button> <p v-if=\"goals.length === 0\"> No goals have been added yet - please start adding some! </p> <ul v-else> <li>Goal</li> </ul> </section> Using v-show Instead Of v-if An alternative to v-if : v-show v-show doesn't work together with v-if , v-else , v-else-if , it's standalone so if you have multiple alternatives, multiple v-show s are needed <p v-show=\"goals.length === 0\">...</p> What does v-show do then? Big difference is that v-show adds the display: none style to the element, so it is still in the DOM Which approach is better? Cost performance associated with adding/removing elements A bunch of non-needed elements in the DOM also not ideal Rule of thumb: typically use v-if and only fall back to v-show if you have an element which visibility status changes alot. For example, a button that toggles an element. Rendering Lists of Data Need to output a list of content, a common thing in web apps, and Vue offers a tool to do just that: v-for As with v-if being similar to if statements in javascript, v-for is similar to for loops in javascript. goal of goals in JS, use in keyword with Vue <li v-for=\"goal in goals\">{{ goal }}</li> Has to be inside the element, similar to how the constant in a for loop is only available within it. Vue adds them to the DOM in an efficient way, by only adding the new list item and leaving unchanged list items alone. It does not re-render the entire list every time an item is added or removed. Diving Deeper Into v-for Other ways of utilizing v-for : You can get the index of item in array v-for=\"(goal, index) in goals\" Then, use like goal: {{ index }} You can loop through objects v-for=\"value in {name: 'Johnny', age: '30'}\" Output in list text with interpolation: {{ value }} Can get key name of object property similar to index, or index of property in an object <li v-for=\"(value, key, index) in {name: 'Johnny', age: '30'}\">{{ key }}: {{ value }} | {{ index }}</li> Can also loop through a range of numbers <li v-for=\"num in 10\">{{ num }}</li> Removing List items Add click listener on list item element Method for removing items from the list Will need identifier for given goal: the index <li v-for=\"(goal, index) in goals\" @click=\"removeGoal(index)\"> {{ goal }} - {{ index }} </li> methods: { ... removeGoal(idx) { this.goals.splice(idx, 1); }, }, Lists & Keys Put goal and index in paragraph element and add input to list element for this example: <p>{{ goal }} - {{ index }}</p> and <input type=\"text\" @click.stop /> within the li element When deleting a list item and text is in the input, strange behavior. Deleting first goal deleted the input text in the second. Vue updates the list when you add and remove items, renders the list in the real DOM and updates it as required. Attempts to do this in a optimized way for performance, thus elements are reused. The content of the second element is moved into the first, to keep from rerendering the entire list or delete the first element and move them around. Just the dynamic content is moved around This is why we lose the input we have on the second element when the content of the second element is moved to the old first elements DOM element. Generally, reusing elements is good and efficient, but sometimes elements need to be able to be told apart. Simple extra attribute that is not a default HTML attribute for use on elements using v-for key=\"\" allows you to give an element a unique identifier Good habit and practice to always use on v-for elements even if not needed. key wants a unique identification criteria for every item Bind it to dynamic value Index won't work here, doesn't belong to goal content Unique keys likely already associated with items in database, they can be used for this purpose. Helps Vue tell elements apart Using goal text as key: <li v-for=\"(goal, index) in goals\" :key=\"goal\" @click=\"removeGoal(index)\"> Module Summary Conditional Content v-if (and v-show ) allows you to render content only if a certain condition is met v-if can be combined with v-else and v-else-if (only on direct sibling elements) Lists v-for can be used to render multiple elements dynamically v-for can be used with arrays, objects, and ranges (numbers) v-for Variations You can extract values , values and indexes or values, keys and indexes. If you need v-for and v-if, DON\"T use them on the same element. Use a wrapper with v-if instead. Keys Vue re-uses DOM elements to optimize performance --> This can lead to bugs if elements contain state Bind the key attribute to a unique value to help Vue identify elements that belong to list content Course Project: The Monster Slayer Game Module Introduction Practicing core knowledge from last modules into Project Data-binding Interpolation v-bind Event binding with v-on Output lists of data with v-for Conditional content with v-if Project Setup & First Methods Starting HTML <body> <header> <h1>Monster Slayer</h1> </header> <div id=\"game\"> <section id=\"monster\" class=\"container\"> <h2>Monster Health</h2> <div class=\"healthbar\"> <div class=\"healthbar__value\"></div> </div> </section> <section id=\"player\" class=\"container\"> <h2>Your Health</h2> <div class=\"healthbar\"> <div class=\"healthbar__value\"></div> </div> </section> <section id=\"controls\"> <button>ATTACK</button> <button>SPECIAL ATTACK</button> <button>HEAL</button> <button>SURRENDER</button> </section> <section id=\"log\" class=\"container\"> <h2>Battle Log</h2> <ul></ul> </section> </div> </body> Top to bottom, beginning with \"Attack\" First time calling a method within the Vue app configuration itself. Javascript: function getRandomValue(min, max) { return Math.floor(Math.random() * (max - min)) + min; } const app = Vue.createApp({ data() { return { playerHealth: 100, monsterHealth: 100, }; }, methods: { attackMonster() { const attackValue = getRandomValue(5, 12); this.monsterHealth -= attackValue; this.attackPlayer(); }, attackPlayer() { const attackValue = getRandomValue(8, 15); this.playerHealth -= attackValue; }, }, }); app.mount('#game'); Next, connecting to our HTML Updating the Health Bars Click listener on our attack button <button @click=\"attackMonster\">ATTACK</button> Adjusting the health bars by binding style and changing width. Monster: <div class=\"healthbar__value\" :style=\"{width: monsterHealth + '%'}\"> Player health done similarly. Make this more lean with computed properties, then refernce that in style bind <div class=\"healthbar__value\" :style=\"playerBarStyles\"> computed: { monsterBarStyles() { return { width: this.monsterHealth + '%' }; }, playerBarStyles() { return { width: this.playerHealth + '%' }; }, }, Adding a \"Special Attack\" Implement \"Special Attach\" as a similar method to attack Same method as regular attack, but change min, max to 10, 25. While having more attack value, should not be available all the time, only every 3 rounds. Keeping track of rounds with additional data property currentRound beginning at 0, increment with every player attack (monster attack occurs in same round). Bind disabled to whether currentRound is divisable by 3. <button :disabled=\"currentRound % 3 !== 0\" @click=\"specialAttackMonster\"> Outsource logic to Vue config in a computed property. mayUseSpecialAttack() { return this.currentRound % 3 !== 0; } <button :disabled=\"mayUseSpecialAttack\" @click=\"specialAttackMonster\"> Adding a \"Heal\" Functionality Implement as a method However, should not heal above 100 health, so include if check This should also count as a round in the game. Monster should attack as well since this is a round. healPlayer() { this.currentRound++; const healValue = getRandomValue(8, 20); if (this.playerHealth + healValue > 100) { this.playerHealth = 100; } else { this.playerHealth += healValue; } this.attackPlayer(); }, Attach click listener <button @click=\"healPlayer\">HEAL</button> Adding a \"Game Over Screen\" - We need to implement logic to end the game, in the event of monster health or player health below 0, or both, resulting in a draw. Introducing Components Moving to a Better Development Setup & Workflow with the Vue CLI","title":"Vue"},{"location":"vue/#vue-the-complete-guide","text":"Notes based on Udemy Course Vue - The Complete Guide (incl. Router & Composition API)","title":"Vue - The Complete Guide"},{"location":"vue/#1-getting-started","text":"","title":"1. Getting Started"},{"location":"vue/#what-is-vuejs","text":"A Javascript framwork that makes building interactive and reactive web frontends (= browser-side web applications) easier.","title":"What is Vue.js?"},{"location":"vue/#different-ways-of-utilizing-vue","text":"Control parts of HTML pages or entire pages Widget approach on a multi-page application Some pages are still rendered on and served by a backend server Can also be used to control the entire frontend of a web application Single-Page-Applicaton Approach. Server sends only one HTML page, thereafter Vue takes over and controls the UI","title":"Different Ways of Utilizing Vue"},{"location":"vue/#building-a-first-app-with-just-javascript","text":"Append item to a list. const buttonEl = document.querySelector('button'); const inputEl = document.querySelector('input'); const listEl = document.querySelector('ul'); function addGoal() { const enteredValue = inputEl.value; const listItemEl = document.createElement('li'); listItemEl.textContent = enteredValue; listEl.appendChild(listItemEl); } buttonEl.addEventListener('click', addGoal);","title":"Building a First App with just Javascript"},{"location":"vue/#re-building-the-app-with-vue","text":"Using Vue from CDN <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\" /> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /> <title>A First App</title> <link rel=\"stylesheet\" href=\"styles.css\" /> </head> <body> <div id=\"app\"> <div> <label for=\"goal\">Goal</label> <input type=\"text\" id=\"goal\" v-model=\"enteredValue\" /> <button v-on:click=\"addGoal\">Add Goal</button> </div> <ul> <li v-for=\"goal in goals\">{{ goal }}</li> </ul> </div> <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script> <script src=\"app.js\"></script> </body> </html> Vue.createApp({ data() { return { goals: [], enteredValue: '' }; } , methods: { addGoal() { this.goals.push(this.enteredValue); } } }).mount('#app');","title":"Re-building the App with Vue"},{"location":"vue/#course-content","text":"Basics - Small Demos/Mini Projects Core Syntax Templates Directives Data Methods Computed Properties Watchers Intermediate - Bigger Course Projects Components Component Communication Behind the Scenes Forms HTTP Routing Animations Advanced - Assignments & Challenges Vuex Authentication Deployment & Optimizations Composition API Re-using Code","title":"Course Content"},{"location":"vue/#basics-core-concepts-dom-interaction-with-vue","text":"","title":"Basics &amp; Core Concepts - DOM Interaction with Vue"},{"location":"vue/#creating-and-connecting-vue-app-instances","text":"If we control a HTML element with Vue, we'll also control all child elements of that element <section id=\"user-goal\"> <h2>My Course Goal</h2> <p></p> </section> Anything that's part of the object you return in data can now be used in your Vue-controlled HTML part const app = Vue.createApp({ data() { return { courseGoal: 'Test!' }; }, }); app.mount('#user-goal');","title":"Creating and Connecting Vue App Instances"},{"location":"vue/#interpolation-and-data-binding","text":"Reference properties that are part of the object <section id=\"user-goal\"> <h2>My Course Goal</h2> <p>{{ courseGoal }}</p> </section>","title":"Interpolation and Data Binding"},{"location":"vue/#binding-attributes-with-the-v-bind-directive","text":"The {{ }} syntax is only available between opening and closing HTML tags Passing dynamic value to an attribute, use Vue binding syntax, a directive V-bind is a reserved name detected and understood by Vue All built-in directives start with v- const app = Vue.createApp({ data() { return { courseGoal: 'Test!', vueLink: 'https://vuejs.org/' }; }, }); app.mount('#user-goal'); <p>Learn more <a v-bind:href=\"vueLink\">about Vue</a></p>","title":"Binding Attributes with the \"v-bind\" Directive"},{"location":"vue/#understanding-methods-in-vue-apps","text":"Methods allow to define functions that execute when something happens When you call them or a user event such as a click occurs Takes an object, full of methods methods is reserved term, such as data All properties defined in methods object need to be functions const app = Vue.createApp({ data() { return { courseGoal: 'Test!', vueLink: 'https://vuejs.org/', }; }, methods: { outputGoal() { const randomNumber = Math.random(); if (randomNumber < 0.5) { return 'Learn Vue!'; } else { return 'Master Vue!'; } }, }, }); app.mount('#user-goal'); <section id=\"user-goal\"> <h2>My Course Goal</h2> <p>{{ outputGoal() }}</p> <p>Learn more <a v-bind:href=\"vueLink\">about Vue</a></p> </section>","title":"Understanding \"methods\" in Vue apps"},{"location":"vue/#working-with-data-inside-of-a-vue-app","text":"Referencing data in methods Vue packages data into the app object const app = Vue.createApp({ data() { return { courseGoalA: 'Test A!', courseGoalB: 'Test B!', vueLink: 'https://vuejs.org/', }; }, methods: { outputGoal() { const randomNumber = Math.random(); if (randomNumber < 0.5) { return this.courseGoalA; } else { return this.courseGoalB; } }, }, }); app.mount('#user-goal');","title":"Working with Data inside of a Vue app"},{"location":"vue/#outputting-raw-html-content-with-v-html","text":"Using v-html ... courseGoalB: '<h2>Test B!</h2>', ... ... <p v-html=\"outputGoal()\"></p> ...","title":"Outputting Raw HTML Content with v-html"},{"location":"vue/#a-first-summary","text":"Controlling section with Vue And all child elements CSS Selector for mount Data-binding Interpolation syntax in HTML v-bind & v-html data & methods options data returns object methods returns functions you can call Declarative approach Define the goal, define the template Mark what is dynamic Updates the DOM","title":"A First Summary"},{"location":"vue/#event-binding","text":"React to user input, events v-on directive for adding event listeners Takes event as argument after colon i.e v-on:click All default events, mouseenter, mouseleave, etc <section id=\"events\"> <h2>Events in Action</h2> <button v-on:click=\"counter++\">Add</button> <button v-on:click=\"counter--\">Reduce</button> <p>Result: {{ counter }}</p> </section> const app = Vue.createApp({ data() { return { counter: 0, }; }, }); app.mount('#events');","title":"Event-binding"},{"location":"vue/#events-and-methods","text":"Moving logic out of HTML and into the Javascript code Can point to function, as opposed to calling it <button v-on:click=\"add\">Add</button> instead of <button v-on:click=\"add()\">Add</button> <section id=\"events\"> <h2>Events in Action</h2> <button v-on:click=\"add\">Add</button> <button v-on:click=\"reduce\">Reduce</button> <p>Result: {{ counter }}</p> </section> const app = Vue.createApp({ data() { return { counter: 0, }; }, methods: { add() { this.counter++; }, reduce() { this.counter--; }, }, }); app.mount('#events');","title":"Events and Methods"},{"location":"vue/#working-with-event-arguments","text":"Add and Reduce by other numbers Passing arguments methods: { add(num) { this.counter = this.counter + num; }, reduce(num) { this.counter = this.counter - num; }, }, <button v-on:click=\"add(10)\">Add 10</button> <button v-on:click=\"reduce(5)\">Reduce 5</button>","title":"Working with Event Arguments"},{"location":"vue/#using-the-native-event-object","text":"Utilizing default event object <input type=\"text\"v-on:input=\"setName\"> <p>Your Name: {{ name }}</p> methods: { setName(event) { this.name = event.target.value; }, ... }, Accessing the event object Default if pointing, need to state parameter with other args v-on:input=\"setName\" v-on:input=\"setName($event, 'Last Name')\"","title":"Using the Native Event Object"},{"location":"vue/#exploring-event-modifiers","text":"Using form, input, and button Dealing with button press default behavior to send HTTP request Can do event.preventDefault(); but there's another way with event modifier Can do prevent, right click only, key modifiers, etc <section id=\"events\"> <h2>Events in Action</h2> <button v-on:click=\"add(10)\">Add 10</button> <button v-on:click.right=\"reduce(5)\">Reduce 5</button> <p>Result: {{ counter }}</p> <input type=\"text\" v-on:input=\"setName($event, 'Lofton')\" v-on:keyup.enter=\"confirmInput\" /> <p>Your Name: {{ confirmedName }}</p> <form v-on:submit.prevent=\"submitForm\"> <input type=\"text\" /> <button>Sign Up</button> </form> </section> const app = Vue.createApp({ data() { return { counter: 0, name: '', confirmedName: '', }; }, methods: { confirmInput() { this.confirmedName = this.name; }, submitForm() { alert('Submitted!'); }, setName(event, lastName) { this.name = event.target.value + ' ' + lastName; }, add(num) { this.counter = this.counter + num; }, reduce(num) { this.counter = this.counter - num; }, }, }); app.mount('#events');","title":"Exploring Event Modifiers"},{"location":"vue/#locking-content-with-v-once","text":"Some data that changes but want to preserve initial state Utilizing v-once <p v-once>Starting Counter: {{ counter }}</p> <p>Result: {{ counter }}</p>","title":"Locking Content with v-once"},{"location":"vue/#data-binding-event-binding-two-way-binding","text":"Resetting input with button <input type=\"text\" v-on:input=\"setName($event, 'Lofton')\"> <button>Reset Input</button> <p>Your Name: {{ name }}</p> methods: { setName(event, lastName) { this.name = event.target.value + ' ' + lastName; }, ... resetInput() { this.name = '' }, }, Bind name to input <input type=\"text\" v-bind:value=\"name\" v-on:input=\"setName($event, 'Lofton')\"> Set button to execute method on click <button v-on:click=\"resetInput\">Reset Input</button> With last name this causes issues so remove. this.name = event.target.value; Shortcut for when you bind the value and listen to input changes Using v-model as shortcut for v-bind value v-on:input <input type=\"text\" v-model=\"name\"> This is two way binding, communicating in both ways, listening to an event coming out of input element and writing it back","title":"Data Binding + Event Binding = Two-Way Binding"},{"location":"vue/#methods-used-for-data-binding-how-it-works","text":"","title":"Methods used for Data Binding: How it Works"},{"location":"vue/#what-we-know-thus-far","text":"DOM Interaction, Templates & Data Binding Event Handling Next: Advanced Relativity Outputting Full Name <p>Your Name: {{ outputFullName() }}</p> <p>Your Name: {{ outputFullName() }}</p> Checking if name is empty before returning. methods: { outputFullName() { if (this.name === '') { return ''; } return this.name + ' ' + 'Lofton'; }, } This way is not ideal, behind the scenes when counter is change Vue attempts to find where counter is used in order to update the page automatically. When method is called, it is re-executed on page whenever anything changes because Vue does not know what the method does. Any non-event bound method will be re-executed by Vue when anything on the page changes. Not a bug, this is how Vue works. Methods are not the best solution for outputting some dynamically calculated value such as this.","title":"What we know (thus far)"},{"location":"vue/#introducing-computed-properties","text":"Data, Methods, and Computed Computed Properties are essentially like methods with one difference. Vue will be aware of their dependencies and only reexecutes them if one of the dependencies is changed. Should name your computed methods like data properties as they are used like such. Point to it in HTML, as Vue will call it for you ( fullname instead of fullname() ) Computed property value is cached and only recalculate and reevaluate it if the property changes, in this case name computed: { fullname() { console.log('Running Again...'); if (this.name === '') { return ''; } return this.name + ' ' + 'Lofton'; }, }, <p>Your Name: {{ fullname }}</p>","title":"Introducing Computed Properties"},{"location":"vue/#working-with-watchers","text":"Watcher is basically a function you can tell Vue to execute when one of it's properties has changed. Sounds like computed properties, and can use those instead but this might not be the way you want to do it. Side note, don't want to have a name clash, i.e. a data property and a computed property both named fullname . watch expects an object, similar to computed and methods. Can use the same name for a watcher, name() {} They work this way, connection is set up by repeating another data or computed property name in a watcher method and it will automatically executed by Vue when a property by that name changes. We don't return anything, because the watcher won't be used in the HTML code to use a return value. Run logic that should be executed when name changes. this.name not needed, as watcher function automatically gets last value of watched property as an argument. Can also access old value if needed. name(newValue, oldValue {...};) Example with two watchers to reflect full name: watch: { name(value) { if (value === '') { this.fullname = ''; } else { this.fullname = value + ' ' + this.lastName; } }, lastName(value) { if (value === '') { this.fullname = ''; } else { this.fullname = this.name + ' ' + value; } }, }, However, can do this more simply (less code) with computed: computed: { fullname() { console.log('Running Again...'); if (this.name === '' || this.lastName === '') { return ''; } return this.name + ' ' + this.lastName; }, }, So why use watchers? Change when something specific happens. For example, when counter is greater than 50, reset it. Run logic that might update a data property, but not always. watch: { counter(value) { if (value > 50) { this.counter = 0; } }, } Example use cases HTML Requests to send if certain data changes Timers if certain data changes Watcher useful for some code that maybe updates some data property in reaction to a data property changing. In comparison, Computed is good if you want to calculate some output dynamically.","title":"Working with Watchers"},{"location":"vue/#methods-vs-computed-properties-vs-watchers","text":"Methods Use with event binding OR data binding. Data binding: Method is executed for every \"re-render\" cycle of the component. Use for events or data that really needs to be re-evaluated all the time. Computed Use with data binding Computed properties are only re-evaluated if one of their \"used values\" changed. Use for data that depends on other data. Watch Not used directly in template. Allows you to run any code in reaction to some changed data (e.g. send HTTP request, etc.) Use for any non-data update you want to make.","title":"Methods vs Computed Properties vs Watchers"},{"location":"vue/#v-bind-and-v-on-shorthands","text":"v-on Shorthand Using @ in place of v-on: <button v-on:click=\"add(10)\">Add 10</button> --> <button @click=\"add(10)\">Add 10</button> v-bind Shorthand Omit the v-bind , use only : <input type=\"text\" v-bind:value=\"...\" v-model=\"name\" /> --> <input type=\"text\" :value=\"...\" v-model=\"name\" /> :attributeName shorthand for v-bind , @eventName shorthand for v-on","title":"v-bind and v-on Shorthands"},{"location":"vue/#dynamic-styling-with-inline-styles","text":"Using Vue to change styling dynamically via inline using v-bind and this special style binding syntax. <section id=\"styling\"> <div class=\"demo\" :style=\"{borderColor: boxASelected ? 'red' : '#ccc'}\" @click=\"boxSelected('A')\" ></div> <div class=\"demo\" @click=\"boxSelected('B')\"></div> <div class=\"demo\" @click=\"boxSelected('C')\"></div> </section> const app = Vue.createApp({ data() { return { boxASelected: false, boxBSelected: false, boxCSelected: false, }; }, methods: { boxSelected(box) { if (box === 'A') { this.boxASelected = true; } else if (box === 'B') { this.boxBSelected = true; } else if (box === 'C') { this.boxCSelected = true; } }, }, }); app.mount('#styling');","title":"Dynamic Styling with Inline Styles"},{"location":"vue/#adding-css-classes-dynamically","text":"Inline styles not used very often since they overrule all other styles. In modern development and CSS inline is rarely used. We can bind CSS classes dynamically using v-bind <div :class=\"boxASelected ? 'demo active' : 'demo'\" @click=\"boxSelected('A')\" ></div> However, not optimal as this is difficult to read, more classes will make this even more difficult. Vue supports a special syntax for class attribute if binding with v-bind . <div :class=\"{demo: true, active: boxASelected}\" @click=\"boxSelected('A')\" ></div> Same behavior but more readible and maintainable. Can simplify this further, demo is always true and can be moved into a normal class attribute. <div class=\"demo\" :class=\"{active: boxASelected}\" @click=\"boxSelected('A')\" ></div> Dynamically bound class will be evaluated by Vue and merge it with the hard-coded class. We can also alter our methods to create a toggle as opposed to always making it active by assigning opposite value instead of true. this.boxASelected = !this.boxASelected;","title":"Adding CSS Classes Dynamically"},{"location":"vue/#classes-computed-properties","text":"We can also utilize computed properties here for our styles. Preferable as having logic in HTML is suboptimal, although previous example with class-binding was sufficient. Sufficent because of single line logic, for more complex dynamic class code computed is likely the better option. <div class=\"demo\" :class=\"boxAClasses\" @click=\"boxSelected('A')\"></div> computed: { boxAClasses() { return { active: this.boxASelected }; }, },","title":"Classes &amp; Computed Properties"},{"location":"vue/#dynamic-classes-array-syntax","text":"Another syntax supported by view for multiple class assignments by working with one dynamic class assignment. Passing an array. <div :class=\"['demo', { active: boxBSelected }]\" @click=\"boxSelected('B')\"></div> With computed: <div :class=\"['demo', boxBClasses]\" @click=\"boxSelected('B')\"></div>","title":"Dynamic Classes: Array Syntax"},{"location":"vue/#module-summary","text":"DOM & Templates Vue can be used to define the goal instead of the steps (-> declarative approach). Connect Vue to HTML via \" mount \": Vue then renders the real DOM based on the connected template. Data & Event Bindings You can bind data via interpolation ( {{ }} ) or the v-bind (\" : \") directive. You listen for events via v-on (\" @ \") Reactivity Vue updates the real DOM for you when bound data changes. Computed properties and watchers allow you to reach to data changes. Styling Dynamic CSS class and inline style bindings are supported by Vue Vue offers multiple special syntaxes (object-based, array-based) for efficient bindings.","title":"Module Summary"},{"location":"vue/#rendering-conditional-content-lists","text":"","title":"Rendering Conditional Content &amp; Lists"},{"location":"vue/#module-introduction","text":"Conditional Content & Lists Rendering more ...sometimes Module Content Rendering Content with Conditions Outputting Lists of Data A First Look Behind the Scenes","title":"Module Introduction"},{"location":"vue/#understanding-the-problem","text":"Dummy list into a growing & shrinking dynamic list. Message showing no goals added yet. Starting Vue app: const app = Vue.createApp({ data() { return { goals: [] }; }, }); app.mount('#user-goals'); If the array is empty, the unordered list should not be shown (not part of the DOM), instead paragraph should be shown. If we do have goals, show the unordered list and do not show paragraph. Conditional rendering will accomplish this. Common use case: loading spinner shown while waiting for data to arrive.","title":"Understanding the Problem"},{"location":"vue/#rendering-content-conditionally","text":"Show list if we do have goals, if not only show paragraph. Directive just for this purpose: v-if Similar to if statement in javascript. <p v-if=\"goals.length === 0\">...</p> Bind our input, create method to add goals, data property for the entered goal value, click listener on button.","title":"Rendering Content Conditionally"},{"location":"vue/#v-if-v-else-and-v-else-if","text":"More on v-if Can have any expression that evaluates to truthy or falsy value, just as regular if statement, can combine with && (and) or || (or). Can point to computed or data property, or even a method as long as it evaluates to boolean value. Vue offers another directive to use in conjunction with v-if : v-else v-else has to be used on an element that comes directly after one with v-if , or direct neighbor element Additionally, v-else-if offered in similar way. These conditionals are not simply about showing/hiding things on the page, it's about whether or not they are included in the DOM, so more of attaching/re-attaching. const app = Vue.createApp({ data() { return { enteredGoalValue: '', goals: [], }; }, methods: { addGoal() { this.goals.push(this.enteredGoalValue); }, }, }); app.mount('#user-goals'); <section id=\"user-goals\"> <h2>My course goals</h2> <input type=\"text\" v-model=\"enteredGoalValue\" /> <button @click=\"addGoal\">Add Goal</button> <p v-if=\"goals.length === 0\"> No goals have been added yet - please start adding some! </p> <ul v-else> <li>Goal</li> </ul> </section>","title":"v-if, v-else, and v-else-if"},{"location":"vue/#using-v-show-instead-of-v-if","text":"An alternative to v-if : v-show v-show doesn't work together with v-if , v-else , v-else-if , it's standalone so if you have multiple alternatives, multiple v-show s are needed <p v-show=\"goals.length === 0\">...</p> What does v-show do then? Big difference is that v-show adds the display: none style to the element, so it is still in the DOM Which approach is better? Cost performance associated with adding/removing elements A bunch of non-needed elements in the DOM also not ideal Rule of thumb: typically use v-if and only fall back to v-show if you have an element which visibility status changes alot. For example, a button that toggles an element.","title":"Using v-show Instead Of v-if"},{"location":"vue/#rendering-lists-of-data","text":"Need to output a list of content, a common thing in web apps, and Vue offers a tool to do just that: v-for As with v-if being similar to if statements in javascript, v-for is similar to for loops in javascript. goal of goals in JS, use in keyword with Vue <li v-for=\"goal in goals\">{{ goal }}</li> Has to be inside the element, similar to how the constant in a for loop is only available within it. Vue adds them to the DOM in an efficient way, by only adding the new list item and leaving unchanged list items alone. It does not re-render the entire list every time an item is added or removed.","title":"Rendering Lists of Data"},{"location":"vue/#diving-deeper-into-v-for","text":"","title":"Diving Deeper Into v-for"},{"location":"vue/#other-ways-of-utilizing-v-for","text":"You can get the index of item in array v-for=\"(goal, index) in goals\" Then, use like goal: {{ index }} You can loop through objects v-for=\"value in {name: 'Johnny', age: '30'}\" Output in list text with interpolation: {{ value }} Can get key name of object property similar to index, or index of property in an object <li v-for=\"(value, key, index) in {name: 'Johnny', age: '30'}\">{{ key }}: {{ value }} | {{ index }}</li> Can also loop through a range of numbers <li v-for=\"num in 10\">{{ num }}</li>","title":"Other ways of utilizing v-for:"},{"location":"vue/#removing-list-items","text":"Add click listener on list item element Method for removing items from the list Will need identifier for given goal: the index <li v-for=\"(goal, index) in goals\" @click=\"removeGoal(index)\"> {{ goal }} - {{ index }} </li> methods: { ... removeGoal(idx) { this.goals.splice(idx, 1); }, },","title":"Removing List items"},{"location":"vue/#lists-keys","text":"Put goal and index in paragraph element and add input to list element for this example: <p>{{ goal }} - {{ index }}</p> and <input type=\"text\" @click.stop /> within the li element When deleting a list item and text is in the input, strange behavior. Deleting first goal deleted the input text in the second. Vue updates the list when you add and remove items, renders the list in the real DOM and updates it as required. Attempts to do this in a optimized way for performance, thus elements are reused. The content of the second element is moved into the first, to keep from rerendering the entire list or delete the first element and move them around. Just the dynamic content is moved around This is why we lose the input we have on the second element when the content of the second element is moved to the old first elements DOM element. Generally, reusing elements is good and efficient, but sometimes elements need to be able to be told apart. Simple extra attribute that is not a default HTML attribute for use on elements using v-for key=\"\" allows you to give an element a unique identifier Good habit and practice to always use on v-for elements even if not needed. key wants a unique identification criteria for every item Bind it to dynamic value Index won't work here, doesn't belong to goal content Unique keys likely already associated with items in database, they can be used for this purpose. Helps Vue tell elements apart Using goal text as key: <li v-for=\"(goal, index) in goals\" :key=\"goal\" @click=\"removeGoal(index)\">","title":"Lists &amp; Keys"},{"location":"vue/#module-summary_1","text":"Conditional Content v-if (and v-show ) allows you to render content only if a certain condition is met v-if can be combined with v-else and v-else-if (only on direct sibling elements) Lists v-for can be used to render multiple elements dynamically v-for can be used with arrays, objects, and ranges (numbers) v-for Variations You can extract values , values and indexes or values, keys and indexes. If you need v-for and v-if, DON\"T use them on the same element. Use a wrapper with v-if instead. Keys Vue re-uses DOM elements to optimize performance --> This can lead to bugs if elements contain state Bind the key attribute to a unique value to help Vue identify elements that belong to list content","title":"Module Summary"},{"location":"vue/#course-project-the-monster-slayer-game","text":"","title":"Course Project: The Monster Slayer Game"},{"location":"vue/#module-introduction_1","text":"Practicing core knowledge from last modules into Project Data-binding Interpolation v-bind Event binding with v-on Output lists of data with v-for Conditional content with v-if","title":"Module Introduction"},{"location":"vue/#project-setup-first-methods","text":"Starting HTML <body> <header> <h1>Monster Slayer</h1> </header> <div id=\"game\"> <section id=\"monster\" class=\"container\"> <h2>Monster Health</h2> <div class=\"healthbar\"> <div class=\"healthbar__value\"></div> </div> </section> <section id=\"player\" class=\"container\"> <h2>Your Health</h2> <div class=\"healthbar\"> <div class=\"healthbar__value\"></div> </div> </section> <section id=\"controls\"> <button>ATTACK</button> <button>SPECIAL ATTACK</button> <button>HEAL</button> <button>SURRENDER</button> </section> <section id=\"log\" class=\"container\"> <h2>Battle Log</h2> <ul></ul> </section> </div> </body> Top to bottom, beginning with \"Attack\" First time calling a method within the Vue app configuration itself. Javascript: function getRandomValue(min, max) { return Math.floor(Math.random() * (max - min)) + min; } const app = Vue.createApp({ data() { return { playerHealth: 100, monsterHealth: 100, }; }, methods: { attackMonster() { const attackValue = getRandomValue(5, 12); this.monsterHealth -= attackValue; this.attackPlayer(); }, attackPlayer() { const attackValue = getRandomValue(8, 15); this.playerHealth -= attackValue; }, }, }); app.mount('#game'); Next, connecting to our HTML","title":"Project Setup &amp; First Methods"},{"location":"vue/#updating-the-health-bars","text":"Click listener on our attack button <button @click=\"attackMonster\">ATTACK</button> Adjusting the health bars by binding style and changing width. Monster: <div class=\"healthbar__value\" :style=\"{width: monsterHealth + '%'}\"> Player health done similarly. Make this more lean with computed properties, then refernce that in style bind <div class=\"healthbar__value\" :style=\"playerBarStyles\"> computed: { monsterBarStyles() { return { width: this.monsterHealth + '%' }; }, playerBarStyles() { return { width: this.playerHealth + '%' }; }, },","title":"Updating the Health Bars"},{"location":"vue/#adding-a-special-attack","text":"Implement \"Special Attach\" as a similar method to attack Same method as regular attack, but change min, max to 10, 25. While having more attack value, should not be available all the time, only every 3 rounds. Keeping track of rounds with additional data property currentRound beginning at 0, increment with every player attack (monster attack occurs in same round). Bind disabled to whether currentRound is divisable by 3. <button :disabled=\"currentRound % 3 !== 0\" @click=\"specialAttackMonster\"> Outsource logic to Vue config in a computed property. mayUseSpecialAttack() { return this.currentRound % 3 !== 0; } <button :disabled=\"mayUseSpecialAttack\" @click=\"specialAttackMonster\">","title":"Adding a \"Special Attack\""},{"location":"vue/#adding-a-heal-functionality","text":"Implement as a method However, should not heal above 100 health, so include if check This should also count as a round in the game. Monster should attack as well since this is a round. healPlayer() { this.currentRound++; const healValue = getRandomValue(8, 20); if (this.playerHealth + healValue > 100) { this.playerHealth = 100; } else { this.playerHealth += healValue; } this.attackPlayer(); }, Attach click listener <button @click=\"healPlayer\">HEAL</button>","title":"Adding a \"Heal\" Functionality"},{"location":"vue/#adding-a-game-over-screen","text":"","title":"Adding a \"Game Over Screen\""},{"location":"vue/#-we-need-to-implement-logic-to-end-the-game-in-the-event-of-monster-health-or-player-health-below-0-or-both-resulting-in-a-draw","text":"","title":"- We need to implement logic to end the game, in the event of monster health or player health below 0, or both, resulting in a draw."},{"location":"vue/#introducing-components","text":"","title":"Introducing Components"},{"location":"vue/#moving-to-a-better-development-setup-workflow-with-the-vue-cli","text":"","title":"Moving to a Better Development Setup &amp; Workflow with the Vue CLI"}]}